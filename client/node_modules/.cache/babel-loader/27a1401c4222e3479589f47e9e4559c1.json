{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\n\nfunction attachMediaListener(query, callback) {\n  try {\n    query.addEventListener(\"change\", callback);\n    return () => query.removeEventListener(\"change\", callback);\n  } catch (e) {\n    query.addListener(callback);\n    return () => query.removeListener(callback);\n  }\n}\n\nfunction getInitialValue(query) {\n  if (typeof window !== \"undefined\" && \"matchMedia\" in window) {\n    return window.matchMedia(query).matches;\n  }\n\n  return false;\n}\n\nfunction useMediaQuery(query) {\n  const [matches, setMatches] = useState(getInitialValue(query));\n  const queryRef = useRef();\n  useEffect(() => {\n    if (\"matchMedia\" in window) {\n      queryRef.current = window.matchMedia(query);\n      setMatches(queryRef.current.matches);\n      return attachMediaListener(queryRef.current, event => setMatches(event.matches));\n    }\n  }, [query]);\n  return matches;\n}\n\nexport { useMediaQuery };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-media-query\\use-media-query.ts"],"names":[],"mappings":";;AACA,SAAS,mBAAT,CAA6B,KAA7B,EAAoC,QAApC,EAA8C;AAC5C,MAAI;AACF,IAAA,KAAK,CAAC,gBAAN,CAAuB,QAAvB,EAAiC,QAAjC;AACA,WAAO,MAAM,KAAK,CAAC,mBAAN,CAA0B,QAA1B,EAAoC,QAApC,CAAb;AACD,GAHD,CAGE,OAAO,CAAP,EAAU;AACV,IAAA,KAAK,CAAC,WAAN,CAAkB,QAAlB;AACA,WAAO,MAAM,KAAK,CAAC,cAAN,CAAqB,QAArB,CAAb;AACD;AACF;;AACD,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B,MAAI,OAAO,MAAP,KAAkB,WAAlB,IAAiC,gBAAgB,MAArD,EAA6D;AAC3D,WAAO,MAAM,CAAC,UAAP,CAAkB,KAAlB,EAAyB,OAAhC;AACD;;AACD,SAAO,KAAP;AACD;;AACM,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AACnC,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAQ,CAAC,eAAe,CAAC,KAAD,CAAhB,CAAtC;AACA,QAAM,QAAQ,GAAG,MAAM,EAAvB;AACA,EAAA,SAAS,CAAC,MAAM;AACd,QAAI,gBAAgB,MAApB,EAA4B;AAC1B,MAAA,QAAQ,CAAC,OAAT,GAAmB,MAAM,CAAC,UAAP,CAAkB,KAAlB,CAAnB;AACA,MAAA,UAAU,CAAC,QAAQ,CAAC,OAAT,CAAiB,OAAlB,CAAV;AACA,aAAO,mBAAmB,CAAC,QAAQ,CAAC,OAAV,EAAoB,KAAD,IAAW,UAAU,CAAC,KAAK,CAAC,OAAP,CAAxC,CAA1B;AACD;AACF,GANQ,EAMN,CAAC,KAAD,CANM,CAAT;AAOA,SAAO,OAAP;AACF","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\ntype MediaQueryCallback = (event: { matches: boolean; media: string }) => void;\n\n/**\n * Older versions of Safari (shipped withCatalina and before) do not support addEventListener on matchMedia\n * https://stackoverflow.com/questions/56466261/matchmedia-addlistener-marked-as-deprecated-addeventlistener-equivalent\n * */\nfunction attachMediaListener(query: MediaQueryList, callback: MediaQueryCallback) {\n  try {\n    query.addEventListener('change', callback);\n    return () => query.removeEventListener('change', callback);\n  } catch (e) {\n    query.addListener(callback);\n    return () => query.removeListener(callback);\n  }\n}\n\nfunction getInitialValue(query: string) {\n  if (typeof window !== 'undefined' && 'matchMedia' in window) {\n    return window.matchMedia(query).matches;\n  }\n  return false;\n}\n\nexport function useMediaQuery(query: string) {\n  const [matches, setMatches] = useState(getInitialValue(query));\n  const queryRef = useRef<MediaQueryList>();\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if ('matchMedia' in window) {\n      queryRef.current = window.matchMedia(query);\n      setMatches(queryRef.current.matches);\n      return attachMediaListener(queryRef.current, (event) => setMatches(event.matches));\n    }\n  }, [query]);\n\n  return matches;\n}\n"]},"metadata":{},"sourceType":"module"}
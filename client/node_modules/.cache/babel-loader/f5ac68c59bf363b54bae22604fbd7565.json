{"ast":null,"code":"import { useState } from 'react';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction useListState() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  const [state, setState] = useState(initialValue);\n\n  const append = function () {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    return setState(current => [...current, ...items]);\n  };\n\n  const prepend = function () {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    return setState(current => [...items, ...current]);\n  };\n\n  const insert = function (index) {\n    for (var _len3 = arguments.length, items = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      items[_key3 - 1] = arguments[_key3];\n    }\n\n    return setState(current => [...current.slice(0, index), ...items, ...current.slice(index)]);\n  };\n\n  const apply = fn => setState(current => current.map((item, index) => fn(item, index)));\n\n  const remove = function () {\n    for (var _len4 = arguments.length, indices = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      indices[_key4] = arguments[_key4];\n    }\n\n    return setState(current => current.filter((_, index) => !indices.includes(index)));\n  };\n\n  const pop = () => setState(current => {\n    const cloned = [...current];\n    cloned.pop();\n    return cloned;\n  });\n\n  const shift = () => setState(current => {\n    const cloned = [...current];\n    cloned.shift();\n    return cloned;\n  });\n\n  const reorder = _ref => {\n    let {\n      from,\n      to\n    } = _ref;\n    return setState(current => {\n      const cloned = [...current];\n      const item = current[from];\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n      return cloned;\n    });\n  };\n\n  const setItem = (index, item) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = item;\n    return cloned;\n  });\n\n  const setItemProp = (index, prop, value) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = __spreadProps(__spreadValues({}, cloned[index]), {\n      [prop]: value\n    });\n    return cloned;\n  });\n\n  const applyWhere = (condition, fn) => setState(current => current.map(item => condition(item) ? fn(item) : item));\n\n  return [state, {\n    setState,\n    append,\n    prepend,\n    insert,\n    pop,\n    shift,\n    apply,\n    applyWhere,\n    remove,\n    reorder,\n    setItem,\n    setItemProp\n  }];\n}\n\nexport { useListState };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-list-state\\use-list-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState } from 'react';\n\nexport function useListState<T>(initialValue: T[] = []) {\n  const [state, setState] = useState(initialValue);\n\n  const append = (...items: T[]) => setState((current) => [...current, ...items]);\n  const prepend = (...items: T[]) => setState((current) => [...items, ...current]);\n\n  const insert = (index: number, ...items: T[]) =>\n    setState((current) => [...current.slice(0, index), ...items, ...current.slice(index)]);\n\n  const apply = (fn: (item: T, index?: number) => T) =>\n    setState((current) => current.map((item, index) => fn(item, index)));\n\n  const remove = (...indices: number[]) =>\n    setState((current) => current.filter((_, index) => !indices.includes(index)));\n\n  const pop = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.pop();\n      return cloned;\n    });\n\n  const shift = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.shift();\n      return cloned;\n    });\n\n  const reorder = ({ from, to }: { from: number; to: number }) =>\n    setState((current) => {\n      const cloned = [...current];\n      const item = current[from];\n\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n\n      return cloned;\n    });\n\n  const setItem = (index: number, item: T) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = item;\n      return cloned;\n    });\n\n  const setItemProp = <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = { ...cloned[index], [prop]: value };\n      return cloned;\n    });\n\n  const applyWhere = (\n    condition: (item: T, index?: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) => setState((current) => current.map((item) => (condition(item) ? fn(item) : item)));\n\n  return [\n    state,\n    {\n      setState,\n      append,\n      prepend,\n      insert,\n      pop,\n      shift,\n      apply,\n      applyWhere,\n      remove,\n      reorder,\n      setItem,\n      setItemProp,\n    },\n  ] as const;\n}\n"]},"metadata":{},"sourceType":"module"}
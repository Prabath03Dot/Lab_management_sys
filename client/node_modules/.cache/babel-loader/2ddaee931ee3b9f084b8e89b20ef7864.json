{"ast":null,"code":"import { useState, useRef, useCallback } from 'react';\n\nfunction useIntersection(options) {\n  const [entry, setEntry] = useState(null);\n  const observer = useRef();\n  const ref = useCallback(element => {\n    if (observer.current) {\n      observer.current.disconnect();\n      observer.current = null;\n    }\n\n    if (element === null) {\n      setEntry(null);\n      return;\n    }\n\n    observer.current = new IntersectionObserver(_ref => {\n      let [_entry] = _ref;\n      setEntry(_entry);\n    }, options);\n    observer.current.observe(element);\n  }, [options == null ? void 0 : options.rootMargin, options == null ? void 0 : options.root, options == null ? void 0 : options.threshold]);\n  return [ref, entry];\n}\n\nexport { useIntersection };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-intersection\\use-intersection.ts"],"names":[],"mappings":";;AACO,SAAS,eAAT,CAAyB,OAAzB,EAAkC;AACvC,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,QAAQ,GAAG,MAAM,EAAvB;AACA,QAAM,GAAG,GAAG,WAAW,CAAE,OAAD,IAAa;AACnC,QAAI,QAAQ,CAAC,OAAb,EAAsB;AACpB,MAAA,QAAQ,CAAC,OAAT,CAAiB,UAAjB;AACA,MAAA,QAAQ,CAAC,OAAT,GAAmB,IAAnB;AACD;;AACD,QAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,MAAA,QAAQ,CAAC,IAAD,CAAR;AACA;AACD;;AACD,IAAA,QAAQ,CAAC,OAAT,GAAmB,IAAI,oBAAJ,CAAyB,QAAc;AAAA,UAAb,CAAC,MAAD,CAAa;AACxD,MAAA,QAAQ,CAAC,MAAD,CAAR;AACD,KAFkB,EAEhB,OAFgB,CAAnB;AAGA,IAAA,QAAQ,CAAC,OAAT,CAAiB,OAAjB,CAAyB,OAAzB;AACD,GAbsB,EAapB,CAAC,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2B,OAAO,CAAC,UAApC,EAAgD,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2B,OAAO,CAAC,IAAnF,EAAyF,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2B,OAAO,CAAC,SAA5H,CAboB,CAAvB;AAcA,SAAO,CAAC,GAAD,EAAM,KAAN,CAAP;AACF","sourcesContent":["import { useCallback, useRef, useState } from 'react';\n\nexport function useIntersection<T extends HTMLElement = any>(\n  options?: ConstructorParameters<typeof IntersectionObserver>[1]\n): readonly [(element: T | null) => void, IntersectionObserverEntry | null] {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>(null);\n\n  const observer = useRef<IntersectionObserver>();\n\n  const ref = useCallback(\n    (element: T | null) => {\n      if (observer.current) {\n        observer.current.disconnect();\n        observer.current = null;\n      }\n\n      if (element === null) {\n        setEntry(null);\n        return;\n      }\n\n      observer.current = new IntersectionObserver(([_entry]) => {\n        setEntry(_entry);\n      }, options);\n\n      observer.current.observe(element);\n    },\n    [options?.rootMargin, options?.root, options?.threshold]\n  );\n\n  return [ref, entry] as const;\n}\n"]},"metadata":{},"sourceType":"module"}
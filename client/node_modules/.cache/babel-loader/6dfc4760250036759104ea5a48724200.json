{"ast":null,"code":"import { useState } from 'react';\n\nfunction useSelectionState() {\n  let initialSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[], []];\n  const [selection, setSelection] = useState(initialSelection);\n\n  const handleSelect = (listIndex, value) => setSelection(currentSelection => {\n    const listSelection = currentSelection[listIndex];\n    let result = listSelection;\n\n    if (typeof value === \"string\") {\n      if (listSelection.includes(value)) {\n        result = listSelection.filter(item => item !== value);\n      } else {\n        result = [...listSelection, value];\n      }\n    }\n\n    const clone = [...currentSelection];\n    clone[listIndex] = result;\n    return clone;\n  });\n\n  const handleDeselect = (listIndex, values) => setSelection(currentSelection => {\n    const clone = [...currentSelection];\n    clone[listIndex] = currentSelection[listIndex].filter(item => !values.includes(item));\n    return clone;\n  });\n\n  const handleDeselectAll = listIndex => setSelection(currentSelection => {\n    const clone = [...currentSelection];\n    clone[listIndex] = [];\n    return clone;\n  });\n\n  const handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll\n  };\n  return [selection, handlers];\n}\n\nexport { useSelectionState };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\core\\src\\components\\TransferList\\use-selection-state\\use-selection-state.ts"],"names":[],"mappings":";;AACO,SAAS,iBAAT,GAAwD;AAAA,MAA7B,gBAA6B,uEAAV,CAAC,EAAD,EAAK,EAAL,CAAU;AAC7D,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAC,gBAAD,CAA1C;;AACA,QAAM,YAAY,GAAG,CAAC,SAAD,EAAY,KAAZ,KAAsB,YAAY,CAAE,gBAAD,IAAsB;AAC5E,UAAM,aAAa,GAAG,gBAAgB,CAAC,SAAD,CAAtC;AACA,QAAI,MAAM,GAAG,aAAb;;AACA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAI,aAAa,CAAC,QAAd,CAAuB,KAAvB,CAAJ,EAAmC;AACjC,QAAA,MAAM,GAAG,aAAa,CAAC,MAAd,CAAsB,IAAD,IAAU,IAAI,KAAK,KAAxC,CAAT;AACD,OAFD,MAEO;AACL,QAAA,MAAM,GAAG,CAAC,GAAG,aAAJ,EAAmB,KAAnB,CAAT;AACD;AACF;;AACD,UAAM,KAAK,GAAG,CAAC,GAAG,gBAAJ,CAAd;AACA,IAAA,KAAK,CAAC,SAAD,CAAL,GAAmB,MAAnB;AACA,WAAO,KAAP;AACD,GAbsD,CAAvD;;AAcA,QAAM,cAAc,GAAG,CAAC,SAAD,EAAY,MAAZ,KAAuB,YAAY,CAAE,gBAAD,IAAsB;AAC/E,UAAM,KAAK,GAAG,CAAC,GAAG,gBAAJ,CAAd;AACA,IAAA,KAAK,CAAC,SAAD,CAAL,GAAmB,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,MAA5B,CAAoC,IAAD,IAAU,CAAC,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAA9C,CAAnB;AACA,WAAO,KAAP;AACD,GAJyD,CAA1D;;AAKA,QAAM,iBAAiB,GAAI,SAAD,IAAe,YAAY,CAAE,gBAAD,IAAsB;AAC1E,UAAM,KAAK,GAAG,CAAC,GAAG,gBAAJ,CAAd;AACA,IAAA,KAAK,CAAC,SAAD,CAAL,GAAmB,EAAnB;AACA,WAAO,KAAP;AACD,GAJoD,CAArD;;AAKA,QAAM,QAAQ,GAAG;AACf,IAAA,MAAM,EAAE,YADO;AAEf,IAAA,QAAQ,EAAE,cAFK;AAGf,IAAA,WAAW,EAAE;AAHE,GAAjB;AAKA,SAAO,CAAC,SAAD,EAAY,QAAZ,CAAP;AACF","sourcesContent":["import { useState } from 'react';\n\nexport type Selection = [string[], string[]];\n\nexport function useSelectionState(initialSelection: Selection = [[], []]) {\n  const [selection, setSelection] = useState<Selection>(initialSelection);\n\n  const handleSelect = (listIndex: 0 | 1, value: string) =>\n    setSelection((currentSelection) => {\n      const listSelection = currentSelection[listIndex];\n      let result = listSelection;\n\n      if (typeof value === 'string') {\n        if (listSelection.includes(value)) {\n          result = listSelection.filter((item) => item !== value);\n        } else {\n          result = [...listSelection, value];\n        }\n      }\n\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = result;\n      return clone;\n    });\n\n  const handleDeselect = (listIndex: 0 | 1, values: string[]) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = currentSelection[listIndex].filter((item) => !values.includes(item));\n      return clone;\n    });\n\n  const handleDeselectAll = (listIndex: 0 | 1) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = [];\n      return clone;\n    });\n\n  const handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll,\n  };\n\n  return [selection, handlers] as const;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useState } from 'react';\n\nfunction useQueue(_ref) {\n  let {\n    initialValues = [],\n    limit\n  } = _ref;\n  const [{\n    state,\n    queue\n  }, setState] = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit)\n  });\n\n  const add = function () {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    return setState(current => {\n      const results = [...current.state, ...current.queue, ...items];\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit)\n      };\n    });\n  };\n\n  const update = fn => setState(current => {\n    const results = fn([...current.state, ...current.queue]);\n    return {\n      state: results.slice(0, limit),\n      queue: results.slice(limit)\n    };\n  });\n\n  const cleanQueue = () => setState(current => ({\n    state: current.state,\n    queue: []\n  }));\n\n  return {\n    state,\n    queue,\n    add,\n    update,\n    cleanQueue\n  };\n}\n\nexport { useQueue };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-queue\\use-queue.ts"],"names":[],"mappings":";;AACO,SAAS,QAAT,OAAiD;AAAA,MAA/B;AAAE,IAAA,aAAa,GAAG,EAAlB;AAAsB,IAAA;AAAtB,GAA+B;AACtD,QAAM,CAAC;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAD,EAAmB,QAAnB,IAA+B,QAAQ,CAAC;AAC5C,IAAA,KAAK,EAAE,aAAa,CAAC,KAAd,CAAoB,CAApB,EAAuB,KAAvB,CADqC;AAE5C,IAAA,KAAK,EAAE,aAAa,CAAC,KAAd,CAAoB,KAApB;AAFqC,GAAD,CAA7C;;AAIA,QAAM,GAAG,GAAG;AAAA,sCAAI,KAAJ;AAAI,MAAA,KAAJ;AAAA;;AAAA,WAAc,QAAQ,CAAE,OAAD,IAAa;AAC9C,YAAM,OAAO,GAAG,CAAC,GAAG,OAAO,CAAC,KAAZ,EAAmB,GAAG,OAAO,CAAC,KAA9B,EAAqC,GAAG,KAAxC,CAAhB;AACA,aAAO;AACL,QAAA,KAAK,EAAE,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,KAAjB,CADF;AAEL,QAAA,KAAK,EAAE,OAAO,CAAC,KAAR,CAAc,KAAd;AAFF,OAAP;AAID,KANiC,CAAtB;AAAA,GAAZ;;AAOA,QAAM,MAAM,GAAI,EAAD,IAAQ,QAAQ,CAAE,OAAD,IAAa;AAC3C,UAAM,OAAO,GAAG,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,KAAZ,EAAmB,GAAG,OAAO,CAAC,KAA9B,CAAD,CAAlB;AACA,WAAO;AACL,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,KAAjB,CADF;AAEL,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,CAAc,KAAd;AAFF,KAAP;AAID,GAN8B,CAA/B;;AAOA,QAAM,UAAU,GAAG,MAAM,QAAQ,CAAE,OAAD,KAAc;AAAE,IAAA,KAAK,EAAE,OAAO,CAAC,KAAjB;AAAwB,IAAA,KAAK,EAAE;AAA/B,GAAd,CAAD,CAAjC;;AACA,SAAO;AACL,IAAA,KADK;AAEL,IAAA,KAFK;AAGL,IAAA,GAHK;AAIL,IAAA,MAJK;AAKL,IAAA;AALK,GAAP;AAOF","sourcesContent":["import { useState } from 'react';\n\nexport function useQueue<T>({ initialValues = [], limit }: { initialValues?: T[]; limit: number }) {\n  const [{ state, queue }, setState] = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit),\n  });\n\n  const add = (...items: T[]) =>\n    setState((current) => {\n      const results = [...current.state, ...current.queue, ...items];\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const update = (fn: (state: T[]) => T[]) =>\n    setState((current) => {\n      const results = fn([...current.state, ...current.queue]);\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const cleanQueue = () => setState((current) => ({ state: current.state, queue: [] }));\n\n  return {\n    state,\n    queue,\n    add,\n    update,\n    cleanQueue,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { composeRefs as e } from \"@radix-ui/react-compose-refs\";\nimport * as t from \"react\";\nimport r from \"@babel/runtime/helpers/esm/extends\";\nexport const Slot = /*#__PURE__*/t.forwardRef((e, o) => {\n  const {\n    children: a,\n    ...s\n  } = e;\n  return t.Children.toArray(a).some(l) ? /*#__PURE__*/t.createElement(t.Fragment, null, t.Children.map(a, e => l(e) ? /*#__PURE__*/t.createElement(n, r({}, s, {\n    ref: o\n  }), e.props.children) : e)) : /*#__PURE__*/t.createElement(n, r({}, s, {\n    ref: o\n  }), a);\n});\nSlot.displayName = \"Slot\";\nconst n = /*#__PURE__*/t.forwardRef((r, n) => {\n  const {\n    children: l,\n    ...a\n  } = r;\n  /*#__PURE__*/\n\n  return t.isValidElement(l) ? /*#__PURE__*/t.cloneElement(l, { ...o(a, l.props),\n    ref: e(n, l.ref)\n  }) : t.Children.count(l) > 1 ? t.Children.only(null) : null;\n});\nn.displayName = \"SlotClone\";\nexport const Slottable = _ref => {\n  let {\n    children: e\n  } = _ref;\n  return /*#__PURE__*/t.createElement(t.Fragment, null, e);\n};\n\nfunction l(e) {\n  /*#__PURE__*/\n  return t.isValidElement(e) && e.type === Slottable;\n}\n\nfunction o(e, t) {\n  const r = { ...t\n  };\n\n  for (const n in t) {\n    const l = e[n],\n          o = t[n];\n    /^on[A-Z]/.test(n) ? r[n] = function () {\n      null == o || o(...arguments), null == l || l(...arguments);\n    } : \"style\" === n ? r[n] = { ...l,\n      ...o\n    } : \"className\" === n && (r[n] = [l, o].filter(Boolean).join(\" \"));\n  }\n\n  return { ...e,\n    ...r\n  };\n}\n\nexport const Root = Slot;","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@radix-ui\\react-slot\\dist\\packages\\react\\slot\\src\\Slot.tsx"],"names":["Slot","React","forwardRef","props","forwardedRef","children","slotProps","Children","toArray","some","isSlottable","_react","map","child","$d34e8c328cb3dd19ab7a2f6eafa6ad$var$SlotClone","ref","displayName","SlotClone","isValidElement","cloneElement","mergeProps","composeRefs","count","only","Slottable","type","childProps","overrideProps","propName","slotPropValue","childPropValue","test","args","filter","Boolean","join","Root"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.Children.toArray(children).some(isSlottable)) {\n    return (\n      <>\n        {React.Children.map(children, (child) => {\n          return isSlottable(child) ? (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          ) : (\n            child\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      ref: composeRefs(forwardedRef, (children as any).ref),\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    // if it's a handler, modify the override by composing the base handler\n    if (isHandler) {\n      overrideProps[propName] = (...args: unknown[]) => {\n        childPropValue?.(...args);\n        slotPropValue?.(...args);\n      };\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function getOS() {\n  const {\n    userAgent\n  } = window.navigator;\n  const {\n    platform\n  } = window.navigator;\n  const macosPlatforms = [\"Macintosh\", \"MacIntel\", \"MacPPC\", \"Mac68K\"];\n  const windowsPlatforms = [\"Win32\", \"Win64\", \"Windows\", \"WinCE\"];\n  const iosPlatforms = [\"iPhone\", \"iPad\", \"iPod\"];\n  let os = \"undetermined\";\n\n  if (macosPlatforms.indexOf(platform) !== -1) {\n    os = \"macos\";\n  } else if (iosPlatforms.indexOf(platform) !== -1) {\n    os = \"ios\";\n  } else if (windowsPlatforms.indexOf(platform) !== -1) {\n    os = \"windows\";\n  } else if (/Android/.test(userAgent)) {\n    os = \"android\";\n  } else if (/Linux/.test(platform)) {\n    os = \"linux\";\n  }\n\n  return os;\n}\n\nfunction useOs() {\n  if (typeof window !== \"undefined\") {\n    return getOS();\n  }\n\n  return \"undetermined\";\n}\n\nexport { useOs };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-os\\use-os.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,GAAiB;AACf,QAAM;AAAE,IAAA;AAAF,MAAgB,MAAM,CAAC,SAA7B;AACA,QAAM;AAAE,IAAA;AAAF,MAAe,MAAM,CAAC,SAA5B;AACA,QAAM,cAAc,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,QAA1B,EAAoC,QAApC,CAAvB;AACA,QAAM,gBAAgB,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,SAAnB,EAA8B,OAA9B,CAAzB;AACA,QAAM,YAAY,GAAG,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,CAArB;AACA,MAAI,EAAE,GAAG,cAAT;;AACA,MAAI,cAAc,CAAC,OAAf,CAAuB,QAAvB,MAAqC,CAAC,CAA1C,EAA6C;AAC3C,IAAA,EAAE,GAAG,OAAL;AACD,GAFD,MAEO,IAAI,YAAY,CAAC,OAAb,CAAqB,QAArB,MAAmC,CAAC,CAAxC,EAA2C;AAChD,IAAA,EAAE,GAAG,KAAL;AACD,GAFM,MAEA,IAAI,gBAAgB,CAAC,OAAjB,CAAyB,QAAzB,MAAuC,CAAC,CAA5C,EAA+C;AACpD,IAAA,EAAE,GAAG,SAAL;AACD,GAFM,MAEA,IAAI,UAAU,IAAV,CAAe,SAAf,CAAJ,EAA+B;AACpC,IAAA,EAAE,GAAG,SAAL;AACD,GAFM,MAEA,IAAI,QAAQ,IAAR,CAAa,QAAb,CAAJ,EAA4B;AACjC,IAAA,EAAE,GAAG,OAAL;AACD;;AACD,SAAO,EAAP;AACD;;AACM,SAAS,KAAT,GAAiB;AACtB,MAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,KAAK,EAAZ;AACD;;AACD,SAAO,cAAP;AACF","sourcesContent":["export type OS = 'undetermined' | 'macos' | 'ios' | 'windows' | 'android' | 'linux';\n\nfunction getOS() {\n  const { userAgent } = window.navigator;\n  const { platform } = window.navigator;\n  const macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'];\n  const windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'];\n  const iosPlatforms = ['iPhone', 'iPad', 'iPod'];\n  let os: OS = 'undetermined';\n\n  if (macosPlatforms.indexOf(platform) !== -1) {\n    os = 'macos';\n  } else if (iosPlatforms.indexOf(platform) !== -1) {\n    os = 'ios';\n  } else if (windowsPlatforms.indexOf(platform) !== -1) {\n    os = 'windows';\n  } else if (/Android/.test(userAgent)) {\n    os = 'android';\n  } else if (/Linux/.test(platform)) {\n    os = 'linux';\n  }\n\n  return os;\n}\n\nexport function useOs(): OS {\n  if (typeof window !== 'undefined') {\n    return getOS();\n  }\n\n  return 'undetermined';\n}\n"]},"metadata":{},"sourceType":"module"}
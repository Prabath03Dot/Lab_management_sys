{"ast":null,"code":"import { useRef, useEffect } from 'react';\nconst DEFAULT_EVENTS = [\"mousedown\", \"touchstart\"];\n\nfunction useClickOutside(handler, events, nodes) {\n  const ref = useRef();\n  useEffect(() => {\n    const listener = event => {\n      if (Array.isArray(nodes)) {\n        const shouldTrigger = nodes.every(node => !!node && !node.contains(event.target));\n        shouldTrigger && handler();\n      } else if (ref.current && !ref.current.contains(event.target)) {\n        handler();\n      }\n    };\n\n    (events || DEFAULT_EVENTS).forEach(fn => document.addEventListener(fn, listener));\n    return () => {\n      (events || DEFAULT_EVENTS).forEach(fn => document.removeEventListener(fn, listener));\n    };\n  }, [ref, handler, nodes]);\n  return ref;\n}\n\nexport { useClickOutside };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-click-outside\\use-click-outside.ts"],"names":[],"mappings":";AACA,MAAM,cAAc,GAAG,CAAC,WAAD,EAAc,YAAd,CAAvB;;AACO,SAAS,eAAT,CAAyB,OAAzB,EAAkC,MAAlC,EAA0C,KAA1C,EAAiD;AACtD,QAAM,GAAG,GAAG,MAAM,EAAlB;AACA,EAAA,SAAS,CAAC,MAAM;AACd,UAAM,QAAQ,GAAI,KAAD,IAAW;AAC1B,UAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB,cAAM,aAAa,GAAG,KAAK,CAAC,KAAN,CAAa,IAAD,IAAU,CAAC,CAAC,IAAF,IAAU,CAAC,IAAI,CAAC,QAAL,CAAc,KAAK,CAAC,MAApB,CAAjC,CAAtB;AACA,QAAA,aAAa,IAAI,OAAO,EAAxB;AACD,OAHD,MAGO,IAAI,GAAG,CAAC,OAAJ,IAAe,CAAC,GAAG,CAAC,OAAJ,CAAY,QAAZ,CAAqB,KAAK,CAAC,MAA3B,CAApB,EAAwD;AAC7D,QAAA,OAAO;AACR;AACF,KAPD;;AAQA,KAAC,MAAM,IAAI,cAAX,EAA2B,OAA3B,CAAoC,EAAD,IAAQ,QAAQ,CAAC,gBAAT,CAA0B,EAA1B,EAA8B,QAA9B,CAA3C;AACA,WAAO,MAAM;AACX,OAAC,MAAM,IAAI,cAAX,EAA2B,OAA3B,CAAoC,EAAD,IAAQ,QAAQ,CAAC,mBAAT,CAA6B,EAA7B,EAAiC,QAAjC,CAA3C;AACD,KAFD;AAGD,GAbQ,EAaN,CAAC,GAAD,EAAM,OAAN,EAAe,KAAf,CAbM,CAAT;AAcA,SAAO,GAAP;AACF","sourcesContent":["import { useEffect, useRef } from 'react';\n\nconst DEFAULT_EVENTS = ['mousedown', 'touchstart'];\n\nexport function useClickOutside<T extends HTMLElement = any>(\n  handler: () => void,\n  events?: string[] | null,\n  nodes?: HTMLElement[]\n) {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    const listener = (event: any) => {\n      if (Array.isArray(nodes)) {\n        const shouldTrigger = nodes.every((node) => !!node && !node.contains(event.target));\n        shouldTrigger && handler();\n      } else if (ref.current && !ref.current.contains(event.target)) {\n        handler();\n      }\n    };\n\n    (events || DEFAULT_EVENTS).forEach((fn) => document.addEventListener(fn, listener));\n\n    return () => {\n      (events || DEFAULT_EVENTS).forEach((fn) => document.removeEventListener(fn, listener));\n    };\n  }, [ref, handler, nodes]);\n\n  return ref;\n}\n"]},"metadata":{},"sourceType":"module"}
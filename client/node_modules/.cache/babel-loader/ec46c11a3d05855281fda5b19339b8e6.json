{"ast":null,"code":"import { round } from './parsers.js';\n\nfunction hsvaToRgbaObject(_ref) {\n  let {\n    h,\n    s,\n    v,\n    a\n  } = _ref;\n\n  const _h = h / 360 * 6;\n\n  const _s = s / 100;\n\n  const _v = v / 100;\n\n  const hh = Math.floor(_h);\n  const l = _v * (1 - _s);\n  const c = _v * (1 - (_h - hh) * _s);\n  const d = _v * (1 - (1 - _h + hh) * _s);\n  const module = hh % 6;\n  return {\n    r: round([_v, c, l, l, d, _v][module] * 255),\n    g: round([d, _v, _v, c, l, l][module] * 255),\n    b: round([l, l, d, _v, _v, c][module] * 255),\n    a: round(a, 2)\n  };\n}\n\nfunction hsvaToRgba(color, includeAlpha) {\n  const {\n    r,\n    g,\n    b,\n    a\n  } = hsvaToRgbaObject(color);\n\n  if (!includeAlpha) {\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${round(a, 2)})`;\n}\n\nfunction hsvaToHsl(_ref2, includeAlpha) {\n  let {\n    h,\n    s,\n    v,\n    a\n  } = _ref2;\n  const hh = (200 - s) * v / 100;\n  const result = {\n    h: Math.round(h),\n    s: Math.round(hh > 0 && hh < 200 ? s * v / 100 / (hh <= 100 ? hh : 200 - hh) * 100 : 0),\n    l: Math.round(hh / 2)\n  };\n\n  if (!includeAlpha) {\n    return `hsl(${result.h}, ${result.s}%, ${result.l}%)`;\n  }\n\n  return `hsla(${result.h}, ${result.s}%, ${result.l}%, ${round(a, 2)})`;\n}\n\nfunction formatHexPart(number) {\n  const hex = number.toString(16);\n  return hex.length < 2 ? `0${hex}` : hex;\n}\n\nfunction hsvaToHex(color) {\n  const {\n    r,\n    g,\n    b\n  } = hsvaToRgbaObject(color);\n  return `#${formatHexPart(r)}${formatHexPart(g)}${formatHexPart(b)}`;\n}\n\nconst CONVERTERS = {\n  hex: hsvaToHex,\n  rgb: color => hsvaToRgba(color, false),\n  rgba: color => hsvaToRgba(color, true),\n  hsl: color => hsvaToHsl(color, false),\n  hsla: color => hsvaToHsl(color, true)\n};\n\nfunction convertHsvaTo(format, color) {\n  if (!color) {\n    return \"#000000\";\n  }\n\n  if (!(format in CONVERTERS)) {\n    return CONVERTERS.hex(color);\n  }\n\n  return CONVERTERS[format](color);\n}\n\nexport { convertHsvaTo, hsvaToHex, hsvaToHsl, hsvaToRgba, hsvaToRgbaObject };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\core\\src\\components\\ColorPicker\\converters\\converters.ts"],"names":[],"mappings":"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","sourcesContent":["import { HsvaColor, RgbaColor, ColorFormat } from '../types';\nimport { round } from './parsers';\n\nexport function hsvaToRgbaObject({ h, s, v, a }: HsvaColor): RgbaColor {\n  const _h = (h / 360) * 6;\n  const _s = s / 100;\n  const _v = v / 100;\n\n  const hh = Math.floor(_h);\n  const l = _v * (1 - _s);\n  const c = _v * (1 - (_h - hh) * _s);\n  const d = _v * (1 - (1 - _h + hh) * _s);\n  const module = hh % 6;\n\n  return {\n    r: round([_v, c, l, l, d, _v][module] * 255),\n    g: round([d, _v, _v, c, l, l][module] * 255),\n    b: round([l, l, d, _v, _v, c][module] * 255),\n    a: round(a, 2),\n  };\n}\n\nexport function hsvaToRgba(color: HsvaColor, includeAlpha: boolean) {\n  const { r, g, b, a } = hsvaToRgbaObject(color);\n\n  if (!includeAlpha) {\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${round(a, 2)})`;\n}\n\nexport function hsvaToHsl({ h, s, v, a }: HsvaColor, includeAlpha: boolean) {\n  const hh = ((200 - s) * v) / 100;\n\n  const result = {\n    h: Math.round(h),\n    s: Math.round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n    l: Math.round(hh / 2),\n  };\n\n  if (!includeAlpha) {\n    return `hsl(${result.h}, ${result.s}%, ${result.l}%)`;\n  }\n\n  return `hsla(${result.h}, ${result.s}%, ${result.l}%, ${round(a, 2)})`;\n}\n\nfunction formatHexPart(number: number) {\n  const hex = number.toString(16);\n  return hex.length < 2 ? `0${hex}` : hex;\n}\n\nexport function hsvaToHex(color: HsvaColor) {\n  const { r, g, b } = hsvaToRgbaObject(color);\n  return `#${formatHexPart(r)}${formatHexPart(g)}${formatHexPart(b)}`;\n}\n\nconst CONVERTERS: Record<ColorFormat, (color: HsvaColor) => string> = {\n  hex: hsvaToHex,\n  rgb: (color) => hsvaToRgba(color, false),\n  rgba: (color) => hsvaToRgba(color, true),\n  hsl: (color) => hsvaToHsl(color, false),\n  hsla: (color) => hsvaToHsl(color, true),\n};\n\nexport function convertHsvaTo(format: ColorFormat, color: HsvaColor) {\n  if (!color) {\n    return '#000000';\n  }\n\n  if (!(format in CONVERTERS)) {\n    return CONVERTERS.hex(color);\n  }\n\n  return CONVERTERS[format](color);\n}\n"]},"metadata":{},"sourceType":"module"}
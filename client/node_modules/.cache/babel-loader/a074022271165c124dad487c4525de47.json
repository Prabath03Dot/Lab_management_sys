{"ast":null,"code":"import { a as _objectSpread2, e as _toConsumableArray, c as LocalizationContext, w as withSendbirdContext, b as _slicedToArray, u as uuidv4 } from './LocalizationContext-2dd9ebb4.js';\nimport React__default, { useContext, useRef, useState, useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { U as UPDATE_USER_INFO } from './actionTypes-62b820c3.js';\nimport { I as IconButton, M as Modal, T as Type, a as TextButton, C as ContextMenu, b as MenuItems, c as MenuItem, i as CREATE_CHANNEL$1, j as UPDATE_USER_MESSAGE, L as LEAVE_CHANNEL, S as SEND_MESSAGE_START, h as UserProfileProvider } from './index-5ffc2e37.js';\nimport { f as filterChannelListParams, g as getChannelsWithUpsertedChannel, t as truncateString } from './index-2b8da253.js';\nimport { C as ChannelAvatar } from './index-881fbba8.js';\nimport { B as Badge, i as isBroadcastChannelEnabled, a as isSuperGroupChannelEnabled, I as InviteMembers, c as createDefaultUserListQuery, b as createChannel, L as LeaveChannel } from './LeaveChannel-2a6e54c8.js';\nimport { g as LabelStringSet, I as Icon, c as IconTypes, d as IconColors, L as Label, a as LabelTypography, b as LabelColors, A as Avatar, P as PlaceHolder, f as PlaceHolderTypes } from './index-8f3e6954.js';\nimport { i as isToday, a as isYesterday, f as formatRelative } from './index-dc6f389c.js';\nimport { f as format } from './index-3b2392ac.js';\nimport { I as InputLabel, a as Input, n as noop$1 } from './index-89e256af.js';\nimport 'react-dom';\nimport './utils-dadb8f4b.js';\nvar RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nvar CREATE_CHANNEL = 'CREATE_CHANNEL';\nvar SET_AUTO_SELECT_CHANNEL_ITEM = 'SET_AUTO_SELECT_CHANNEL_ITEM';\nvar LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nvar HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\nvar FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nvar FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nvar FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\nvar INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nvar INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nvar INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\nvar ON_USER_JOINED = 'ON_USER_JOINED';\nvar ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nvar ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nvar ON_USER_LEFT = 'ON_USER_LEFT';\nvar ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nvar ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nvar ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nvar ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nvar ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nvar ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\nvar CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nvar CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\nvar channelListInitialState = {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case INIT_CHANNELS_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        loading: true\n      });\n\n    case RESET_CHANNEL_LIST:\n      return channelListInitialState;\n\n    case INIT_CHANNELS_SUCCESS:\n      {\n        var nextChannel = action.payload && action.payload.length && action.payload.length > 0 ? action.payload[0].url : null;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          initialized: true,\n          loading: false,\n          allChannels: action.payload,\n          currentChannel: state.disableAutoSelect ? null : nextChannel\n        });\n      }\n\n    case FETCH_CHANNELS_SUCCESS:\n      {\n        var currentChannels = state.allChannels.map(function (c) {\n          return c.url;\n        });\n        var filteredChannels = action.payload.filter(function (_ref) {\n          var url = _ref.url;\n          return !currentChannels.find(function (c) {\n            return c === url;\n          });\n        });\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [].concat(_toConsumableArray(state.allChannels), _toConsumableArray(filteredChannels))\n        });\n      }\n\n    case CREATE_CHANNEL:\n      {\n        var channel = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: channel.url\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: channel.url,\n          allChannels: [channel].concat(_toConsumableArray(state.allChannels.filter(function (ch) {\n            return ch.url !== channel.url;\n          })))\n        });\n      }\n\n    case ON_CHANNEL_ARCHIVED:\n      {\n        var _channel = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel)\n            });\n          }\n        }\n\n        var _nextChannel = _channel.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel.url ? 1 : 0].url : state.currentChannel;\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : _nextChannel,\n          allChannels: state.allChannels.filter(function (_ref2) {\n            var url = _ref2.url;\n            return url !== _channel.url;\n          })\n        });\n      }\n\n    case LEAVE_CHANNEL_SUCCESS:\n    case ON_CHANNEL_DELETED:\n      {\n        var channelUrl = action.payload;\n\n        var _nextChannel2 = channelUrl === state.currentChannel ? state.allChannels[0].url : state.currentChannel;\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : _nextChannel2,\n          allChannels: state.allChannels.filter(function (_ref3) {\n            var url = _ref3.url;\n            return url !== channelUrl;\n          })\n        });\n      }\n\n    case ON_USER_LEFT:\n      {\n        var _action$payload = action.payload,\n            _channel2 = _action$payload.channel,\n            isMe = _action$payload.isMe;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel2, state.currentUserId)) {\n            var _filteredChannels2 = getChannelsWithUpsertedChannel(state.allChannels, _channel2);\n\n            var _nextChannel5 = isMe && _channel2.url === state.currentChannel ? _filteredChannels2[0].url : state.currentChannel;\n\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              currentChannel: state.disableAutoSelect ? null : _nextChannel5,\n              allChannels: _filteredChannels2\n            });\n          }\n\n          var _nextChannel4 = _channel2.url === state.currentChannel ? state.allChannels[0].url : state.currentChannel;\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel4,\n            allChannels: state.allChannels.filter(function (_ref4) {\n              var url = _ref4.url;\n              return url !== _channel2.url;\n            })\n          });\n        }\n\n        var _filteredChannels = state.allChannels.filter(function (c) {\n          return !(c.url === _channel2.url && isMe);\n        });\n\n        var _nextChannel3 = isMe && _channel2.url === state.currentChannel ? _filteredChannels[0].url : state.currentChannel;\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : _nextChannel3,\n          allChannels: _filteredChannels\n        });\n      }\n\n    case ON_USER_JOINED:\n    case ON_CHANNEL_CHANGED:\n    case ON_READ_RECEIPT_UPDATED:\n    case ON_DELIVERY_RECEIPT_UPDATED:\n      {\n        var _state$allChannels = state.allChannels,\n            allChannels = _state$allChannels === void 0 ? [] : _state$allChannels;\n        var _channel3 = action.payload;\n        var unreadMessageCount = _channel3.unreadMessageCount;\n        if (!_channel3.lastMessage) return state;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel3, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(allChannels, _channel3)\n            });\n          }\n\n          var _nextChannel6 = _channel3.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel3.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel6,\n            allChannels: state.allChannels.filter(function (_ref5) {\n              var url = _ref5.url;\n              return url !== _channel3.url;\n            })\n          });\n        } // if its only an unread message count change, dont push to top\n\n\n        if (unreadMessageCount === 0) {\n          var currentChannel = allChannels.find(function (_ref6) {\n            var url = _ref6.url;\n            return url === _channel3.url;\n          });\n          var currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n\n          if (currentUnreadCount === 0) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: state.allChannels.map(function (ch) {\n                return ch.url === _channel3.url ? _channel3 : ch;\n              })\n            });\n          }\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [_channel3].concat(_toConsumableArray(state.allChannels.filter(function (_ref7) {\n            var url = _ref7.url;\n            return url !== action.payload.url;\n          })))\n        });\n      }\n\n    case SET_CURRENT_CHANNEL:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentChannel: action.payload\n      });\n\n    case SHOW_CHANNEL_SETTINGS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        showSettings: true\n      });\n\n    case HIDE_CHANNEL_SETTINGS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        showSettings: false\n      });\n\n    case ON_LAST_MESSAGE_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allChannels: state.allChannels.map(function (channel) {\n          return channel.url === action.payload.url ? action.payload : channel;\n        })\n      });\n\n    case ON_CHANNEL_FROZEN:\n      {\n        var _channel4 = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel4, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel4)\n            });\n          }\n\n          var _nextChannel7 = _channel4.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel4.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel7,\n            allChannels: state.allChannels.filter(function (_ref8) {\n              var url = _ref8.url;\n              return url !== _channel4.url;\n            })\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === _channel4.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = true;\n              return ch;\n            }\n\n            return ch;\n          })\n        });\n      }\n\n    case ON_CHANNEL_UNFROZEN:\n      {\n        var _channel5 = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel5, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel5)\n            });\n          }\n\n          var _nextChannel8 = _channel5.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel5.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel8,\n            allChannels: state.allChannels.filter(function (_ref9) {\n              var url = _ref9.url;\n              return url !== _channel5.url;\n            })\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === _channel5.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = false;\n              return ch;\n            }\n\n            return ch;\n          })\n        });\n      }\n\n    case CHANNEL_REPLACED_TO_TOP:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [action.payload].concat(_toConsumableArray(state.allChannels.filter(function (channel) {\n            return channel.url !== action.payload.url;\n          })))\n        });\n      }\n\n    case CHANNEL_LIST_PARAMS_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery\n      });\n\n    case SET_AUTO_SELECT_CHANNEL_ITEM:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        disableAutoSelect: action.payload\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar getChannelTitle = function getChannelTitle() {\n  var channel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var currentUserId = arguments.length > 1 ? arguments[1] : undefined;\n  var stringSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : LabelStringSet;\n\n  if (!channel || !channel.name && !channel.members) {\n    return stringSet.NO_TITLE;\n  }\n\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members.filter(function (_ref) {\n    var userId = _ref.userId;\n    return userId !== currentUserId;\n  }).map(function (_ref2) {\n    var nickname = _ref2.nickname;\n    return nickname || stringSet.NO_NAME;\n  }).join(', ');\n};\n\nvar getLastMessageCreatedAt = function getLastMessageCreatedAt(channel, locale) {\n  var _channel$lastMessage;\n\n  var createdAt = channel === null || channel === void 0 ? void 0 : (_channel$lastMessage = channel.lastMessage) === null || _channel$lastMessage === void 0 ? void 0 : _channel$lastMessage.createdAt;\n  var optionalParam = locale ? {\n    locale: locale\n  } : null;\n\n  if (!createdAt) {\n    return '';\n  }\n\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n\n  return format(createdAt, 'MMM dd', optionalParam);\n};\n\nvar getTotalMembers = function getTotalMembers(channel) {\n  return channel && channel.memberCount ? channel.memberCount : 0;\n};\n\nvar getPrettyLastMessage = function getPrettyLastMessage() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var MAXLEN = 30;\n  var messageType = message.messageType,\n      name = message.name;\n\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n\n  return message.message;\n};\n\nvar getLastMessage = function getLastMessage(channel) {\n  return channel && channel.lastMessage ? getPrettyLastMessage(channel.lastMessage) : '';\n};\n\nvar getChannelUnreadMessageCount = function getChannelUnreadMessageCount(channel) {\n  return channel && channel.unreadMessageCount ? channel.unreadMessageCount : 0;\n};\n\nfunction ChannelPreview(_ref) {\n  var channel = _ref.channel,\n      currentUser = _ref.currentUser,\n      isActive = _ref.isActive,\n      ChannelAction = _ref.ChannelAction,\n      theme = _ref.theme,\n      onClick = _ref.onClick,\n      tabIndex = _ref.tabIndex;\n  var userId = currentUser.userId;\n  var isBroadcast = channel.isBroadcast,\n      isFrozen = channel.isFrozen;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet,\n      dateLocale = _useContext.dateLocale;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-preview', isActive ? 'sendbird-channel-preview--active' : ''].join(' '),\n    role: \"link\",\n    onClick: onClick,\n    onKeyPress: onClick,\n    tabIndex: tabIndex\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header\"\n  }, isBroadcast && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header__broadcast-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.SECONDARY,\n    height: \"16px\",\n    width: \"16px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__channel-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, getChannelTitle(channel, userId, stringSet)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__total-members\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, getTotalMembers(channel)), isFrozen && /*#__PURE__*/React__default.createElement(\"div\", {\n    title: \"Frozen\",\n    className: \"sendbird-channel-preview__content__upper__header__frozen-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.FREEZE,\n    fillColor: IconColors.PRIMARY,\n    height: 12,\n    width: 12\n  }))), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__last-message-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getLastMessageCreatedAt(channel, dateLocale))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__lower__last-message\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, getLastMessage(channel)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower__unread-message-count\"\n  }, getChannelUnreadMessageCount(channel) // return number\n  ? /*#__PURE__*/React__default.createElement(Badge, {\n    count: getChannelUnreadMessageCount(channel)\n  }) : null))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__action\"\n  }, ChannelAction));\n}\n\nChannelPreview.propTypes = {\n  channel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n    isBroadcast: PropTypes.bool,\n    isFrozen: PropTypes.bool\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string\n  }),\n  isActive: PropTypes.bool,\n  ChannelAction: PropTypes.element.isRequired,\n  theme: PropTypes.string,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number\n};\nChannelPreview.defaultProps = {\n  channel: {},\n  currentUser: {},\n  isActive: false,\n  theme: 'light',\n  onClick: function onClick() {},\n  tabIndex: 0\n};\n\nfunction ChannelHeader(_ref) {\n  var user = _ref.user,\n      renderHeader = _ref.renderHeader,\n      iconButton = _ref.iconButton,\n      onEdit = _ref.onEdit,\n      allowProfileEdit = _ref.allowProfileEdit;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-header', allowProfileEdit ? 'sendbird-channel-header--allow-edit' : ''].join(' ')\n  }, renderHeader ? renderHeader() : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title\",\n    role: \"button\",\n    onClick: onEdit,\n    onKeyDown: onEdit,\n    tabIndex: \"0\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    width: \"32px\",\n    height: \"32px\",\n    src: user.profileUrl,\n    alt: user.nickname\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-header__title__right__name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, user.nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-header__title__right__user-id\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, user.userId))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__right-icon\"\n  }, iconButton));\n}\n\nChannelHeader.propTypes = {\n  user: PropTypes.shape({\n    profileUrl: PropTypes.string,\n    nickname: PropTypes.string,\n    userId: PropTypes.string\n  }),\n  renderHeader: PropTypes.func,\n  iconButton: PropTypes.oneOfType([PropTypes.element, PropTypes.instanceOf(IconButton)]),\n  onEdit: PropTypes.func.isRequired,\n  allowProfileEdit: PropTypes.bool\n};\nChannelHeader.defaultProps = {\n  user: {},\n  renderHeader: null,\n  iconButton: null,\n  allowProfileEdit: false\n};\n\nfunction EditUserProfile(_a) {\n  var user = _a.user,\n      _b = _a.theme,\n      theme = _b === void 0 ? 'light' : _b,\n      onCancel = _a.onCancel,\n      _onSubmit = _a.onSubmit,\n      _c = _a.changeTheme,\n      changeTheme = _c === void 0 ? noop$1 : _c,\n      _d = _a.onThemeChange,\n      onThemeChange = _d === void 0 ? null : _d;\n  var hiddenInputRef = useRef(null);\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _e = useState(null),\n      currentImg = _e[0],\n      setCurrentImg = _e[1];\n\n  var _f = useState(null),\n      newFile = _f[0],\n      setNewFile = _f[1];\n\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.EDIT_PROFILE__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    type: Type.PRIMARY,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (user.nickname !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n\n        return;\n      }\n\n      _onSubmit(inputRef.current.value, newFile);\n\n      onCancel();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"sendbird-edit-user-profile\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__img\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__IMAGE_LABEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-edit-user-profile__img__avatar\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    width: \"80px\",\n    height: \"80px\",\n    src: currentImg || user.profileUrl\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-edit-user-profile__img__avatar-button\",\n    notUnderline: true,\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    }\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.EDIT_PROFILE__IMAGE_UPLOAD))), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__name\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__NICKNAME_LABEL), /*#__PURE__*/React__default.createElement(Input, {\n    required: user.nickname !== '',\n    name: \"sendbird-edit-user-profile__name__input\",\n    ref: inputRef,\n    value: user.nickname,\n    placeHolder: stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__userid\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__USERID_LABEL), /*#__PURE__*/React__default.createElement(Input, {\n    disabled: true,\n    name: \"sendbird-edit-user-profile__userid__input\",\n    value: user.userId\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__theme\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__THEME_LABEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-edit-user-profile__theme__theme-icon\"\n  }, theme === 'dark' ? /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      changeTheme('light');\n\n      if (onThemeChange && typeof onThemeChange === 'function') {\n        onThemeChange('light');\n      }\n    },\n    type: IconTypes.TOGGLE_ON,\n    width: 44,\n    height: 24\n  }) : /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      changeTheme('dark');\n\n      if (onThemeChange && typeof onThemeChange === 'function') {\n        onThemeChange('dark');\n      }\n    },\n    type: IconTypes.TOGGLE_OFF,\n    width: 44,\n    height: 24\n  })))));\n}\n\nvar mapStoreToProps = function mapStoreToProps(store) {\n  return {\n    theme: store.config.theme,\n    changeTheme: store.config.setCurrenttheme\n  };\n};\n\nvar ConnectedEditUserProfile = withSendbirdContext(EditUserProfile, mapStoreToProps);\n\nfunction AddChannel(_ref) {\n  var sdk = _ref.sdk,\n      disabled = _ref.disabled,\n      channelListDispatcher = _ref.channelListDispatcher,\n      onBeforeCreateChannel = _ref.onBeforeCreateChannel,\n      userId = _ref.userId,\n      userFilledApplicationUserListQuery = _ref.userFilledApplicationUserListQuery,\n      userListQuery = _ref.userListQuery;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      step = _useState4[0],\n      setStep = _useState4[1];\n\n  var _useState5 = useState('group'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      type = _useState6[0],\n      setType = _useState6[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  if (!sdk || !sdk.createApplicationUserListQuery) {\n    return null;\n  }\n\n  var isBroadcastAvailable = isBroadcastChannelEnabled(sdk);\n  var isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(IconButton, {\n    height: \"32px\",\n    width: \"32px\",\n    onClick: function onClick() {\n      setShowModal(true);\n    },\n    disabled: disabled\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CREATE,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })), showModal && step === 0 && /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.MODAL__CHOOSE_CHANNEL_TYPE__TITLE,\n    hideFooter: true,\n    onCancel: function onCancel() {\n      setShowModal(false);\n    },\n    onSubmit: function onSubmit() {}\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle-wrap\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('group');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('group');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__chat-icon\",\n    type: IconTypes.CHAT,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__GROUP)), isSupergroupAvailable && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('supergroup');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('supergroup');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__supergroup-icon\",\n    type: IconTypes.SUPERGROUP,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP)), isBroadcastAvailable && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('broadcast');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('broadcast');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__broadcast-icon\",\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST)))), showModal && step === 1 && /*#__PURE__*/React__default.createElement(InviteMembers, {\n    swapParams: sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback(),\n    titleText: stringSet.MODAL__CREATE_CHANNEL__TITLE,\n    submitText: stringSet.BUTTON__CREATE,\n    closeModal: function closeModal() {\n      setStep(0);\n      setShowModal(false);\n    },\n    idsToFilter: [userId],\n    userQueryCreator: function userQueryCreator() {\n      return userListQuery && typeof userListQuery === 'function' ? userListQuery() : createDefaultUserListQuery({\n        sdk: sdk,\n        userFilledApplicationUserListQuery: userFilledApplicationUserListQuery\n      });\n    },\n    onSubmit: function onSubmit(selectedUsers) {\n      return createChannel(sdk, selectedUsers, onBeforeCreateChannel, userId, type).then(function (channel) {\n        // maybe - do this in event listener\n        channelListDispatcher({\n          type: CREATE_CHANNEL,\n          payload: channel\n        });\n      });\n    }\n  }));\n}\n\nAddChannel.propTypes = {\n  sdk: PropTypes.shape({\n    getErrorFirstCallback: PropTypes.func,\n    createApplicationUserListQuery: PropTypes.func\n  }).isRequired,\n  disabled: PropTypes.bool,\n  channelListDispatcher: PropTypes.func.isRequired,\n  userFilledApplicationUserListQuery: PropTypes.shape({}),\n  onBeforeCreateChannel: PropTypes.func,\n  userId: PropTypes.string.isRequired,\n  userListQuery: PropTypes.func\n};\nAddChannel.defaultProps = {\n  disabled: false,\n  userFilledApplicationUserListQuery: {},\n  onBeforeCreateChannel: null,\n  userListQuery: null\n};\n\nfunction ChannelPreviewAction(_ref) {\n  var disabled = _ref.disabled,\n      onLeaveChannel = _ref.onLeaveChannel;\n  var parentRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    style: {\n      display: 'inline-block'\n    },\n    onKeyDown: function onKeyDown(e) {\n      e.stopPropagation();\n    },\n    tabIndex: 0,\n    onClick: function onClick(e) {\n      e.stopPropagation();\n    }\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(IconButton, {\n        ref: parentRef,\n        onClick: toggleDropdown,\n        height: \"32px\",\n        width: \"32px\"\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.PRIMARY,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: parentRef,\n        parentContainRef: parentRef,\n        closeDropdown: closeDropdown\n      }, /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          setShowModal(true);\n          closeDropdown();\n        }\n      }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE));\n    }\n  }), showModal && /*#__PURE__*/React__default.createElement(LeaveChannel, {\n    onCloseModal: function onCloseModal() {\n      return setShowModal(false);\n    },\n    onLeaveChannel: onLeaveChannel\n  }));\n}\n\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired\n};\nChannelPreviewAction.defaultProps = {\n  disabled: false\n};\n\nfunction ChannelsPlaceholder(_ref) {\n  var type = _ref.type;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: type\n  }));\n}\n\nChannelsPlaceholder.propTypes = {\n  type: PropTypes.string.isRequired\n};\n\nvar createEventHandler = function createEventHandler(_ref) {\n  var sdk = _ref.sdk,\n      sdkChannelHandlerId = _ref.sdkChannelHandlerId,\n      channelListDispatcher = _ref.channelListDispatcher,\n      logger = _ref.logger;\n  var ChannelHandler = new sdk.ChannelHandler();\n\n  ChannelHandler.onChannelChanged = function (channel) {\n    logger.info('ChannelList: onChannelChanged', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_CHANGED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelDeleted = function (channelUrl) {\n    logger.info('ChannelList: onChannelDeleted', channelUrl);\n    channelListDispatcher({\n      type: ON_CHANNEL_DELETED,\n      payload: channelUrl\n    });\n  };\n\n  ChannelHandler.onUserJoined = function (channel) {\n    logger.info('ChannelList: onUserJoined', channel);\n\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: ON_USER_JOINED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onUserBanned = function (channel, user) {\n    var currentUser = sdk.currentUser;\n    logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n\n    if (user.userId === currentUser.userId) {\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: true\n        }\n      });\n    } else {\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: false\n        }\n      });\n    }\n  };\n\n  ChannelHandler.onUserLeft = function (channel, leftUser) {\n    var currentUser = sdk.currentUser;\n    var isMe = currentUser.userId === leftUser.userId;\n    logger.info('ChannelList: onUserLeft', channel);\n    channelListDispatcher({\n      type: ON_USER_LEFT,\n      payload: {\n        channel: channel,\n        isMe: isMe\n      }\n    });\n  };\n\n  ChannelHandler.onReadStatus = function (channel) {\n    logger.info('ChannelList: onReadStatus', channel);\n    channelListDispatcher({\n      type: ON_READ_RECEIPT_UPDATED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onDeliveryReceiptUpdated = function (channel) {\n    logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: ON_DELIVERY_RECEIPT_UPDATED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onMessageUpdated = function (channel, message) {\n    if (channel.lastMessage.isEqual(message)) {\n      logger.info('ChannelList: onMessageUpdated', channel);\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onChannelHidden = function (channel) {\n    logger.info('ChannelList: onChannelHidden', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_ARCHIVED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelFrozen = function (channel) {\n    logger.info('ChannelList: onChannelFrozen', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_FROZEN,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelUnfrozen = function (channel) {\n    logger.info('ChannelList: onChannelUnfrozen', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_UNFROZEN,\n      payload: channel\n    });\n  };\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.addChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nvar createChannelListQuery = function createChannelListQuery(_ref2) {\n  var sdk = _ref2.sdk,\n      _ref2$userFilledChann = _ref2.userFilledChannelListQuery,\n      userFilledChannelListQuery = _ref2$userFilledChann === void 0 ? {} : _ref2$userFilledChann;\n  var channelListQuery = sdk.GroupChannel.createMyGroupChannelListQuery();\n  channelListQuery.includeEmpty = false;\n  channelListQuery.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  channelListQuery.limit = 20; // The value of pagination limit could be set up to 100.\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach(function (key) {\n      channelListQuery[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  return channelListQuery;\n};\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\n\n\nfunction setupChannelList(_ref3) {\n  var sdk = _ref3.sdk,\n      sdkChannelHandlerId = _ref3.sdkChannelHandlerId,\n      channelListDispatcher = _ref3.channelListDispatcher,\n      setChannelSource = _ref3.setChannelSource,\n      onChannelSelect = _ref3.onChannelSelect,\n      userFilledChannelListQuery = _ref3.userFilledChannelListQuery,\n      logger = _ref3.logger,\n      sortChannelList = _ref3.sortChannelList,\n      disableAutoSelect = _ref3.disableAutoSelect;\n\n  if (sdk && sdk.ChannelHandler) {\n    createEventHandler({\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      sdkChannelHandlerId: sdkChannelHandlerId,\n      logger: logger\n    });\n  } else {\n    logger.console.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', {\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  var channelListQuery = createChannelListQuery({\n    sdk: sdk,\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n  channelListDispatcher({\n    type: INIT_CHANNELS_START\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery: channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId\n      }\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n\n  if (channelListQuery.hasNext) {\n    channelListQuery.next(function (response, error) {\n      var swapParams = sdk.getErrorFirstCallback();\n      var channelList = response;\n      var err = error;\n\n      if (swapParams) {\n        channelList = error;\n        err = response;\n      }\n\n      logger.info('ChannelList - fetched channels', channelList);\n\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: INIT_CHANNELS_FAILURE\n        });\n        return;\n      } // select first channel\n\n\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      var sorted = channelList;\n\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sorted = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sorted);\n      }\n\n      if (!disableAutoSelect) {\n        onChannelSelect(sorted[0]);\n      }\n\n      channelListDispatcher({\n        type: INIT_CHANNELS_SUCCESS,\n        payload: sorted\n      });\n\n      if (channelList && typeof channelList.forEach === 'function') {\n        logger.info('ChannelList - mark all channels as delivered');\n        channelList.forEach(function (c) {\n          return c.markAsDelivered();\n        });\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\n\nvar pubSubHandleRemover = function pubSubHandleRemover(subscriber) {\n  subscriber.forEach(function (s) {\n    try {\n      s.remove();\n    } catch (_unused) {//\n    }\n  });\n};\n\nvar pubSubHandler = function pubSubHandler(pubSub, channelListDispatcher) {\n  var subScriber = new Map();\n  if (!pubSub) return subScriber;\n  subScriber.set(CREATE_CHANNEL$1, pubSub.subscribe(CREATE_CHANNEL$1, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel\n    });\n  }));\n  subScriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n    var _updatedChannel$lastM;\n\n    var channel = msg.channel,\n        message = msg.message;\n    var updatedChannel = channel;\n\n    if ((updatedChannel === null || updatedChannel === void 0 ? void 0 : (_updatedChannel$lastM = updatedChannel.lastMessage) === null || _updatedChannel$lastM === void 0 ? void 0 : _updatedChannel$lastM.messageId) === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n\n    if (channel) {\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel\n      });\n    }\n  }));\n  subScriber.set(LEAVE_CHANNEL, pubSub.subscribe(LEAVE_CHANNEL, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: LEAVE_CHANNEL_SUCCESS,\n      payload: channel.url\n    });\n  }));\n  subScriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: CHANNEL_REPLACED_TO_TOP,\n      payload: channel\n    });\n  }));\n  return subScriber;\n};\n\nvar noop = function noop() {};\n\nfunction ChannelList(props) {\n  var _props$stores = props.stores,\n      _props$stores$sdkStor = _props$stores.sdkStore,\n      sdkStore = _props$stores$sdkStor === void 0 ? {} : _props$stores$sdkStor,\n      _props$stores$userSto = _props$stores.userStore,\n      userStore = _props$stores$userSto === void 0 ? {} : _props$stores$userSto,\n      _props$config = props.config,\n      userId = _props$config.userId,\n      isOnline = _props$config.isOnline,\n      userListQuery = _props$config.userListQuery,\n      logger = _props$config.logger,\n      pubSub = _props$config.pubSub,\n      theme = _props$config.theme,\n      userDispatcher = props.dispatchers.userDispatcher,\n      _props$queries = props.queries,\n      queries = _props$queries === void 0 ? {} : _props$queries,\n      renderChannelPreview = props.renderChannelPreview,\n      renderHeader = props.renderHeader,\n      renderUserProfile = props.renderUserProfile,\n      disableUserProfile = props.disableUserProfile,\n      allowProfileEdit = props.allowProfileEdit,\n      sortChannelList = props.sortChannelList,\n      onProfileEditSuccess = props.onProfileEditSuccess,\n      onThemeChange = props.onThemeChange,\n      onBeforeCreateChannel = props.onBeforeCreateChannel,\n      onChannelSelect = props.onChannelSelect,\n      disableAutoSelect = props.disableAutoSelect;\n  var _props$config2 = props.config,\n      config = _props$config2 === void 0 ? {} : _props$config2; // enable if it is true atleast once(both are flase by default)\n\n  var enableEditProfile = allowProfileEdit || config.allowProfileEdit;\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  var _sdkStore$sdk = sdkStore.sdk,\n      sdk = _sdkStore$sdk === void 0 ? {} : _sdkStore$sdk;\n  var userFilledChannelListQuery = queries.channelListQuery;\n  var userFilledApplicationUserListQuery = queries.applicationUserListQuery;\n  var sdkError = sdkStore.error;\n  var sdkIntialized = sdkStore.initialized;\n\n  var _useReducer = useReducer(reducer, channelListInitialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      channelListStore = _useReducer2[0],\n      channelListDispatcher = _useReducer2[1];\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      channelSource = _useState4[0],\n      setChannelSource = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showProfileEdit = _useState6[0],\n      setShowProfileEdit = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sdkChannelHandlerId = _useState8[0],\n      setSdkChannelHandlerId = _useState8[1];\n\n  var loading = channelListStore.loading,\n      currentChannel = channelListStore.currentChannel;\n  useEffect(function () {\n    setUser(userStore.user);\n  }, [userStore.user]);\n  useEffect(function () {\n    var subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return function () {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n  useEffect(function () {\n    setSdkChannelHandlerId(uuidv4);\n\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk: sdk,\n        sdkChannelHandlerId: sdkChannelHandlerId,\n        channelListDispatcher: channelListDispatcher,\n        setChannelSource: setChannelSource,\n        onChannelSelect: onChannelSelect,\n        userFilledChannelListQuery: userFilledChannelListQuery,\n        logger: logger,\n        sortChannelList: sortChannelList,\n        disableAutoSelect: disableAutoSelect\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers'); // remove previous channelHandlers\n\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      } // remove channelSource\n\n\n      setChannelSource({}); // cleanup\n\n      channelListDispatcher({\n        type: RESET_CHANNEL_LIST\n      });\n    }\n\n    return function () {\n      logger.info('ChannelList: Removing channelHandlers');\n\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n  var allChannels = channelListStore.allChannels;\n  var sortedChannels = sortChannelList && typeof sortChannelList === 'function' ? sortChannelList(allChannels) : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    var warning = \"ChannelList: You have removed/added extra channels on sortChannelList\\n      this could cause unexpected problems\"; // eslint-disable-next-line no-console\n\n    console.warn(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n    logger.warning(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n  }\n\n  useEffect(function () {\n    channelListDispatcher({\n      type: SET_AUTO_SELECT_CHANNEL_ITEM,\n      payload: disableAutoSelect\n    });\n  }, [disableAutoSelect]);\n  useEffect(function () {\n    if (!sdk || !sdk.GroupChannel || !currentChannel) {\n      return;\n    }\n\n    sdk.GroupChannel.getChannel(currentChannel, function (groupChannel) {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel]);\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-channel-list\",\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__header\"\n  }, /*#__PURE__*/React__default.createElement(ChannelHeader, {\n    renderHeader: renderHeader,\n    user: user,\n    onEdit: function onEdit() {\n      if (enableEditProfile) {\n        setShowProfileEdit(true);\n      }\n    },\n    allowProfileEdit: enableEditProfile,\n    iconButton: /*#__PURE__*/React__default.createElement(AddChannel, {\n      disabled: !isOnline,\n      userListQuery: userListQuery,\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      userId: userId,\n      userFilledApplicationUserListQuery: userFilledApplicationUserListQuery,\n      onBeforeCreateChannel: onBeforeCreateChannel\n    })\n  })), showProfileEdit && /*#__PURE__*/React__default.createElement(ConnectedEditUserProfile, {\n    onThemeChange: onThemeChange,\n    user: user,\n    onCancel: function onCancel() {\n      setShowProfileEdit(false);\n    },\n    onSubmit: function onSubmit(newName, newFile) {\n      sdk.updateCurrentUserInfoWithProfileImage(newName, newFile, function (updatedUser) {\n        userDispatcher({\n          type: UPDATE_USER_INFO,\n          payload: updatedUser\n        });\n\n        if (onProfileEditSuccess && typeof onProfileEditSuccess === 'function') {\n          onProfileEditSuccess(updatedUser);\n        }\n      });\n    }\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__body\",\n    onScroll: function onScroll(e) {\n      var fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n\n      if (fetchMore && channelSource.hasNext) {\n        logger.info('ChannelList: Fetching more channels');\n        channelListDispatcher({\n          type: FETCH_CHANNELS_START\n        });\n        channelSource.next(function (response, error) {\n          var swapParams = sdk.getErrorFirstCallback();\n          var channelList = response;\n          var err = error;\n\n          if (swapParams) {\n            channelList = error;\n            err = response;\n          }\n\n          if (err) {\n            logger.info('ChannelList: Fetching channels failed', err);\n            channelListDispatcher({\n              type: FETCH_CHANNELS_FAILURE,\n              payload: channelList\n            });\n            return;\n          }\n\n          logger.info('ChannelList: Fetching channels successful', channelList);\n          channelListDispatcher({\n            type: FETCH_CHANNELS_SUCCESS,\n            payload: channelList\n          });\n\n          if (channelList && typeof channelList.forEach === 'function') {\n            logger.info('ChannelList: Marking all channels as read');\n            channelList.forEach(function (c) {\n              return c.markAsDelivered();\n            });\n          }\n        });\n      }\n    }\n  }, sdkError && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.WRONG\n  }), /*#__PURE__*/React__default.createElement(\"div\", null, sortedChannels && sortedChannels.map(function (channel, idx) {\n    var _onLeaveChannel = function onLeaveChannel(c, cb) {\n      logger.info('ChannelList: Leaving channel', c);\n      c.leave().then(function (res) {\n        logger.info('ChannelList: Leaving channel success', res);\n\n        if (cb && typeof cb === 'function') {\n          cb(res, null);\n        }\n\n        channelListDispatcher({\n          type: LEAVE_CHANNEL_SUCCESS,\n          payload: channel.url\n        });\n      }).catch(function (err) {\n        logger.error('ChannelList: Leaving channel failed', err);\n\n        if (cb && typeof cb === 'function') {\n          cb(null, err);\n        }\n      });\n    };\n\n    var onClick = function onClick() {\n      if (!isOnline) {\n        return;\n      }\n\n      logger.info('ChannelList: Clicked on channel:', channel);\n      channelListDispatcher({\n        type: SET_CURRENT_CHANNEL,\n        payload: channel.url\n      });\n    };\n\n    return renderChannelPreview ?\n    /*#__PURE__*/\n    // eslint-disable-next-line\n    React__default.createElement(\"div\", {\n      key: channel.url,\n      onClick: onClick\n    }, renderChannelPreview({\n      channel: channel,\n      onLeaveChannel: _onLeaveChannel\n    })) : /*#__PURE__*/React__default.createElement(ChannelPreview, {\n      key: channel.url,\n      tabIndex: idx,\n      onClick: onClick,\n      channel: channel,\n      currentUser: user,\n      theme: theme,\n      isActive: channel.url === currentChannel // todo - potential performance hit refactor\n      ,\n      ChannelAction: /*#__PURE__*/React__default.createElement(ChannelPreviewAction, {\n        disabled: !isOnline,\n        onLeaveChannel: function onLeaveChannel() {\n          return _onLeaveChannel(channel);\n        }\n      })\n    });\n  })), (!sdkIntialized || loading) && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.LOADING\n  }), //  placeholder\n  (!allChannels || allChannels.length === 0) && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.NO_CHANNELS\n  })));\n}\n\nChannelList.propTypes = {\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({})\n    })\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    userDispatcher: PropTypes.func\n  }).isRequired,\n  config: PropTypes.shape({\n    userId: PropTypes.string.isRequired,\n    userListQuery: PropTypes.func,\n    theme: PropTypes.string,\n    isOnline: PropTypes.bool,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func\n    })\n  }).isRequired,\n  queries: PropTypes.shape({\n    channelListQuery: PropTypes.shape({\n      channelNameContainsFilter: PropTypes.string,\n      channelUrlsFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypesFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypeStartsWithFilter: PropTypes.string,\n      hiddenChannelFilter: PropTypes.string,\n      includeEmpty: PropTypes.bool,\n      limit: PropTypes.number,\n      memberStateFilter: PropTypes.string,\n      metadataOrderKeyFilter: PropTypes.string,\n      nicknameContainsFilter: PropTypes.string,\n      order: PropTypes.string,\n      publicChannelFilter: PropTypes.string,\n      superChannelFilter: PropTypes.string,\n      unreadChannelFilter: PropTypes.string,\n      userIdsExactFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilterQueryType: PropTypes.string\n    }),\n    applicationUserListQuery: PropTypes.shape({\n      limit: PropTypes.number,\n      userIdsFilter: PropTypes.arrayOf(PropTypes.string),\n      metaDataKeyFilter: PropTypes.string,\n      metaDataValuesFilter: PropTypes.arrayOf(PropTypes.string)\n    })\n  }),\n  onBeforeCreateChannel: PropTypes.func,\n  renderChannelPreview: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  allowProfileEdit: PropTypes.bool,\n  sortChannelList: PropTypes.func,\n  onThemeChange: PropTypes.func,\n  onProfileEditSuccess: PropTypes.func,\n  renderHeader: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  onChannelSelect: PropTypes.func,\n  disableAutoSelect: PropTypes.bool\n};\nChannelList.defaultProps = {\n  onBeforeCreateChannel: null,\n  renderChannelPreview: null,\n  renderHeader: null,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  allowProfileEdit: false,\n  onThemeChange: null,\n  sortChannelList: null,\n  onProfileEditSuccess: null,\n  queries: {},\n  onChannelSelect: noop,\n  disableAutoSelect: false\n};\nvar ChannelList$1 = withSendbirdContext(ChannelList);\nexport { ChannelList$1 as default };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\dux\\actionTypes.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\dux\\initialState.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\dux\\reducers.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\ChannelPreview\\utils.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\ChannelPreview\\index.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\ChannelHeader\\index.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\EditUserProfile\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\components\\AddChannel.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\components\\ChannelPreviewAction.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\components\\Placeholder.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\utils.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\index.jsx"],"names":["RESET_CHANNEL_LIST","CREATE_CHANNEL","SET_AUTO_SELECT_CHANNEL_ITEM","LEAVE_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL","SHOW_CHANNEL_SETTINGS","HIDE_CHANNEL_SETTINGS","FETCH_CHANNELS_START","FETCH_CHANNELS_SUCCESS","FETCH_CHANNELS_FAILURE","INIT_CHANNELS_START","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_FAILURE","ON_USER_JOINED","ON_CHANNEL_DELETED","ON_LAST_MESSAGE_UPDATED","ON_USER_LEFT","ON_CHANNEL_CHANGED","ON_CHANNEL_ARCHIVED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_READ_RECEIPT_UPDATED","ON_DELIVERY_RECEIPT_UPDATED","CHANNEL_REPLACED_TO_TOP","CHANNEL_LIST_PARAMS_UPDATED","initialized","loading","allChannels","currentChannel","showSettings","channelListQuery","currentUserId","disableAutoSelect","action","nextChannel","state","currentChannels","c","filteredChannels","url","channel","filterChannelListParams","getChannelsWithUpsertedChannel","ch","channelUrl","isMe","unreadMessageCount","currentUnreadCount","payload","getChannelTitle","stringSet","LabelStringSet","userId","nickname","getLastMessageCreatedAt","createdAt","optionalParam","locale","isToday","format","isYesterday","formatRelative","getTotalMembers","getPrettyLastMessage","message","MAXLEN","messageType","name","truncateString","getLastMessage","getChannelUnreadMessageCount","currentUser","isActive","ChannelAction","theme","onClick","tabIndex","isBroadcast","isFrozen","dateLocale","useContext","IconTypes","IconColors","LabelTypography","LabelColors","ONBACKGROUND_1","utils","ONBACKGROUND_2","ONBACKGROUND_3","ChannelPreview","members","PropTypes","coverUrl","bool","string","number","user","renderHeader","iconButton","onEdit","allowProfileEdit","ChannelHeader","profileUrl","EditUserProfile","_a","_b","onCancel","onSubmit","_c","noop","_d","hiddenInputRef","useRef","inputRef","formRef","currentImg","setCurrentImg","useState","newFile","setNewFile","ButtonType","e","React","display","URL","PRIMARY","EDIT_PROFILE__NICKNAME_PLACEHOLDER","changeTheme","onThemeChange","mapStoreToProps","store","setCurrenttheme","ConnectedEditUserProfile","withSendbirdContext","sdk","disabled","channelListDispatcher","onBeforeCreateChannel","userFilledApplicationUserListQuery","userListQuery","showModal","setShowModal","step","setStep","type","setType","isBroadcastAvailable","isBroadcastChannelEnabled","isSupergroupAvailable","isSuperGroupChannelEnabled","createDefaultUserListQuery","AddChannel","getErrorFirstCallback","createApplicationUserListQuery","func","onLeaveChannel","parentRef","closeDropdown","ChannelPreviewAction","isRequired","ChannelsPlaceholder","createEventHandler","sdkChannelHandlerId","logger","ChannelHandler","leftUser","createChannelListQuery","userFilledChannelListQuery","Object","setChannelSource","onChannelSelect","sortChannelList","channelActions","swapParams","channelList","err","sorted","pubSubHandleRemover","subscriber","s","pubSubHandler","subScriber","msg","updatedChannel","sdkStore","userStore","isOnline","pubSub","userDispatcher","queries","renderChannelPreview","renderUserProfile","disableUserProfile","onProfileEditSuccess","props","config","enableEditProfile","userDefinedDisableUserProfile","userDefinedRenderProfile","sdkError","sdkIntialized","channelListStore","useReducer","setUser","channelSource","showProfileEdit","setShowProfileEdit","setSdkChannelHandlerId","useEffect","setupChannelList","channelListActions","sortedChannels","warning","console","before","after","updatedUser","fetchMore","PlaceholderTypes","WRONG","cb","LOADING","NO_CHANNELS","ChannelList","stores","dispatchers","info","error","subscribe","publish","channelNameContainsFilter","channelUrlsFilter","customTypesFilter","customTypeStartsWithFilter","hiddenChannelFilter","includeEmpty","limit","memberStateFilter","metadataOrderKeyFilter","nicknameContainsFilter","order","publicChannelFilter","superChannelFilter","unreadChannelFilter","userIdsExactFilter","userIdsIncludeFilter","userIdsIncludeFilterQueryType","applicationUserListQuery","userIdsFilter","metaDataKeyFilter","metaDataValuesFilter"],"mappings":"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","sourcesContent":["export const RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nexport const CREATE_CHANNEL = 'CREATE_CHANNEL';\nexport const UNLOAD_CHANNELS = 'UNLOAD_CHANNELS';\nexport const SET_CHANNEL_LOADING = 'SET_CHANNEL_LOADING';\nexport const SET_AUTO_SELECT_CHANNEL_ITEM = 'SET_AUTO_SELECT_CHANNEL_ITEM';\nexport const LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nexport const HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\n\nexport const FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nexport const FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nexport const FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\n\nexport const INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nexport const INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nexport const INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\n\nexport const INVITE_MEMBERS_SUCESS = 'INVITE_MEMBERS_SUCESS';\n\nexport const ON_USER_JOINED = 'ON_USER_JOINED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nexport const ON_USER_LEFT = 'ON_USER_LEFT';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\n\nexport const ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nexport const ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\n\nexport const CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nexport const CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\n","export default {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false,\n};\n","import { filterChannelListParams, getChannelsWithUpsertedChannel } from '../../../utils';\nimport * as actions from './actionTypes';\nimport initialState from './initialState';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actions.INIT_CHANNELS_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.RESET_CHANNEL_LIST:\n      return initialState;\n    case actions.INIT_CHANNELS_SUCCESS: {\n      const nextChannel = (action.payload && action.payload.length && action.payload.length > 0)\n        ? action.payload[0].url\n        : null;\n      return {\n        ...state,\n        initialized: true,\n        loading: false,\n        allChannels: action.payload,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n      };\n    }\n    case actions.FETCH_CHANNELS_SUCCESS: {\n      const currentChannels = state.allChannels.map((c) => c.url);\n      const filteredChannels = action.payload.filter(\n        ({ url }) => !(currentChannels.find((c) => c === url)),\n      );\n      return {\n        ...state,\n        allChannels: [\n          ...state.allChannels,\n          ...filteredChannels,\n        ],\n      };\n    }\n    case actions.CREATE_CHANNEL: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel.url,\n        };\n      }\n      return {\n        ...state,\n        currentChannel: channel.url,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel.url)],\n      };\n    }\n    case actions.ON_CHANNEL_ARCHIVED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n      }\n      const nextChannel = (channel.url === state.currentChannel)\n        ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n      };\n    }\n    case actions.LEAVE_CHANNEL_SUCCESS:\n    case actions.ON_CHANNEL_DELETED: {\n      const channelUrl = action.payload;\n      const nextChannel = (channelUrl === state.currentChannel)\n        ? state.allChannels[0].url\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channelUrl),\n      };\n    }\n    case actions.ON_USER_LEFT: {\n      const { channel, isMe } = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          const filteredChannels = getChannelsWithUpsertedChannel(state.allChannels, channel);\n          const nextChannel = (isMe && (channel.url === state.currentChannel))\n            ? filteredChannels[0].url\n            : state.currentChannel;\n          return {\n            ...state,\n            currentChannel: state.disableAutoSelect ? null : nextChannel,\n            allChannels: filteredChannels,\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[0].url\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      const filteredChannels = state.allChannels.filter((c) => !(c.url === channel.url && isMe));\n      const nextChannel = (isMe && (channel.url === state.currentChannel))\n        ? filteredChannels[0].url\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: filteredChannels,\n      };\n    }\n    case actions.ON_USER_JOINED:\n    case actions.ON_CHANNEL_CHANGED:\n    case actions.ON_READ_RECEIPT_UPDATED:\n    case actions.ON_DELIVERY_RECEIPT_UPDATED: {\n      const { allChannels = [] } = state;\n      const channel = action.payload;\n      const { unreadMessageCount } = channel;\n      if (!channel.lastMessage) return state;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      // if its only an unread message count change, dont push to top\n      if (unreadMessageCount === 0) {\n        const currentChannel = allChannels.find(({ url }) => url === channel.url);\n        const currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n        if (currentUnreadCount === 0) {\n          return {\n            ...state,\n            allChannels: state.allChannels.map((ch) => (ch.url === channel.url ? channel : ch)),\n          };\n        }\n      }\n      return {\n        ...state,\n        allChannels: [\n          channel,\n          ...state.allChannels.filter(({ url }) => url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    case actions.SHOW_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: true,\n      };\n    case actions.HIDE_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: false,\n      };\n    case actions.ON_LAST_MESSAGE_UPDATED:\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel.url === action.payload.url ? action.payload : channel)),\n      };\n    case actions.ON_CHANNEL_FROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = true;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.ON_CHANNEL_UNFROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = false;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.CHANNEL_REPLACED_TO_TOP: {\n      return {\n        ...state,\n        allChannels: [\n          action.payload,\n          ...state.allChannels.filter((channel) => channel.url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.CHANNEL_LIST_PARAMS_UPDATED:\n      return {\n        ...state,\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery,\n      };\n    case actions.SET_AUTO_SELECT_CHANNEL_ITEM:\n      return {\n        ...state,\n        disableAutoSelect: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import isToday from 'date-fns/isToday';\n\nimport format from 'date-fns/format';\nimport formatRelative from 'date-fns/formatRelative';\nimport isYesterday from 'date-fns/isYesterday';\n\nimport { truncateString } from '../../utils';\nimport { LabelStringSet } from '../Label';\n\nexport const getChannelTitle = (channel = {}, currentUserId, stringSet = LabelStringSet) => {\n  if (!channel || (!channel.name && !channel.members)) {\n    return stringSet.NO_TITLE;\n  }\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members\n    .filter(({ userId }) => userId !== currentUserId)\n    .map(({ nickname }) => (nickname || stringSet.NO_NAME))\n    .join(', ');\n};\n\nexport const getLastMessageCreatedAt = (channel, locale) => {\n  const createdAt = channel?.lastMessage?.createdAt;\n  const optionalParam = locale ? { locale } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n  return format(createdAt, 'MMM dd', optionalParam);\n};\n\nexport const getTotalMembers = (channel) => (\n  channel && channel.memberCount\n    ? channel.memberCount\n    : 0\n);\n\nconst getPrettyLastMessage = (message = {}) => {\n  const MAXLEN = 30;\n  const { messageType, name } = message;\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n  return message.message;\n};\n\nexport const getLastMessage = (channel) => (\n  channel && channel.lastMessage\n    ? getPrettyLastMessage(channel.lastMessage)\n    : ''\n);\n\nexport const getChannelUnreadMessageCount = (channel) => (\n  (channel && channel.unreadMessageCount)\n    ? channel.unreadMessageCount\n    : 0\n);\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nimport ChannelAvatar from '../ChannelAvatar/index';\nimport Badge from '../Badge';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport * as utils from './utils';\n\nexport default function ChannelPreview({\n  channel,\n  currentUser,\n  isActive,\n  ChannelAction,\n  theme,\n  onClick,\n  tabIndex,\n}) {\n  const {\n    userId,\n  } = currentUser;\n  const { isBroadcast, isFrozen } = channel;\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  return (\n    <div\n      className={[\n        'sendbird-channel-preview',\n        isActive ? 'sendbird-channel-preview--active' : '',\n      ].join(' ')}\n      role=\"link\"\n      onClick={onClick}\n      onKeyPress={onClick}\n      tabIndex={tabIndex}\n    >\n      <div\n        className=\"sendbird-channel-preview__avatar\"\n      >\n        <ChannelAvatar\n          channel={channel}\n          userId={userId}\n          theme={theme}\n        />\n      </div>\n      <div className=\"sendbird-channel-preview__content\">\n        <div className=\"sendbird-channel-preview__content__upper\">\n          <div className=\"sendbird-channel-preview__content__upper__header\">\n            {\n              isBroadcast\n              && (\n                <div className=\"sendbird-channel-preview__content__upper__header__broadcast-icon\">\n                  <Icon\n                    type={IconTypes.BROADCAST}\n                    fillColor={IconColors.SECONDARY}\n                    height=\"16px\"\n                    width=\"16px\"\n                  />\n                </div>\n              )\n            }\n            <Label\n              className=\"sendbird-channel-preview__content__upper__header__channel-name\"\n              type={LabelTypography.SUBTITLE_2}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {utils.getChannelTitle(channel, userId, stringSet)}\n            </Label>\n            <Label\n              className=\"sendbird-channel-preview__content__upper__header__total-members\"\n              type={LabelTypography.CAPTION_2}\n              color={LabelColors.ONBACKGROUND_2}\n            >\n              {utils.getTotalMembers(channel)}\n            </Label>\n            {\n              isFrozen\n              && (\n                <div title=\"Frozen\" className=\"sendbird-channel-preview__content__upper__header__frozen-icon\">\n                  <Icon\n                    type={IconTypes.FREEZE}\n                    fillColor={IconColors.PRIMARY}\n                    height={12}\n                    width={12}\n                  />\n                </div>\n              )\n            }\n          </div>\n          <Label\n            className=\"sendbird-channel-preview__content__upper__last-message-at\"\n            type={LabelTypography.CAPTION_3}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {utils.getLastMessageCreatedAt(channel, dateLocale)}\n          </Label>\n        </div>\n        <div className=\"sendbird-channel-preview__content__lower\">\n          <Label\n            className=\"sendbird-channel-preview__content__lower__last-message\"\n            type={LabelTypography.BODY_2}\n            color={LabelColors.ONBACKGROUND_3}\n          >\n            {utils.getLastMessage(channel)}\n          </Label>\n          <div className=\"sendbird-channel-preview__content__lower__unread-message-count\">\n            {\n              utils.getChannelUnreadMessageCount(channel) // return number\n                ? <Badge count={utils.getChannelUnreadMessageCount(channel)} />\n                : null\n            }\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"sendbird-channel-preview__action\"\n      >\n        {ChannelAction}\n      </div>\n    </div>\n  );\n}\n\nChannelPreview.propTypes = {\n  channel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n    isBroadcast: PropTypes.bool,\n    isFrozen: PropTypes.bool,\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string,\n  }),\n  isActive: PropTypes.bool,\n  ChannelAction: PropTypes.element.isRequired,\n  theme: PropTypes.string,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number,\n};\n\nChannelPreview.defaultProps = {\n  channel: {},\n  currentUser: {},\n  isActive: false,\n  theme: 'light',\n  onClick: () => { },\n  tabIndex: 0,\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport IconButton from '../IconButton';\n\nimport './index.scss';\nimport Avatar from '../Avatar/index';\n\nexport default function ChannelHeader({\n  user,\n  renderHeader,\n  iconButton,\n  onEdit,\n  allowProfileEdit,\n}) {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div\n      className={[\n        'sendbird-channel-header',\n        allowProfileEdit ? 'sendbird-channel-header--allow-edit' : '',\n      ].join(' ')}\n    >\n      {\n        renderHeader\n          ? renderHeader()\n          : (\n            <div\n              className=\"sendbird-channel-header__title\"\n              role=\"button\"\n              onClick={onEdit}\n              onKeyDown={onEdit}\n              tabIndex=\"0\"\n            >\n              <div className=\"sendbird-channel-header__title__left\">\n                <Avatar\n                  width=\"32px\"\n                  height=\"32px\"\n                  src={user.profileUrl}\n                  alt={user.nickname}\n                />\n              </div>\n              <div className=\"sendbird-channel-header__title__right\">\n                <Label\n                  className=\"sendbird-channel-header__title__right__name\"\n                  type={LabelTypography.SUBTITLE_2}\n                  color={LabelColors.ONBACKGROUND_1}\n                >\n                  {user.nickname || stringSet.NO_NAME}\n                </Label>\n                <Label\n                  className=\"sendbird-channel-header__title__right__user-id\"\n                  type={LabelTypography.BODY_2}\n                  color={LabelColors.ONBACKGROUND_2}\n                >\n                  {user.userId}\n                </Label>\n              </div>\n            </div>\n          )\n      }\n      <div className=\"sendbird-channel-header__right-icon\">\n        {iconButton}\n      </div>\n    </div>\n  );\n}\n\nChannelHeader.propTypes = {\n  user: PropTypes.shape({\n    profileUrl: PropTypes.string,\n    nickname: PropTypes.string,\n    userId: PropTypes.string,\n  }),\n  renderHeader: PropTypes.func,\n  iconButton: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.instanceOf(IconButton),\n  ]),\n  onEdit: PropTypes.func.isRequired,\n  allowProfileEdit: PropTypes.bool,\n};\n\nChannelHeader.defaultProps = {\n  user: {},\n  renderHeader: null,\n  iconButton: null,\n  allowProfileEdit: false,\n};\n","import React, {\n  ReactElement,\n  useRef,\n  useState,\n  useContext,\n} from 'react';\nimport './index.scss';\n\nimport Modal from '../Modal';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport Input, { InputLabel } from '../Input';\nimport Avatar from '../Avatar';\nimport Icon, { IconTypes } from '../Icon';\nimport { Type as ButtonType } from '../Button/type';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport TextButton from '../TextButton';\nimport { SendbirdTypes } from '../../types';\nimport { noop } from '../../utils/utils';\n\ninterface Props {\n  user: SendbirdTypes['User'];\n  theme?: string;\n  onCancel(): void;\n  onSubmit(newFile: File, newNickname: string): void;\n  changeTheme?(theme: string): void;\n  onThemeChange?(theme: string): void;\n}\n\nexport function EditUserProfile({\n  user,\n  theme = 'light',\n  onCancel,\n  onSubmit,\n  changeTheme = noop,\n  onThemeChange = null,\n}: Props): ReactElement {\n  const hiddenInputRef = useRef(null);\n  const inputRef = useRef(null);\n  const formRef = useRef(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const [currentImg, setCurrentImg] = useState(null);\n  const [newFile, setNewFile] = useState(null);\n\n  return (\n    <Modal\n      titleText={stringSet.EDIT_PROFILE__TITLE}\n      submitText={stringSet.BUTTON__SAVE}\n      type={ButtonType.PRIMARY}\n      onCancel={onCancel}\n      onSubmit={() => {\n        if (user.nickname !== '' && !inputRef.current.value) {\n          if (formRef.current.reportValidity) { // might not work in explorer\n            formRef.current.reportValidity();\n          }\n          return;\n        }\n        onSubmit(inputRef.current.value, newFile);\n        onCancel();\n      }}\n    >\n      <form\n        className=\"sendbird-edit-user-profile\"\n        ref={formRef}\n        onSubmit={(e) => { e.preventDefault(); }}\n      >\n        <section className=\"sendbird-edit-user-profile__img\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__IMAGE_LABEL}\n          </InputLabel>\n          <div className=\"sendbird-edit-user-profile__img__avatar\">\n            <Avatar\n              width=\"80px\"\n              height=\"80px\"\n              src={currentImg || user.profileUrl}\n            />\n          </div>\n          <input\n            ref={hiddenInputRef}\n            type=\"file\"\n            accept=\"image/gif, image/jpeg, image/png\"\n            style={{ display: 'none' }}\n            onChange={(e) => {\n              setCurrentImg(URL.createObjectURL(e.target.files[0]));\n              setNewFile(e.target.files[0]);\n              hiddenInputRef.current.value = '';\n            }}\n          />\n          <TextButton\n            className=\"sendbird-edit-user-profile__img__avatar-button\"\n            notUnderline\n            onClick={() => hiddenInputRef.current.click()}\n          >\n            <Label type={LabelTypography.BUTTON_1} color={LabelColors.PRIMARY}>\n              {stringSet.EDIT_PROFILE__IMAGE_UPLOAD}\n            </Label>\n          </TextButton>\n        </section>\n        <section className=\"sendbird-edit-user-profile__name\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__NICKNAME_LABEL}\n          </InputLabel>\n          <Input\n            required={user.nickname !== ''}\n            name=\"sendbird-edit-user-profile__name__input\"\n            ref={inputRef}\n            value={user.nickname}\n            placeHolder={stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER}\n          />\n        </section>\n        <section className=\"sendbird-edit-user-profile__userid\">\n          <InputLabel>\n            {/*  userID */}\n            {stringSet.EDIT_PROFILE__USERID_LABEL}\n          </InputLabel>\n          <Input\n            disabled\n            name=\"sendbird-edit-user-profile__userid__input\"\n            value={user.userId}\n          />\n        </section>\n        <section className=\"sendbird-edit-user-profile__theme\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__THEME_LABEL}\n          </InputLabel>\n          <div className=\"sendbird-edit-user-profile__theme__theme-icon\">\n            {\n              theme === 'dark'\n                ? (\n                  <Icon\n                    onClick={() => {\n                      changeTheme('light');\n                      if (onThemeChange && typeof onThemeChange === 'function') {\n                        onThemeChange('light');\n                      }\n                    }}\n                    type={IconTypes.TOGGLE_ON}\n                    width={44}\n                    height={24}\n                  />\n                )\n                : (\n                  <Icon\n                    onClick={() => {\n                      changeTheme('dark');\n                      if (onThemeChange && typeof onThemeChange === 'function') {\n                        onThemeChange('dark');\n                      }\n                    }}\n                    type={IconTypes.TOGGLE_OFF}\n                    width={44}\n                    height={24}\n                  />\n                )\n            }\n          </div>\n        </section>\n      </form>\n    </Modal>\n  );\n}\n\nconst mapStoreToProps = (store) => {\n  return {\n    theme: store.config.theme,\n    changeTheme: store.config.setCurrenttheme,\n  };\n};\n\ninterface ConnectedEditUserProfileProps {\n  user: SendbirdTypes['User'];\n  onCancel(): void;\n  onSubmit(newFile: File, newNickname: string): void;\n  onThemeChange?(theme: string): void;\n}\n\nconst ConnectedEditUserProfile: (\n  props: ConnectedEditUserProfileProps\n) => React.Component = withSendbirdContext(EditUserProfile, mapStoreToProps);\n\nexport default ConnectedEditUserProfile;\n","import './add-channel.scss';\n\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport IconButton from '../../../ui/IconButton';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport InviteMembers from '../../InviteMembers';\n\nimport {\n  createChannel,\n  createDefaultUserListQuery,\n  isBroadcastChannelEnabled,\n  isSuperGroupChannelEnabled,\n} from './utils';\nimport { CREATE_CHANNEL } from '../dux/actionTypes';\nimport Modal from '../../../ui/Modal';\n\nexport default function AddChannel({\n  sdk,\n  disabled,\n  channelListDispatcher,\n  onBeforeCreateChannel,\n  userId,\n  userFilledApplicationUserListQuery,\n  userListQuery,\n}) {\n  const [showModal, setShowModal] = useState(false);\n  const [step, setStep] = useState(0);\n  const [type, setType] = useState('group');\n  const { stringSet } = useContext(LocalizationContext);\n\n  if (!sdk || !sdk.createApplicationUserListQuery) {\n    return null;\n  }\n\n  const isBroadcastAvailable = isBroadcastChannelEnabled(sdk);\n  const isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);\n\n  return (\n    <>\n      <IconButton\n        height=\"32px\"\n        width=\"32px\"\n        onClick={() => {\n          setShowModal(true);\n        }}\n        disabled={disabled}\n      >\n        <Icon\n          type={IconTypes.CREATE}\n          fillColor={IconColors.PRIMARY}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </IconButton>\n      {\n        showModal && step === 0 && (\n          <Modal\n            titleText={stringSet.MODAL__CHOOSE_CHANNEL_TYPE__TITLE}\n            hideFooter\n            onCancel={() => { setShowModal(false); }}\n            onSubmit={() => { }}\n          >\n            <div className=\"sendbird-add-channel__rectangle-wrap\">\n              <div\n                className=\"sendbird-add-channel__rectangle\"\n                onClick={() => {\n                  setType('group');\n                  setStep(1);\n                }}\n                role=\"button\"\n                tabIndex={0}\n                onKeyDown={() => {\n                  setType('group');\n                  setStep(1);\n                }}\n              >\n                <Icon\n                  className=\"sendbird-add-channel__rectangle__chat-icon\"\n                  type={IconTypes.CHAT}\n                  fillColor={IconColors.PRIMARY}\n                  width=\"28px\"\n                  height=\"28px\"\n                />\n                <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                  {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__GROUP}\n                </Label>\n              </div>\n              {\n                isSupergroupAvailable && (\n                  <div\n                    className=\"sendbird-add-channel__rectangle\"\n                    onClick={() => {\n                      setType('supergroup');\n                      setStep(1);\n                    }}\n                    role=\"button\"\n                    tabIndex={0}\n                    onKeyDown={() => {\n                      setType('supergroup');\n                      setStep(1);\n                    }}\n                  >\n                    <Icon\n                      className=\"sendbird-add-channel__rectangle__supergroup-icon\"\n                      type={IconTypes.SUPERGROUP}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"28px\"\n                      height=\"28px\"\n                    />\n                    <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                      {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP}\n                    </Label>\n                  </div>\n                )\n              }\n              {\n                isBroadcastAvailable && (\n                  <div\n                    className=\"sendbird-add-channel__rectangle\"\n                    onClick={() => {\n                      setType('broadcast');\n                      setStep(1);\n                    }}\n                    role=\"button\"\n                    tabIndex={0}\n                    onKeyDown={() => {\n                      setType('broadcast');\n                      setStep(1);\n                    }}\n                  >\n                    <Icon\n                      className=\"sendbird-add-channel__rectangle__broadcast-icon\"\n                      type={IconTypes.BROADCAST}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"28px\"\n                      height=\"28px\"\n                    />\n                    <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                      {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST}\n                    </Label>\n                  </div>\n                )\n              }\n            </div>\n          </Modal>\n        )\n      }\n      {\n        showModal && step === 1 && (\n          <InviteMembers\n            swapParams={\n              sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback()\n            }\n            titleText={stringSet.MODAL__CREATE_CHANNEL__TITLE}\n            submitText={stringSet.BUTTON__CREATE}\n            closeModal={() => {\n              setStep(0);\n              setShowModal(false);\n            }}\n            idsToFilter={[userId]}\n            userQueryCreator={() => ((userListQuery && typeof userListQuery === 'function')\n              ? userListQuery()\n              : createDefaultUserListQuery({ sdk, userFilledApplicationUserListQuery })\n            )}\n            onSubmit={(selectedUsers) => createChannel(\n              sdk,\n              selectedUsers,\n              onBeforeCreateChannel,\n              userId,\n              type,\n            ).then((channel) => {\n              // maybe - do this in event listener\n              channelListDispatcher({\n                type: CREATE_CHANNEL,\n                payload: channel,\n              });\n            })}\n          />\n        )\n      }\n    </>\n  );\n}\n\nAddChannel.propTypes = {\n  sdk: PropTypes.shape({\n    getErrorFirstCallback: PropTypes.func,\n    createApplicationUserListQuery: PropTypes.func,\n  }).isRequired,\n  disabled: PropTypes.bool,\n  channelListDispatcher: PropTypes.func.isRequired,\n  userFilledApplicationUserListQuery: PropTypes.shape({}),\n  onBeforeCreateChannel: PropTypes.func,\n  userId: PropTypes.string.isRequired,\n  userListQuery: PropTypes.func,\n};\n\nAddChannel.defaultProps = {\n  disabled: false,\n  userFilledApplicationUserListQuery: {},\n  onBeforeCreateChannel: null,\n  userListQuery: null,\n};\n","import React, {\n  useState,\n  useRef,\n  useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport ContextMenu, { MenuItem, MenuItems } from '../../../ui/ContextMenu';\nimport IconButton from '../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport LeaveChannelModal from '../../ChannelSettings/components/LeaveChannel';\n\nexport default function ChannelPreviewAction({ disabled, onLeaveChannel }) {\n  const parentRef = useRef(null);\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div\n      role=\"button\"\n      style={{ display: 'inline-block' }}\n      onKeyDown={(e) => { e.stopPropagation(); }}\n      tabIndex={0}\n      onClick={(e) => { e.stopPropagation(); }}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown) => (\n          <IconButton\n            ref={parentRef}\n            onClick={toggleDropdown}\n            height=\"32px\"\n            width=\"32px\"\n          >\n            <Icon\n              type={IconTypes.MORE}\n              fillColor={IconColors.PRIMARY}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(closeDropdown) => (\n          <MenuItems\n            parentRef={parentRef}\n            parentContainRef={parentRef}\n            closeDropdown={closeDropdown}\n          >\n            <MenuItem\n              onClick={() => {\n                if (disabled) { return; }\n                setShowModal(true);\n                closeDropdown();\n              }}\n            >\n              {stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE}\n            </MenuItem>\n          </MenuItems>\n        )}\n      />\n      {\n        showModal && (\n          <LeaveChannelModal\n            onCloseModal={() => setShowModal(false)}\n            onLeaveChannel={onLeaveChannel}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired,\n};\n\nChannelPreviewAction.defaultProps = {\n  disabled: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Placeholder from '../../../ui/PlaceHolder';\n\nexport default function ChannelsPlaceholder({\n  type,\n}) {\n  return (\n    <div className=\"sendbird-channel-list\">\n      <Placeholder type={type} />\n    </div>\n  );\n}\n\nChannelsPlaceholder.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n","import * as channelActions from './dux/actionTypes';\nimport * as topics from '../../lib/pubSub/topics';\n\nconst createEventHandler = ({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  logger,\n}) => {\n  const ChannelHandler = new sdk.ChannelHandler();\n\n  ChannelHandler.onChannelChanged = (channel) => {\n    logger.info('ChannelList: onChannelChanged', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_CHANGED,\n      payload: channel,\n    });\n  };\n  ChannelHandler.onChannelDeleted = (channelUrl) => {\n    logger.info('ChannelList: onChannelDeleted', channelUrl);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_DELETED,\n      payload: channelUrl,\n    });\n  };\n  ChannelHandler.onUserJoined = (channel) => {\n    logger.info('ChannelList: onUserJoined', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: channelActions.ON_USER_JOINED,\n        payload: channel,\n      });\n    }\n  };\n  ChannelHandler.onUserBanned = (channel, user) => {\n    const { currentUser } = sdk;\n    logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n    if (user.userId === currentUser.userId) {\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe: true,\n        },\n      });\n    } else {\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe: false,\n        },\n      });\n    }\n  };\n  ChannelHandler.onUserLeft = (channel, leftUser) => {\n    const { currentUser } = sdk;\n    const isMe = (currentUser.userId === leftUser.userId);\n    logger.info('ChannelList: onUserLeft', channel);\n    channelListDispatcher({\n      type: channelActions.ON_USER_LEFT,\n      payload: {\n        channel,\n        isMe,\n      },\n    });\n  };\n\n  ChannelHandler.onReadStatus = (channel) => {\n    logger.info('ChannelList: onReadStatus', channel);\n    channelListDispatcher({\n      type: channelActions.ON_READ_RECEIPT_UPDATED,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onDeliveryReceiptUpdated = (channel) => {\n    logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: channelActions.ON_DELIVERY_RECEIPT_UPDATED,\n        payload: channel,\n      });\n    }\n  };\n\n  ChannelHandler.onMessageUpdated = (channel, message) => {\n    if (channel.lastMessage.isEqual(message)) {\n      logger.info('ChannelList: onMessageUpdated', channel);\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: channel,\n      });\n    }\n  };\n\n  ChannelHandler.onChannelHidden = (channel) => {\n    logger.info('ChannelList: onChannelHidden', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_ARCHIVED,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onChannelFrozen = (channel) => {\n    logger.info('ChannelList: onChannelFrozen', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_FROZEN,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onChannelUnfrozen = (channel) => {\n    logger.info('ChannelList: onChannelUnfrozen', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_UNFROZEN,\n      payload: channel,\n    });\n  };\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.addChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nconst createChannelListQuery = ({ sdk, userFilledChannelListQuery = {} }) => {\n  const channelListQuery = sdk.GroupChannel.createMyGroupChannelListQuery();\n  channelListQuery.includeEmpty = false;\n  channelListQuery.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n  channelListQuery.limit = 20; // The value of pagination limit could be set up to 100.\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach((key) => {\n      channelListQuery[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  setChannelSource,\n  onChannelSelect,\n  userFilledChannelListQuery,\n  logger,\n  sortChannelList,\n  disableAutoSelect,\n}) {\n  if (sdk && sdk.ChannelHandler) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger,\n    });\n  } else {\n    logger.console.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', { userFilledChannelListQuery });\n  const channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });\n  logger.info('ChannelList - created query', channelListQuery);\n\n  setChannelSource(channelListQuery);\n\n  channelListDispatcher({\n    type: channelActions.INIT_CHANNELS_START,\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: channelActions.CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId,\n      },\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next((response, error) => {\n      const swapParams = sdk.getErrorFirstCallback();\n      let channelList = response;\n      let err = error;\n      if (swapParams) {\n        channelList = error;\n        err = response;\n      }\n      logger.info('ChannelList - fetched channels', channelList);\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: channelActions.INIT_CHANNELS_FAILURE,\n        });\n        return;\n      }\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      let sorted = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sorted = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sorted);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sorted[0]);\n      }\n      channelListDispatcher({\n        type: channelActions.INIT_CHANNELS_SUCCESS,\n        payload: sorted,\n      });\n      if (channelList && typeof channelList.forEach === 'function') {\n        logger.info('ChannelList - mark all channels as delivered');\n        channelList.forEach((c) => c.markAsDelivered());\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (pubSub, channelListDispatcher) => {\n  const subScriber = new Map();\n  if (!pubSub) return subScriber;\n  subScriber.set(topics.CREATE_CHANNEL, pubSub.subscribe(topics.CREATE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel,\n    });\n  }));\n\n  subScriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    const updatedChannel = channel;\n    if (updatedChannel?.lastMessage?.messageId === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel,\n      });\n    }\n  }));\n\n  subScriber.set(topics.LEAVE_CHANNEL, pubSub.subscribe(topics.LEAVE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.LEAVE_CHANNEL_SUCCESS,\n      payload: channel.url,\n    });\n  }));\n\n  subScriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.CHANNEL_REPLACED_TO_TOP,\n      payload: channel,\n    });\n  }));\n\n  return subScriber;\n};\n\nexport default setupChannelList;\n","import React, { useEffect, useState, useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport * as userActions from '../../lib/dux/user/actionTypes';\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\n\nimport * as channelListActions from './dux/actionTypes';\nimport channelListInitialState from './dux/initialState';\nimport channelListReducers from './dux/reducers';\n\nimport ChannelPreview from '../../ui/ChannelPreview';\nimport ChannelHeader from '../../ui/ChannelHeader';\nimport EditUserProfile from '../../ui/EditUserProfile';\nimport PlaceholderTypes from '../../ui/PlaceHolder/type';\n\nimport AddChannel from './components/AddChannel';\nimport ChannelPreviewAction from './components/ChannelPreviewAction';\nimport PlaceHolder from './components/Placeholder';\n\nimport setupChannelList, {\n  pubSubHandler,\n  pubSubHandleRemover,\n} from './utils';\nimport { uuidv4 } from '../../utils/uuid';\n\nimport './index.scss';\n\nconst noop = () => { };\n\nfunction ChannelList(props) {\n  const {\n    stores: { sdkStore = {}, userStore = {} },\n    config: {\n      userId,\n      isOnline,\n      userListQuery,\n      logger,\n      pubSub,\n      theme,\n    },\n    dispatchers: {\n      userDispatcher,\n    },\n    queries = {},\n    renderChannelPreview,\n    renderHeader,\n    renderUserProfile,\n    disableUserProfile,\n    allowProfileEdit,\n    sortChannelList,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    onChannelSelect,\n    disableAutoSelect,\n  } = props;\n  const { config = {} } = props;\n  // enable if it is true atleast once(both are flase by default)\n  const enableEditProfile = allowProfileEdit || config.allowProfileEdit;\n  const userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  const userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  const { sdk = {} } = sdkStore;\n  const userFilledChannelListQuery = queries.channelListQuery;\n  const userFilledApplicationUserListQuery = queries.applicationUserListQuery;\n\n  const sdkError = sdkStore.error;\n  const sdkIntialized = sdkStore.initialized;\n\n  const [channelListStore, channelListDispatcher] = useReducer(\n    channelListReducers,\n    channelListInitialState,\n  );\n  const [user, setUser] = useState({});\n  const [channelSource, setChannelSource] = useState({});\n  const [showProfileEdit, setShowProfileEdit] = useState(false);\n  const [sdkChannelHandlerId, setSdkChannelHandlerId] = useState(null);\n\n  const { loading, currentChannel } = channelListStore;\n\n  useEffect(() => {\n    setUser(userStore.user);\n  }, [userStore.user]);\n\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n\n  useEffect(() => {\n    setSdkChannelHandlerId(uuidv4);\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n        disableAutoSelect,\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource({});\n      // cleanup\n      channelListDispatcher({\n        type: channelListActions.RESET_CHANNEL_LIST,\n      });\n    }\n    return () => {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n\n  const { allChannels } = channelListStore;\n  const sortedChannels = (sortChannelList && typeof sortChannelList === 'function')\n    ? sortChannelList(allChannels)\n    : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, { before: allChannels, after: sortedChannels });\n    logger.warning(warning, { before: allChannels, after: sortedChannels });\n  }\n\n  useEffect(() => {\n    channelListDispatcher({\n      type: channelListActions.SET_AUTO_SELECT_CHANNEL_ITEM,\n      payload: disableAutoSelect,\n    });\n  }, [disableAutoSelect]);\n\n  useEffect(() => {\n    if (!sdk || !sdk.GroupChannel || !currentChannel) { return; }\n    sdk.GroupChannel.getChannel(currentChannel, (groupChannel) => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel]);\n\n  return (\n    <UserProfileProvider\n      className=\"sendbird-channel-list\"\n      disableUserProfile={userDefinedDisableUserProfile}\n      renderUserProfile={userDefinedRenderProfile}\n    >\n      <div className=\"sendbird-channel-list__header\">\n        <ChannelHeader\n          renderHeader={renderHeader}\n          user={user}\n          onEdit={() => {\n            if (enableEditProfile) {\n              setShowProfileEdit(true);\n            }\n          }}\n          allowProfileEdit={enableEditProfile}\n          iconButton={(\n            <AddChannel\n              disabled={!isOnline}\n              userListQuery={userListQuery}\n              sdk={sdk}\n              channelListDispatcher={channelListDispatcher}\n              userId={userId}\n              userFilledApplicationUserListQuery={userFilledApplicationUserListQuery}\n              onBeforeCreateChannel={onBeforeCreateChannel}\n            />\n          )}\n        />\n      </div>\n      {\n        showProfileEdit && (\n          <EditUserProfile\n            onThemeChange={onThemeChange}\n            user={user}\n            onCancel={() => { setShowProfileEdit(false); }}\n            onSubmit={(newName, newFile) => {\n              sdk.updateCurrentUserInfoWithProfileImage(newName, newFile, (updatedUser) => {\n                userDispatcher({ type: userActions.UPDATE_USER_INFO, payload: updatedUser });\n                if (onProfileEditSuccess && typeof onProfileEditSuccess === 'function') {\n                  onProfileEditSuccess(updatedUser);\n                }\n              });\n            }}\n          />\n        )\n      }\n      <div\n        className=\"sendbird-channel-list__body\"\n        onScroll={(e) => {\n          const fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n          if (fetchMore && channelSource.hasNext) {\n            logger.info('ChannelList: Fetching more channels');\n            channelListDispatcher({\n              type: channelListActions.FETCH_CHANNELS_START,\n            });\n            channelSource.next((response, error) => {\n              const swapParams = sdk.getErrorFirstCallback();\n              let channelList = response;\n              let err = error;\n              if (swapParams) {\n                channelList = error;\n                err = response;\n              }\n              if (err) {\n                logger.info('ChannelList: Fetching channels failed', err);\n                channelListDispatcher({\n                  type: channelListActions.FETCH_CHANNELS_FAILURE,\n                  payload: channelList,\n                });\n                return;\n              }\n              logger.info('ChannelList: Fetching channels successful', channelList);\n              channelListDispatcher({\n                type: channelListActions.FETCH_CHANNELS_SUCCESS,\n                payload: channelList,\n              });\n              if (channelList && typeof channelList.forEach === 'function') {\n                logger.info('ChannelList: Marking all channels as read');\n                channelList.forEach((c) => c.markAsDelivered());\n              }\n            });\n          }\n        }}\n      >\n        {\n          (sdkError) && (\n            <PlaceHolder type={PlaceholderTypes.WRONG} />\n          )\n        }\n        {/*\n          To do: Implement windowing\n          Implement windowing if you are dealing with large number of messages/channels\n          https://github.com/bvaughn/react-window -> recommendation\n          We hesitate to bring one more dependency to our library,\n          we are planning to implement it inside the library\n        */}\n        <div>\n          {\n            sortedChannels && sortedChannels.map((channel, idx) => {\n              const onLeaveChannel = (c, cb) => {\n                logger.info('ChannelList: Leaving channel', c);\n                c.leave()\n                  .then((res) => {\n                    logger.info('ChannelList: Leaving channel success', res);\n                    if (cb && typeof cb === 'function') {\n                      cb(res, null);\n                    }\n                    channelListDispatcher({\n                      type: channelListActions.LEAVE_CHANNEL_SUCCESS,\n                      payload: channel.url,\n                    });\n                  })\n                  .catch((err) => {\n                    logger.error('ChannelList: Leaving channel failed', err);\n                    if (cb && typeof cb === 'function') {\n                      cb(null, err);\n                    }\n                  });\n              };\n\n              const onClick = () => {\n                if (!isOnline) { return; }\n                logger.info('ChannelList: Clicked on channel:', channel);\n                channelListDispatcher({\n                  type: channelListActions.SET_CURRENT_CHANNEL,\n                  payload: channel.url,\n                });\n              };\n\n              return (\n                (renderChannelPreview)\n                  ? (\n                    // eslint-disable-next-line\n                    <div key={channel.url} onClick={onClick}>\n                      {renderChannelPreview({ channel, onLeaveChannel })}\n                    </div>\n                  )\n                  : (\n                    <ChannelPreview\n                      key={channel.url}\n                      tabIndex={idx}\n                      onClick={onClick}\n                      channel={channel}\n                      currentUser={user}\n                      theme={theme}\n                      isActive={channel.url === currentChannel}\n                      // todo - potential performance hit refactor\n                      ChannelAction={(\n                        <ChannelPreviewAction\n                          disabled={!isOnline}\n                          onLeaveChannel={() => onLeaveChannel(channel)}\n                        />\n                      )}\n                    />\n                  )\n              );\n            })\n          }\n        </div>\n        {\n          (!sdkIntialized || loading) && (\n            <PlaceHolder type={PlaceholderTypes.LOADING} />\n          )\n        }\n        {\n          //  placeholder\n          (!allChannels || allChannels.length === 0) && (\n            <PlaceHolder type={PlaceholderTypes.NO_CHANNELS} />\n          )\n        }\n      </div>\n    </UserProfileProvider>\n  );\n}\n\nChannelList.propTypes = {\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool,\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({}),\n    }),\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    userDispatcher: PropTypes.func,\n  }).isRequired,\n  config: PropTypes.shape({\n    userId: PropTypes.string.isRequired,\n    userListQuery: PropTypes.func,\n    theme: PropTypes.string,\n    isOnline: PropTypes.bool,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func,\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func,\n    }),\n  }).isRequired,\n  queries: PropTypes.shape({\n    channelListQuery: PropTypes.shape({\n      channelNameContainsFilter: PropTypes.string,\n      channelUrlsFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypesFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypeStartsWithFilter: PropTypes.string,\n      hiddenChannelFilter: PropTypes.string,\n      includeEmpty: PropTypes.bool,\n      limit: PropTypes.number,\n      memberStateFilter: PropTypes.string,\n      metadataOrderKeyFilter: PropTypes.string,\n      nicknameContainsFilter: PropTypes.string,\n      order: PropTypes.string,\n      publicChannelFilter: PropTypes.string,\n      superChannelFilter: PropTypes.string,\n      unreadChannelFilter: PropTypes.string,\n      userIdsExactFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilterQueryType: PropTypes.string,\n    }),\n    applicationUserListQuery: PropTypes.shape({\n      limit: PropTypes.number,\n      userIdsFilter: PropTypes.arrayOf(PropTypes.string),\n      metaDataKeyFilter: PropTypes.string,\n      metaDataValuesFilter: PropTypes.arrayOf(PropTypes.string),\n    }),\n  }),\n  onBeforeCreateChannel: PropTypes.func,\n  renderChannelPreview: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  allowProfileEdit: PropTypes.bool,\n  sortChannelList: PropTypes.func,\n  onThemeChange: PropTypes.func,\n  onProfileEditSuccess: PropTypes.func,\n  renderHeader: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  onChannelSelect: PropTypes.func,\n  disableAutoSelect: PropTypes.bool,\n};\n\nChannelList.defaultProps = {\n  onBeforeCreateChannel: null,\n  renderChannelPreview: null,\n  renderHeader: null,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  allowProfileEdit: false,\n  onThemeChange: null,\n  sortChannelList: null,\n  onProfileEditSuccess: null,\n  queries: {},\n  onChannelSelect: noop,\n  disableAutoSelect: false,\n};\n\nexport default withSendbirdContext(ChannelList);\n"]},"metadata":{},"sourceType":"module"}
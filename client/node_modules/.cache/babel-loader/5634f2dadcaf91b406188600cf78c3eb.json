{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction parseHotkey(hotkey) {\n  const keys = hotkey.toLowerCase().split(\"+\").map(part => part.trim());\n  const modifiers = {\n    alt: keys.includes(\"alt\"),\n    ctrl: keys.includes(\"ctrl\"),\n    meta: keys.includes(\"meta\"),\n    mod: keys.includes(\"mod\"),\n    shift: keys.includes(\"shift\")\n  };\n  const reservedKeys = [\"alt\", \"ctrl\", \"meta\", \"shift\", \"mod\"];\n  const freeKey = keys.find(key => !reservedKeys.includes(key));\n  return __spreadProps(__spreadValues({}, modifiers), {\n    key: freeKey\n  });\n}\n\nfunction isExactHotkey(hotkey, event) {\n  const {\n    alt,\n    ctrl,\n    meta,\n    mod,\n    shift,\n    key\n  } = hotkey;\n  const {\n    altKey,\n    ctrlKey,\n    metaKey,\n    shiftKey,\n    key: pressedKey\n  } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  if (key && (pressedKey.toLowerCase() === key.toLowerCase() || event.code.replace(\"Key\", \"\").toLowerCase() === key.toLowerCase())) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getHotkeyMatcher(hotkey) {\n  return event => isExactHotkey(parseHotkey(hotkey), event);\n}\n\nfunction getHotkeyHandler(hotkeys) {\n  return event => {\n    hotkeys.forEach(_ref => {\n      let [hotkey, handler] = _ref;\n\n      if (getHotkeyMatcher(hotkey)(event.nativeEvent)) {\n        event.preventDefault();\n        handler(event);\n      }\n    });\n  };\n}\n\nexport { getHotkeyHandler, getHotkeyMatcher, parseHotkey };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-hotkeys\\parse-hotkey.ts"],"names":[],"mappings":"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","sourcesContent":["export type KeyboardModifiers = {\n  alt: boolean;\n  ctrl: boolean;\n  meta: boolean;\n  mod: boolean;\n  shift: boolean;\n};\n\nexport type Hotkey = KeyboardModifiers & {\n  key?: string;\n};\n\ntype CheckHotkeyMatch = (event: KeyboardEvent) => boolean;\n\nexport function parseHotkey(hotkey: string): Hotkey {\n  const keys = hotkey\n    .toLowerCase()\n    .split('+')\n    .map((part) => part.trim());\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n    shift: keys.includes('shift'),\n  };\n\n  const reservedKeys = ['alt', 'ctrl', 'meta', 'shift', 'mod'];\n\n  const freeKey = keys.find((key) => !reservedKeys.includes(key));\n\n  return {\n    ...modifiers,\n    key: freeKey,\n  };\n}\n\nfunction isExactHotkey(hotkey: Hotkey, event: KeyboardEvent): boolean {\n  const { alt, ctrl, meta, mod, shift, key } = hotkey;\n  const { altKey, ctrlKey, metaKey, shiftKey, key: pressedKey } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  if (\n    key &&\n    (pressedKey.toLowerCase() === key.toLowerCase() ||\n      event.code.replace('Key', '').toLowerCase() === key.toLowerCase())\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function getHotkeyMatcher(hotkey: string): CheckHotkeyMatch {\n  return (event) => isExactHotkey(parseHotkey(hotkey), event);\n}\n\ntype HotkeyItem = [string, (event: React.KeyboardEvent<HTMLElement>) => void];\n\nexport function getHotkeyHandler(hotkeys: HotkeyItem[]) {\n  return (event: React.KeyboardEvent<HTMLElement>) => {\n    hotkeys.forEach(([hotkey, handler]) => {\n      if (getHotkeyMatcher(hotkey)(event.nativeEvent)) {\n        event.preventDefault();\n        handler(event);\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
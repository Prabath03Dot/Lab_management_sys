{"ast":null,"code":"import e, { memo as r } from \"react\";\nimport t from \"@anymod/core\";\nimport n from \"@userfront/core\";\n\nconst o = function () {\n  try {\n    return s.isScript1Loading ? Promise.resolve() : Promise.resolve(l()).then(function (e) {\n      return Promise.resolve(m(e)).then(function (e) {\n        return Promise.resolve(a(e)).then(function () {\n          u(), p();\n        });\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      {\n  Singleton: s,\n  alias: c,\n  render: i,\n  processPage: a,\n  addScript1ToDocument: d,\n  createOrReturnPage: l,\n  checkPageAndUpdate: m,\n  executeCallbacks: u,\n  logErrorsAndTips: p\n} = t,\n      {\n  registerUrlChangedEventListener: f,\n  addInitCallback: g\n} = n;\n\nc.setAlias(\"Userfront\"), s.Opts.api = !0, g(_ref => {\n  let {\n    tenantId: e\n  } = _ref;\n  s.External.project = e, d(\"https://cdn.userfront.com/toolkit/page/\", e, o);\n}), f(), \"object\" == typeof window && window.addEventListener(\"urlchanged\", i);\nconst P = {\n  build(_ref2) {\n    let {\n      toolId: t\n    } = _ref2;\n\n    class n extends e.Component {\n      componentDidMount() {\n        !function () {\n          try {\n            try {\n              o();\n            } catch (e) {\n              console.warn(e && e.message ? e.message : \"Problem loading page\", e);\n            }\n\n            Promise.resolve();\n          } catch (e) {\n            return Promise.reject(e);\n          }\n        }();\n      }\n\n      render() {\n        return e.createElement(\"div\", null, e.createElement(\"div\", {\n          id: \"userfront-\" + t\n        }));\n      }\n\n    }\n\n    return r(n);\n  }\n\n};\n\nfor (const e in n) P[e] || (P[e] = n[e]);\n\nexport default P;","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\@userfront\\react\\src\\index.js"],"names":["Singleton","alias","render","processPage","addScript1ToDocument","createOrReturnPage","checkPageAndUpdate","executeCallbacks","logErrorsAndTips","AnyMod","registerUrlChangedEventListener","addInitCallback","Core","setAlias","Opts","api","tenantId","External","project","runAnyModSetup","window","addEventListener","isScript1Loading","page","updatedPage","err","message","console","warn","Userfront","build","toolId","Anon","React","Component","componentDidMount","mountTools","id","memo","attr"],"mappings":"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","sourcesContent":["import React, { memo } from \"react\";\nimport AnyMod from \"@anymod/core\";\nimport Core from \"@userfront/core\";\n\nconst {\n  Singleton,\n  alias,\n  render,\n  processPage,\n  addScript1ToDocument,\n  createOrReturnPage,\n  checkPageAndUpdate,\n  executeCallbacks,\n  logErrorsAndTips,\n} = AnyMod;\n\nconst { registerUrlChangedEventListener, addInitCallback } = Core;\nalias.setAlias(\"Userfront\");\n\nSingleton.Opts.api = true;\n\n/**\n * The order of operations is:\n *  1. Userfront.init() is called\n *  2. Callback is fired that adds Script1 to document and sets Singleton.isScript1Loading = true\n *  3. Userfront.build() is called\n *  4. componentDidMount() is called\n *  5. mountTools() is called\n *  6a. If Script1 hasn't loaded yet, wait for it to load\n *  6b. If Script1 has loaded, continue\n *  7. runAnyModSetup() is called\n */\n\n// Callback to fire whenever Userfront.init is called\naddInitCallback(({ tenantId }) => {\n  Singleton.External.project = tenantId;\n  addScript1ToDocument(\n    \"https://cdn.userfront.com/toolkit/page/\",\n    tenantId,\n    runAnyModSetup\n  );\n});\n\nregisterUrlChangedEventListener();\n\nif (typeof window === \"object\") {\n  window.addEventListener(\"urlchanged\", render);\n}\n\nasync function runAnyModSetup() {\n  if (Singleton.isScript1Loading) return;\n  const page = await createOrReturnPage();\n  const updatedPage = await checkPageAndUpdate(page);\n  await processPage(updatedPage);\n  executeCallbacks();\n  logErrorsAndTips();\n}\n\nasync function mountTools() {\n  try {\n    runAnyModSetup();\n  } catch (err) {\n    let message = err && err.message ? err.message : \"Problem loading page\";\n    console.warn(message, err);\n  }\n}\n\nconst Userfront = {\n  build({ toolId }) {\n    class Anon extends React.Component {\n      componentDidMount() {\n        mountTools();\n      }\n      render() {\n        return (\n          <div>\n            <div id={`userfront-${toolId}`}></div>\n          </div>\n        );\n      }\n    }\n    return memo(Anon);\n  },\n  /**\n   * This is the hook way to do it, which we're not\n   * using because it's not compatible with older\n   * versions of React.\n   */\n  // hook({ tenantId, toolId }) {\n  //   return function Anon() {\n  //     useEffect(() => {\n  //       mount();\n  //     });\n  //     return (\n  //       <div>\n  //         <div id={`userfront-${toolId}`}></div>\n  //       </div>\n  //     );\n  //   };\n  // },\n};\n\nfor (const attr in Core) {\n  if (!Userfront[attr]) Userfront[attr] = Core[attr];\n}\n\nexport default Userfront;\n"]},"metadata":{},"sourceType":"module"}
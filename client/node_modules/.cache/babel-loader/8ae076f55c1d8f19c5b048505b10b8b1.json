{"ast":null,"code":"import { useRef } from 'react';\nimport { useDidUpdate } from '@mantine/hooks';\n\nfunction useAccordionFocus(itemsCount) {\n  const controlsRefs = useRef([]);\n\n  const handleItemKeydown = index => event => {\n    var _a, _b;\n\n    if (event.code === \"ArrowDown\") {\n      event.preventDefault();\n      const nextFocusElement = controlsRefs.current[index + 1];\n\n      if (nextFocusElement) {\n        nextFocusElement.focus();\n      } else {\n        (_a = controlsRefs.current[0]) == null ? void 0 : _a.focus();\n      }\n    }\n\n    if (event.code === \"ArrowUp\") {\n      event.preventDefault();\n      const previousFocusElement = controlsRefs.current[index - 1];\n\n      if (previousFocusElement) {\n        previousFocusElement.focus();\n      } else {\n        (_b = controlsRefs.current[controlsRefs.current.length - 1]) == null ? void 0 : _b.focus();\n      }\n    }\n  };\n\n  const assignControlRef = index => node => {\n    controlsRefs.current[index] = node;\n  };\n\n  useDidUpdate(() => {\n    controlsRefs.current = controlsRefs.current.slice(0, itemsCount);\n  }, [itemsCount]);\n  return {\n    handleItemKeydown,\n    assignControlRef\n  };\n}\n\nexport { useAccordionFocus };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\core\\src\\components\\Accordion\\use-accordion-focus\\use-accordion-focus.ts"],"names":[],"mappings":";;;AAEO,SAAS,iBAAT,CAA2B,UAA3B,EAAuC;AAC5C,QAAM,YAAY,GAAG,MAAM,CAAC,EAAD,CAA3B;;AACA,QAAM,iBAAiB,GAAI,KAAD,IAAY,KAAD,IAAW;AAC9C,QAAI,EAAJ,EAAQ,EAAR;;AACA,QAAI,KAAK,CAAC,IAAN,KAAe,WAAnB,EAAgC;AAC9B,MAAA,KAAK,CAAC,cAAN;AACA,YAAM,gBAAgB,GAAG,YAAY,CAAC,OAAb,CAAqB,KAAK,GAAG,CAA7B,CAAzB;;AACA,UAAI,gBAAJ,EAAsB;AACpB,QAAA,gBAAgB,CAAC,KAAjB;AACD,OAFD,MAEO;AACL,SAAC,EAAE,GAAG,YAAY,CAAC,OAAb,CAAqB,CAArB,CAAN,KAAkC,IAAlC,GAAyC,KAAK,CAA9C,GAAkD,EAAE,CAAC,KAAH,EAAlD;AACD;AACF;;AACD,QAAI,KAAK,CAAC,IAAN,KAAe,SAAnB,EAA8B;AAC5B,MAAA,KAAK,CAAC,cAAN;AACA,YAAM,oBAAoB,GAAG,YAAY,CAAC,OAAb,CAAqB,KAAK,GAAG,CAA7B,CAA7B;;AACA,UAAI,oBAAJ,EAA0B;AACxB,QAAA,oBAAoB,CAAC,KAArB;AACD,OAFD,MAEO;AACL,SAAC,EAAE,GAAG,YAAY,CAAC,OAAb,CAAqB,YAAY,CAAC,OAAb,CAAqB,MAArB,GAA8B,CAAnD,CAAN,KAAgE,IAAhE,GAAuE,KAAK,CAA5E,GAAgF,EAAE,CAAC,KAAH,EAAhF;AACD;AACF;AACF,GApBD;;AAqBA,QAAM,gBAAgB,GAAI,KAAD,IAAY,IAAD,IAAU;AAC5C,IAAA,YAAY,CAAC,OAAb,CAAqB,KAArB,IAA8B,IAA9B;AACD,GAFD;;AAGA,EAAA,YAAY,CAAC,MAAM;AACjB,IAAA,YAAY,CAAC,OAAb,GAAuB,YAAY,CAAC,OAAb,CAAqB,KAArB,CAA2B,CAA3B,EAA8B,UAA9B,CAAvB;AACD,GAFW,EAET,CAAC,UAAD,CAFS,CAAZ;AAGA,SAAO;AAAE,IAAA,iBAAF;AAAqB,IAAA;AAArB,GAAP;AACF","sourcesContent":["import { useRef } from 'react';\nimport { useDidUpdate } from '@mantine/hooks';\n\nexport function useAccordionFocus(itemsCount: number) {\n  const controlsRefs = useRef<HTMLButtonElement[]>([]);\n\n  const handleItemKeydown = (index: number) => (event: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (event.code === 'ArrowDown') {\n      event.preventDefault();\n      const nextFocusElement = controlsRefs.current[index + 1];\n      if (nextFocusElement) {\n        nextFocusElement.focus();\n      } else {\n        controlsRefs.current[0]?.focus();\n      }\n    }\n\n    if (event.code === 'ArrowUp') {\n      event.preventDefault();\n      const previousFocusElement = controlsRefs.current[index - 1];\n      if (previousFocusElement) {\n        previousFocusElement.focus();\n      } else {\n        controlsRefs.current[controlsRefs.current.length - 1]?.focus();\n      }\n    }\n  };\n\n  const assignControlRef = (index: number) => (node: HTMLButtonElement) => {\n    controlsRefs.current[index] = node;\n  };\n\n  useDidUpdate(() => {\n    controlsRefs.current = controlsRefs.current.slice(0, itemsCount);\n  }, [itemsCount]);\n\n  return { handleItemKeydown, assignControlRef };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React__default, { useContext, useRef, useState, useMemo, useEffect, useCallback, useReducer } from 'react';\nimport { f as format, i as isSameDay } from './index-3b2392ac.js';\nimport { c as LocalizationContext, u as uuidv4, d as __spreadArray, _ as __assign, w as withSendbirdContext } from './LocalizationContext-2dd9ebb4.js';\nimport { M as MessageInput, L as LinkLabel, D as DateSeparator, F as FileViewer, c as compareIds } from './index-01add60f.js';\nimport { L as Label, a as LabelTypography, A as Avatar, I as Icon, c as IconTypes, d as IconColors, b as LabelColors, e as Loader, h as ImageRenderer, P as PlaceHolder, i as PlaceHolderTypes } from './index-8f3e6954.js';\nimport { I as IconButton, U as UserProfileContext, C as ContextMenu, b as MenuItems, f as ConnectedUserProfile, c as MenuItem, a as TextButton, M as Modal, k as SEND_USER_MESSAGE, S as SEND_MESSAGE_START, l as SEND_FILE_MESSAGE, j as UPDATE_USER_MESSAGE, D as DELETE_MESSAGE, h as UserProfileProvider } from './index-5ffc2e37.js';\nimport 'prop-types';\nimport './index-2b8da253.js';\nimport 'react-dom';\n\nvar getMessageCreatedAt = function getMessageCreatedAt(message) {\n  return format(message.createdAt, 'p');\n};\n\nvar shouldFetchMore = function shouldFetchMore(messageLength, maxMessages) {\n  if (typeof maxMessages !== 'number') {\n    return true;\n  }\n\n  if (typeof maxMessages === 'number' && maxMessages > messageLength) {\n    return true;\n  }\n\n  return false;\n};\n\nvar scrollIntoLast = function scrollIntoLast(intialTry) {\n  if (intialTry === void 0) {\n    intialTry = 0;\n  }\n\n  var MAX_TRIES = 10;\n  var currentTry = intialTry;\n\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n\n  try {\n    var scrollDOM = document.querySelector('.sendbird-openchannel-conversation-scroll'); // eslint-disable-next-line no-multi-assign\n\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(function () {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nvar isSameGroup = function isSameGroup(message, comparingMessage) {\n  var _a, _b, _c, _d;\n\n  if (!(message && comparingMessage && (message === null || message === void 0 ? void 0 : message.messageType) !== 'admin' && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.messageType) !== 'admin' && (message === null || message === void 0 ? void 0 : message.sender) && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) && (message === null || message === void 0 ? void 0 : message.createdAt) && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.createdAt) && ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) && ((_b = comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) === null || _b === void 0 ? void 0 : _b.userId))) {\n    return false;\n  }\n\n  return (message === null || message === void 0 ? void 0 : message.sendingStatus) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sendingStatus) && ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId) === ((_d = comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) === null || _d === void 0 ? void 0 : _d.userId) && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage);\n};\n\nvar compareMessagesForGrouping = function compareMessagesForGrouping(prevMessage, currMessage, nextMessage) {\n  return [isSameGroup(prevMessage, currMessage), isSameGroup(currMessage, nextMessage)];\n};\n\nvar kFormatter = function kFormatter(num) {\n  if (Math.abs(num) > 999999) {\n    return (Math.abs(num) / 1000000).toFixed(1) + \"M\";\n  }\n\n  if (Math.abs(num) > 999) {\n    return (Math.abs(num) / 1000).toFixed(1) + \"K\";\n  }\n\n  return \"\" + num;\n};\n\nvar isOperator = function isOperator(openChannel, userId) {\n  var operators = openChannel.operators;\n\n  if (operators.map(function (operator) {\n    return operator.userId;\n  }).indexOf(userId) < 0) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isDisabledBecauseFrozen = function isDisabledBecauseFrozen(openChannel, userId) {\n  var isFrozen = openChannel.isFrozen;\n  return isFrozen && !isOperator(openChannel, userId);\n};\n\nvar fetchWithListQuery = function fetchWithListQuery(listQuery, logger, eachQueryNextCallback) {\n  var fetchList = function fetchList(query) {\n    var hasNext = query.hasNext;\n\n    if (hasNext) {\n      query.next(function (error, users) {\n        if (!error) {\n          eachQueryNextCallback(users);\n          fetchList(query);\n        } else {\n          logger.warning('OpenChannel | FetchUserList failed', error);\n        }\n      });\n    } else {\n      logger.info('OpenChannel | FetchUserList finished');\n    }\n  };\n\n  logger.info('OpenChannel | FetchUserList start', listQuery);\n  fetchList(listQuery);\n};\n\nvar pxToNumber = function pxToNumber(px) {\n  if (typeof px === 'number') {\n    return px;\n  }\n\n  if (typeof px === 'string') {\n    var parsed = Number.parseFloat(px);\n\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n\n  return null;\n};\n\nvar MessageInputWrapper = function MessageInputWrapper(_a, ref) {\n  var channel = _a.channel,\n      user = _a.user,\n      disabled = _a.disabled,\n      onSendMessage = _a.onSendMessage,\n      onFileUpload = _a.onFileUpload,\n      renderMessageInput = _a.renderMessageInput;\n\n  if (!channel) {\n    return;\n  }\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  if (renderMessageInput) {\n    return renderMessageInput({\n      channel: channel,\n      user: user,\n      disabled: disabled\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-footer\"\n  }, /*#__PURE__*/React__default.createElement(MessageInput, {\n    ref: ref,\n    disabled: disabled,\n    onSendMessage: onSendMessage,\n    onFileUpload: onFileUpload,\n    placeholder: disabled && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED // add disabled because of muted state\n\n  }));\n};\n\nvar MessageInputWrapper$1 = /*#__PURE__*/React__default.forwardRef(MessageInputWrapper);\n\nvar FrozenNotification = function FrozenNotification() {\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-frozen-channel-notification\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-frozen-channel-notification__text\",\n    type: LabelTypography.CAPTION_2\n  }, stringSet.CHANNEL_FROZEN));\n};\n\nfunction OpenchannelConversationHeader(_a) {\n  var coverImage = _a.coverImage,\n      title = _a.title,\n      subTitle = _a.subTitle,\n      amIOperator = _a.amIOperator,\n      onActionClick = _a.onActionClick;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__left\"\n  }, coverImage ? /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-openchannel-conversation-header__left__cover-image\",\n    src: coverImage,\n    alt: \"channel cover image\",\n    width: \"32px\",\n    height: \"32px\"\n  }) : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__left__cover-image--icon\",\n    style: {\n      width: 32,\n      height: 32\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CHANNELS,\n    fillColor: IconColors.CONTENT,\n    width: \"18px\",\n    height: \"18px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-conversation-header__left__title\",\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, title || stringSet.NO_TITLE), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-conversation-header__left__sub-title\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, subTitle || stringSet.NO_TITLE)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__right\"\n  }, /*#__PURE__*/React__default.createElement(IconButton, {\n    className: \"sendbird-openchannel-conversation-header__right__trigger\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onActionClick\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: amIOperator ? IconTypes.INFO : IconTypes.MEMBERS,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }))));\n}\n\nvar copyToClipboard = function copyToClipboard(text) {\n  // @ts-ignore: Unreachable code error\n  if (window.clipboardData && window.clipboardData.setData) {\n    // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n    // @ts-ignore: Unreachable code error\n    return window.clipboardData.setData('Text', text);\n  }\n\n  if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n    var textarea = document.createElement('textarea');\n    textarea.textContent = text;\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n\n    document.body.appendChild(textarea);\n    textarea.select();\n\n    try {\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n    } catch (ex) {\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n\n  return false;\n};\n\nvar OpenChannelMessageStatusTypes = {\n  NONE: 'none',\n  PENDING: 'pending',\n  FAILED: 'failed',\n  CANCELED: 'canceled',\n  SUCCEEDED: 'succeeded'\n};\n\nvar getSenderFromMessage = function getSenderFromMessage(message) {\n  return message.sender || message._sender;\n};\n\nvar checkIsSent = function checkIsSent(status) {\n  return status === OpenChannelMessageStatusTypes.SUCCEEDED;\n};\n\nvar checkIsPending = function checkIsPending(status) {\n  return status === OpenChannelMessageStatusTypes.PENDING;\n};\n\nvar checkIsFailed = function checkIsFailed(status) {\n  return status === OpenChannelMessageStatusTypes.FAILED;\n};\n\nvar checkIsByMe = function checkIsByMe(message, userId) {\n  return getSenderFromMessage(message).userId === userId;\n};\n\nvar isFineCopy = function isFineCopy(_a) {\n  var message = _a.message;\n  return message.messageType === 'user' && message.message.length > 0;\n};\n\nvar isFineResend = function isFineResend(_a) {\n  var message = _a.message,\n      status = _a.status,\n      userId = _a.userId;\n  return checkIsByMe(message, userId) && checkIsFailed(status) && message.isResendable && message.isResendable();\n};\n\nvar isFineEdit = function isFineEdit(_a) {\n  var message = _a.message,\n      status = _a.status,\n      userId = _a.userId;\n  return checkIsByMe(message, userId) && checkIsSent(status);\n};\n\nvar isFineDelete = function isFineDelete(_a) {\n  var message = _a.message,\n      userId = _a.userId;\n  return checkIsByMe(message, userId);\n};\n\nvar showMenuTrigger = function showMenuTrigger(props) {\n  var message = props.message,\n      status = props.status,\n      userId = props.userId;\n\n  if (message.messageType === 'user') {\n    return isFineDelete({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineEdit({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineCopy({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineResend({\n      message: message,\n      status: status,\n      userId: userId\n    });\n  } else {\n    return isFineDelete({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineResend({\n      message: message,\n      status: status,\n      userId: userId\n    });\n  }\n};\n\nfunction OpenchannelUserMessage(_a) {\n  var className = _a.className,\n      message = _a.message,\n      userId = _a.userId,\n      resendMessage = _a.resendMessage,\n      disabled = _a.disabled,\n      showEdit = _a.showEdit,\n      showRemove = _a.showRemove,\n      chainTop = _a.chainTop,\n      status = _a.status;\n\n  if (!message || message.messageType !== 'user') {\n    return null;\n  } // hooks\n\n\n  var _b = useContext(LocalizationContext),\n      stringSet = _b.stringSet,\n      dateLocale = _b.dateLocale;\n\n  var _c = useContext(UserProfileContext),\n      disableUserProfile = _c.disableUserProfile,\n      renderUserProfile = _c.renderUserProfile;\n\n  var messageRef = useRef(null);\n  var avatarRef = useRef(null);\n  var contextMenuRef = useRef(null);\n\n  var _d = useState({}),\n      contextStyle = _d[0],\n      setContextStyle = _d[1]; // consts\n\n\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  var MemoizedMessageText = useMemo(function () {\n    return function () {\n      var splitMessage = message.message.split(/\\r/);\n      var matchedMessage = splitMessage.map(function (word) {\n        return word !== '' ? word : /*#__PURE__*/React__default.createElement(\"br\", null);\n      });\n\n      if (message.updatedAt > 0) {\n        matchedMessage.push( /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_2,\n          calssName: \"sendbird-openchannel-user-message-word\"\n        }, \" \" + stringSet.MESSAGE_EDITED + \" \"));\n      }\n\n      return matchedMessage;\n    };\n  }, [message, message.updatedAt]); // place context menu top depending clientHeight of message component\n\n  useEffect(function () {\n    var _a;\n\n    if (((_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) > 36) {\n      setContextStyle({\n        top: '8px '\n      });\n    } else {\n      setContextStyle({\n        top: '2px'\n      });\n    }\n  }, [window.innerWidth]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-user-message'], false).join(' '),\n    ref: messageRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-user-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__top\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__top__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__top__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__bottom\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__bottom__message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, MemoizedMessageText())), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-user-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-user-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__context-menu\",\n    ref: contextMenuRef,\n    style: contextStyle\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-user-message__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineCopy({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__copy\",\n        onClick: function onClick() {\n          copyToClipboard(message.message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__COPY), isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__edit\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showEdit(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__resend\",\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__delete\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\n\nfunction OpenChannelAdminMessage(_a) {\n  var className = _a.className,\n      message = _a.message;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-admin-message'], false).join(' ')\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-admin-message__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, message.message || ''));\n}\n\nvar URL_REG = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nvar createUrlTester = function createUrlTester(regexp) {\n  return function (text) {\n    return regexp.test(text);\n  };\n};\n\nvar checkOGIsEnalbed = function checkOGIsEnalbed(message) {\n  var ogMetaData = message.ogMetaData;\n\n  if (!ogMetaData) {\n    return false;\n  }\n\n  var url = ogMetaData.url;\n\n  if (!url) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction OpenchannelOGMessage(_a) {\n  var message = _a.message,\n      className = _a.className,\n      disabled = _a.disabled,\n      showEdit = _a.showEdit,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage,\n      chainTop = _a.chainTop,\n      status = _a.status,\n      userId = _a.userId;\n\n  if (!message || message.messageType !== 'user') {\n    return null;\n  }\n\n  var ogMetaData = message.ogMetaData;\n  var defaultImage = ogMetaData.defaultImage;\n\n  var _b = useContext(LocalizationContext),\n      stringSet = _b.stringSet,\n      dateLocale = _b.dateLocale;\n\n  var _c = useContext(UserProfileContext),\n      disableUserProfile = _c.disableUserProfile,\n      renderUserProfile = _c.renderUserProfile;\n\n  var _d = useState({}),\n      contextStyle = _d[0],\n      setContextStyle = _d[1];\n\n  var messageComponentRef = useRef(null);\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var isUrl = createUrlTester(URL_REG);\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  var MemoizedMessageText = useMemo(function () {\n    return function () {\n      var wordClassName = 'sendbird-openchannel-og-message--word';\n      var splitMessage = message.message.split(' ');\n      var matchedMessage = splitMessage.map(function (word) {\n        return isUrl(word) ? /*#__PURE__*/React__default.createElement(LinkLabel, {\n          key: uuidv4(),\n          className: [wordClassName, 'sendbird-openchannel-og-message--word--link'],\n          src: word,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.PRIMARY\n        }, word) : /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          className: wordClassName,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_1\n        }, word);\n      });\n\n      if (message.updatedAt > 0) {\n        matchedMessage.push( /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          className: wordClassName,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_2\n        }, stringSet.MESSAGE_EDITED));\n      }\n\n      return matchedMessage;\n    };\n  }, [message, message.updatedAt]);\n\n  var openLink = function openLink() {\n    if (checkOGIsEnalbed(message)) {\n      var url = ogMetaData.url;\n      window.open(url);\n    }\n  }; // place conxt menu top depending clientHeight of message component\n\n\n  useEffect(function () {\n    var _a;\n\n    if (((_a = messageComponentRef === null || messageComponentRef === void 0 ? void 0 : messageComponentRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) > 36) {\n      setContextStyle({\n        top: '8px '\n      });\n    } else {\n      setContextStyle({\n        top: '2px'\n      });\n    }\n  }, [window.innerWidth]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-og-message'], false).join(' '),\n    ref: messageComponentRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-og-message__top__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__description\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__description__message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, MemoizedMessageText()))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__context-menu\",\n    ref: contextMenuRef,\n    style: contextStyle\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-og-message__top__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineCopy({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__copy\",\n        onClick: function onClick() {\n          copyToClipboard(message.message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__COPY), isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__edit\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showEdit(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__resend\",\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__delete\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag\"\n  }, ogMetaData.url && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__url\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, ogMetaData.url), ogMetaData.title && /*#__PURE__*/React__default.createElement(LinkLabel, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__title\",\n    src: ogMetaData.url,\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.PRIMARY\n  }, ogMetaData.title), ogMetaData.description && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__description\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, ogMetaData.description), ogMetaData.url && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail\",\n    role: \"button\",\n    onClick: openLink,\n    onKeyDown: openLink,\n    tabIndex: 0\n  }, defaultImage && /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image\",\n    url: defaultImage.url || '',\n    alt: defaultImage.alt || '',\n    height: \"189px\",\n    defaultComponent: /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image--placeholder\"\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: IconTypes.THUMBNAIL_NONE,\n      width: \"56px\",\n      height: \"56px\"\n    }))\n  }))), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-og-message__top__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-og-message__top__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))));\n}\n\nvar SUPPORTING_TYPES = {\n  IMAGE: 'IMAGE',\n  VIDEO: 'VIDEO',\n  UNSUPPORTED: 'UNSUPPORTED'\n};\nvar SUPPORTED_MIMES$1 = {\n  IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'],\n  VIDEO: ['video/mpeg', 'video/ogg', 'video/webm', 'video/mp4']\n};\n\nvar getSupportingFileType = function getSupportingFileType(type) {\n  if (SUPPORTED_MIMES$1.IMAGE.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.IMAGE;\n  }\n\n  if (SUPPORTED_MIMES$1.VIDEO.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.VIDEO;\n  }\n\n  return SUPPORTING_TYPES.UNSUPPORTED;\n};\n\nfunction OpenchannelThumbnailMessage(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      disabled = _a.disabled,\n      userId = _a.userId,\n      status = _a.status,\n      chainTop = _a.chainTop,\n      _onClick = _a.onClick,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage;\n  var type = message.type,\n      url = message.url,\n      localUrl = message.localUrl,\n      thumbnails = message.thumbnails;\n  var thumbnailUrl = thumbnails && thumbnails.length > 0 && thumbnails[0].url || null;\n\n  var _c = useContext(LocalizationContext),\n      stringSet = _c.stringSet,\n      dateLocale = _c.dateLocale;\n\n  var _d = useContext(UserProfileContext),\n      disableUserProfile = _d.disableUserProfile,\n      renderUserProfile = _d.renderUserProfile;\n\n  var _e = useState(360),\n      messageWidth = _e[0],\n      setMessageWidth = _e[1];\n\n  var messageRef = useRef(null);\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var memorizedThumbnailPlaceHolder = useMemo(function () {\n    return function (type) {\n      return function (_a) {\n        var style = _a.style;\n        return (\n          /*#__PURE__*/\n          // eslint-disable-line\n          React__default.createElement(\"div\", {\n            style: style\n          }, /*#__PURE__*/React__default.createElement(Icon, {\n            type: type,\n            fillColor: IconColors.ON_BACKGROUND_2,\n            width: \"56px\",\n            height: \"56px\"\n          }))\n        );\n      };\n    };\n  }, []);\n  var isByMe = checkIsByMe(message, userId);\n  var isMessageSent = checkIsSent(status);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  useEffect(function () {\n    var _a;\n\n    var thumbnailWidth = ((_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth) - 80;\n    setMessageWidth(thumbnailWidth > 360 ? 360 : thumbnailWidth);\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-thumbnail-message'], false).join(' '),\n    ref: messageRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-thumbnail-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-thumbnail-message__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-thumbnail-message__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap\",\n    role: \"button\",\n    onClick: function onClick() {\n      if (isMessageSent) {\n        _onClick(true);\n      }\n    },\n    onKeyDown: function onKeyDown() {\n      if (isMessageSent) {\n        _onClick(true);\n      }\n    },\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__overlay\"\n  }), (_b = {}, _b[SUPPORTING_TYPES.VIDEO] = url || localUrl ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\"\n  }, thumbnailUrl ? /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\",\n    url: thumbnailUrl,\n    width: messageWidth,\n    height: \"270px\",\n    alt: \"image\",\n    placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PLAY)\n  }) : /*#__PURE__*/React__default.createElement(\"video\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__video\"\n  }, /*#__PURE__*/React__default.createElement(\"source\", {\n    src: url || localUrl,\n    type: type\n  })), /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__icon\",\n    type: IconTypes.PLAY,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  })) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video--icon\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b[SUPPORTING_TYPES.IMAGE] = url || localUrl ? /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image\",\n    url: thumbnailUrl || url || localUrl,\n    alt: \"image\",\n    width: messageWidth,\n    height: \"270px\",\n    placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PHOTO)\n  }) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image--icon\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b[SUPPORTING_TYPES.UNSUPPORTED] = /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__unknown\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b)[getSupportingFileType(type)])), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__context-menu\",\n    ref: contextMenuRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-thumbnail-message__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: toggleDropdown\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\n\nvar checkFileType = function checkFileType(fileUrl) {\n  var audioFile = /(\\.mp3)$/i;\n  var gifFile = /(\\.gif)$/i;\n\n  if (audioFile.test(fileUrl)) {\n    return IconTypes.FILE_AUDIO;\n  }\n\n  if (gifFile.test(fileUrl)) {\n    return IconTypes.GIF;\n  }\n\n  return IconTypes.FILE_DOCUMENT;\n};\n\nvar truncate = function truncate(fullStr, strLen) {\n  if (fullStr === null || fullStr === undefined) return '';\n  if (fullStr.length <= strLen) return fullStr;\n  var separator = '...';\n  var sepLen = separator.length;\n  var charsToShow = strLen - sepLen;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n\nfunction OpenchannelFileMessage(_a) {\n  var className = _a.className,\n      message = _a.message,\n      userId = _a.userId,\n      disabled = _a.disabled,\n      chainTop = _a.chainTop,\n      status = _a.status,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage;\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n\n  var _b = useContext(LocalizationContext),\n      stringSet = _b.stringSet,\n      dateLocale = _b.dateLocale;\n\n  var _c = useContext(UserProfileContext),\n      disableUserProfile = _c.disableUserProfile,\n      renderUserProfile = _c.renderUserProfile;\n\n  var openFileUrl = function openFileUrl() {\n    window.open(message.url);\n  };\n\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-file-message'], false).join(' ')\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-file-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-file-message__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-file-message__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__body\"\n  }, checkFileType(message.url) && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__body__icon\",\n    type: checkFileType(message.url),\n    fillColor: IconColors.PRIMARY,\n    width: \"48px\",\n    height: \"48px\"\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-openchannel-file-message__right__body__file-name\",\n    onClick: openFileUrl\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, truncate(message.name || message.url, 40)))), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__context-menu\",\n    ref: contextMenuRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-file-message__context-menu__icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: toggleDropdown\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\n\nfunction RemoveMessageModal(_a) {\n  var onCloseModal = _a.onCloseModal,\n      onDeleteMessage = _a.onDeleteMessage;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    onCancel: onCloseModal,\n    onSubmit: onDeleteMessage,\n    submitText: \"Delete\",\n    titleText: stringSet.MODAL__DELETE_MESSAGE__TITLE\n  });\n} // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\n\n\nvar SUPPORTED_MIMES = {\n  IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/svg+xml', 'image/webp' // not supported in IE\n  ],\n  VIDEO: ['video/mpeg', 'video/ogg', 'video/webm', 'video/mp4']\n};\n\nvar isImage = function isImage(type) {\n  return SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0;\n};\n\nvar isVideo = function isVideo(type) {\n  return SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0;\n};\n\nvar MessageTypes = {\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n  FILE: 'FILE',\n  THUMBNAIL: 'THUMBNAIL',\n  OG: 'OG',\n  UNKNOWN: 'UNKNOWN'\n};\nvar SendingMessageStatus = {\n  NONE: 'none',\n  SUCCEEDED: 'succeeded',\n  FAILED: 'failed',\n  PENDING: 'pending'\n};\n\nvar getMessageType = function getMessageType(message) {\n  if (message.isUserMessage && message.isUserMessage() || message.messageType === 'user') {\n    return message.ogMetaData ? MessageTypes.OG : MessageTypes.USER;\n  }\n\n  if (message.isAdminMessage && message.isAdminMessage()) {\n    return MessageTypes.ADMIN;\n  }\n\n  if (message.messageType === 'file') {\n    return isImage(message.type) || isVideo(message.type) ? MessageTypes.THUMBNAIL : MessageTypes.FILE;\n  }\n\n  return MessageTypes.UNKNOWN;\n};\n\nfunction MessageHoc(_a) {\n  var _b;\n\n  var message = _a.message,\n      userId = _a.userId,\n      disabled = _a.disabled,\n      editDisabled = _a.editDisabled,\n      hasSeparator = _a.hasSeparator,\n      channel = _a.channel,\n      renderCustomMessage = _a.renderCustomMessage,\n      deleteMessage = _a.deleteMessage,\n      updateMessage = _a.updateMessage,\n      resendMessage = _a.resendMessage,\n      status = _a.status,\n      chainTop = _a.chainTop,\n      chainBottom = _a.chainBottom;\n  var sender = null;\n\n  if (message.messageType !== 'admin') {\n    sender = message.sender;\n  }\n\n  var dateLocale = useContext(LocalizationContext).dateLocale;\n  var RenderedMessage = useMemo(function () {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, channel, chainTop, chainBottom);\n    }\n\n    return null;\n  }, [message, renderCustomMessage]);\n\n  var _c = useState(false),\n      showEdit = _c[0],\n      setShowEdit = _c[1];\n\n  var _d = useState(false),\n      showRemove = _d[0],\n      setShowRemove = _d[1];\n\n  var _e = useState(false),\n      showFileViewer = _e[0],\n      setShowFileViewer = _e[1];\n\n  var editMessageInputRef = useRef(null);\n  var isByMe = false;\n\n  if (sender && message.messageType !== 'admin') {\n    // pending and failed messages are by me\n    isByMe = userId === sender.userId || message.requestState === SendingMessageStatus.PENDING || message.requestState === SendingMessageStatus.FAILED;\n  }\n\n  if (RenderedMessage) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\"\n    }, /*#__PURE__*/React__default.createElement(RenderedMessage, {\n      message: message\n    }));\n  }\n\n  if (message.messageType === 'user' && showEdit) {\n    return /*#__PURE__*/React__default.createElement(MessageInput, {\n      isEdit: true,\n      disabled: editDisabled,\n      ref: editMessageInputRef,\n      name: message.messageId,\n      onSendMessage: updateMessage,\n      onCancelEdit: function onCancelEdit() {\n        setShowEdit(false);\n      },\n      value: message.message\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\"\n  }, hasSeparator && /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message.createdAt, 'MMMM dd, yyyy', {\n    locale: dateLocale\n  }))), (_b = {}, _b[MessageTypes.ADMIN] = function () {\n    if (message.messageType === 'admin') {\n      return /*#__PURE__*/React__default.createElement(OpenChannelAdminMessage, {\n        message: message\n      });\n    }\n  }(), _b[MessageTypes.FILE] = function () {\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelFileMessage, {\n        message: message,\n        disabled: disabled,\n        userId: userId,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.OG] = function () {\n    if (message.messageType === 'user') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelOGMessage, {\n        message: message,\n        status: status,\n        userId: userId,\n        showEdit: setShowEdit,\n        disabled: disabled,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.THUMBNAIL] = function () {\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelThumbnailMessage, {\n        message: message,\n        disabled: disabled,\n        userId: userId,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        onClick: setShowFileViewer,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.USER] = function () {\n    if (message.messageType === 'user') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelUserMessage, {\n        message: message,\n        userId: userId,\n        disabled: disabled,\n        showEdit: setShowEdit,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.UNKNOWN] = function () {\n    return; // return (\n    //   <OpenChannelUnknownMessage message={message} />\n    // );\n  }(), _b)[getMessageType(message)], showRemove && /*#__PURE__*/React__default.createElement(RemoveMessageModal, {\n    onCloseModal: function onCloseModal() {\n      return setShowRemove(false);\n    },\n    onDeleteMessage: function onDeleteMessage() {\n      if (message.messageType !== 'admin') {\n        deleteMessage(message);\n      }\n    }\n  }), showFileViewer && message.messageType === 'file' && /*#__PURE__*/React__default.createElement(FileViewer, {\n    onClose: function onClose() {\n      return setShowFileViewer(false);\n    },\n    message: message,\n    onDelete: function onDelete() {\n      return deleteMessage(message);\n    },\n    isByMe: isByMe\n  }));\n}\n\nfunction OpenchannelConversationScroll(_a, ref) {\n  var _b = _a.useMessageGrouping,\n      useMessageGrouping = _b === void 0 ? true : _b,\n      openchannel = _a.openchannel,\n      user = _a.user,\n      allMessages = _a.allMessages,\n      _c = _a.isOnline,\n      isOnline = _c === void 0 ? true : _c,\n      hasMore = _a.hasMore,\n      onScroll = _a.onScroll,\n      renderCustomMessage = _a.renderCustomMessage,\n      updateMessage = _a.updateMessage,\n      deleteMessage = _a.deleteMessage,\n      resendMessage = _a.resendMessage;\n  var scrollRef = ref || useRef(null);\n\n  var _d = useState(false),\n      showScrollDownButton = _d[0],\n      setShowScrollDownButton = _d[1];\n\n  var handleOnScroll = function handleOnScroll(e) {\n    var element = e.target;\n    var scrollTop = element.scrollTop,\n        scrollHeight = element.scrollHeight,\n        clientHeight = element.clientHeight;\n\n    if (scrollHeight > scrollTop + clientHeight && window.navigator.userAgent.indexOf('MSIE ') < 0 // don't show button in IE\n    ) {\n      setShowScrollDownButton(true);\n    } else {\n      setShowScrollDownButton(false);\n    }\n\n    if (!hasMore) {\n      return;\n    }\n\n    if (scrollTop === 0) {\n      var nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n      var first_1 = nodes && nodes[0];\n      onScroll(function () {\n        try {\n          first_1.scrollIntoView();\n        } catch (error) {}\n      });\n    }\n  };\n\n  var scrollToBottom = function scrollToBottom() {\n    if (scrollRef && scrollRef.current) {\n      scrollRef.current.scrollTo(0, scrollRef.current.scrollHeight);\n      setShowScrollDownButton(false);\n    }\n  };\n\n  var hasMessage = useMemo(function () {\n    return allMessages.length > 0;\n  }, [allMessages.length]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll\",\n    onScroll: handleOnScroll,\n    ref: scrollRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__padding\"\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__item-container\" + (hasMessage ? '' : '--no-messages')\n  }, hasMessage ? allMessages.map(function (message, index) {\n    var status;\n\n    if (message.messageType !== 'admin') {\n      status = message.sendingStatus;\n    }\n\n    var previousMessage = allMessages[index - 1];\n    var nextMessage = allMessages[index - 1];\n    var previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n    var currentCreatedAt = message.createdAt; // https://stackoverflow.com/a/41855608\n\n    var hasSeparator = !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));\n\n    var _a = useMessageGrouping ? compareMessagesForGrouping(previousMessage, message, nextMessage) : [false, false],\n        chainTop = _a[0],\n        chainBottom = _a[1];\n\n    return /*#__PURE__*/React__default.createElement(MessageHoc, {\n      renderCustomMessage: renderCustomMessage,\n      channel: openchannel,\n      key: message.messageId,\n      message: message,\n      status: status,\n      userId: user.userId,\n      disabled: !isOnline,\n      editDisabled: openchannel.isFrozen,\n      hasSeparator: hasSeparator,\n      chainTop: chainTop,\n      chainBottom: chainBottom,\n      deleteMessage: deleteMessage,\n      updateMessage: updateMessage,\n      resendMessage: resendMessage\n    });\n  }) : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    className: \"sendbird-openchannel-conversation-scroll__container__place-holder\",\n    type: PlaceHolderTypes.NO_MESSAGES\n  })), showScrollDownButton && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__scroll-bottom-button\",\n    onClick: scrollToBottom,\n    onKeyDown: scrollToBottom,\n    tabIndex: 0,\n    role: \"button\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    width: \"24px\",\n    height: \"24px\",\n    type: IconTypes.CHEVRON_DOWN,\n    fillColor: IconColors.CONTENT\n  }))));\n}\n\nvar OpenchannelConversationScroll$1 = /*#__PURE__*/React__default.forwardRef(OpenchannelConversationScroll);\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nvar RESET_MESSAGES = 'RESET_MESSAGES';\nvar GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nvar GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nvar GET_PREV_MESSAGES_FAIL = 'GET_PREV_MESSAGES_FAIL';\nvar SENDING_MESSAGE_FAILED = 'SENDING_MESSAGE_FAILED';\nvar SENDING_MESSAGE_SUCCEEDED = 'SENDING_MESSAGE_SUCCEEDED';\nvar SENDING_MESSAGE_START = 'SENDING_MESSAGE_START';\nvar RESENDING_MESSAGE_START = 'RESENDING_MESSAGE_START';\nvar FETCH_PARTICIPANT_LIST = 'FETCH_PARTICIPANT_LIST';\nvar FETCH_BANNED_USER_LIST = 'FETCH_BANNED_USER_LIST';\nvar FETCH_MUTED_USER_LIST = 'FETCH_MUTED_USER_LIST';\nvar TRIM_MESSAGE_LIST = 'TRIM_MESSAGE_LIST'; // event handlers\n\nvar ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nvar ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nvar ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nvar ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nvar ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED';\nvar ON_USER_ENTERED = 'ON_USER_ENTERED';\nvar ON_USER_EXITED = 'ON_USER_EXITED';\nvar ON_USER_MUTED = 'ON_USER_MUTED';\nvar ON_USER_UNMUTED = 'ON_USER_UNMUTED';\nvar ON_USER_BANNED = 'ON_USER_BANNED';\nvar ON_USER_UNBANNED = 'ON_USER_UNBANNED';\nvar ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nvar ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nvar ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nvar ON_META_DATA_CREATED = 'ON_META_DATA_CREATED';\nvar ON_META_DATA_UPDATED = 'ON_META_DATA_UPDATED';\nvar ON_META_DATA_DELETED = 'ON_META_DATA_DELETED';\nvar ON_META_COUNTERS_CREATED = 'ON_META_COUNTERS_CREATED';\nvar ON_META_COUNTERS_UPDATED = 'ON_META_COUNTERS_UPDATED';\nvar ON_META_COUNTERS_DELETED = 'ON_META_COUNTERS_DELETED';\nvar ON_MENTION_RECEIVED = 'ON_MENTION_RECEIVED';\nvar messageActionTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SET_CURRENT_CHANNEL: SET_CURRENT_CHANNEL,\n  SET_CHANNEL_INVALID: SET_CHANNEL_INVALID,\n  RESET_MESSAGES: RESET_MESSAGES,\n  GET_PREV_MESSAGES_START: GET_PREV_MESSAGES_START,\n  GET_PREV_MESSAGES_SUCESS: GET_PREV_MESSAGES_SUCESS,\n  GET_PREV_MESSAGES_FAIL: GET_PREV_MESSAGES_FAIL,\n  SENDING_MESSAGE_FAILED: SENDING_MESSAGE_FAILED,\n  SENDING_MESSAGE_SUCCEEDED: SENDING_MESSAGE_SUCCEEDED,\n  SENDING_MESSAGE_START: SENDING_MESSAGE_START,\n  RESENDING_MESSAGE_START: RESENDING_MESSAGE_START,\n  FETCH_PARTICIPANT_LIST: FETCH_PARTICIPANT_LIST,\n  FETCH_BANNED_USER_LIST: FETCH_BANNED_USER_LIST,\n  FETCH_MUTED_USER_LIST: FETCH_MUTED_USER_LIST,\n  TRIM_MESSAGE_LIST: TRIM_MESSAGE_LIST,\n  ON_MESSAGE_RECEIVED: ON_MESSAGE_RECEIVED,\n  ON_MESSAGE_UPDATED: ON_MESSAGE_UPDATED,\n  ON_MESSAGE_DELETED: ON_MESSAGE_DELETED,\n  ON_MESSAGE_DELETED_BY_REQ_ID: ON_MESSAGE_DELETED_BY_REQ_ID,\n  ON_OPERATOR_UPDATED: ON_OPERATOR_UPDATED,\n  ON_USER_ENTERED: ON_USER_ENTERED,\n  ON_USER_EXITED: ON_USER_EXITED,\n  ON_USER_MUTED: ON_USER_MUTED,\n  ON_USER_UNMUTED: ON_USER_UNMUTED,\n  ON_USER_BANNED: ON_USER_BANNED,\n  ON_USER_UNBANNED: ON_USER_UNBANNED,\n  ON_CHANNEL_FROZEN: ON_CHANNEL_FROZEN,\n  ON_CHANNEL_UNFROZEN: ON_CHANNEL_UNFROZEN,\n  ON_CHANNEL_CHANGED: ON_CHANNEL_CHANGED,\n  ON_META_DATA_CREATED: ON_META_DATA_CREATED,\n  ON_META_DATA_UPDATED: ON_META_DATA_UPDATED,\n  ON_META_DATA_DELETED: ON_META_DATA_DELETED,\n  ON_META_COUNTERS_CREATED: ON_META_COUNTERS_CREATED,\n  ON_META_COUNTERS_UPDATED: ON_META_COUNTERS_UPDATED,\n  ON_META_COUNTERS_DELETED: ON_META_COUNTERS_DELETED,\n  ON_MENTION_RECEIVED: ON_MENTION_RECEIVED\n});\n\nfunction reducer(state, action) {\n  var _a;\n\n  switch (action.type) {\n    case RESET_MESSAGES:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: []\n        });\n      }\n\n    case SET_CURRENT_CHANNEL:\n      {\n        var gottenChannel = action.payload;\n        var operators = gottenChannel.operators;\n\n        if (!state.isInvalid && state.currentOpenChannel && state.currentOpenChannel.url && state.currentOpenChannel.url === gottenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          currentOpenChannel: gottenChannel,\n          isInvalid: false,\n          operators: operators,\n          participants: operators,\n          bannedParticipantIds: [],\n          mutedParticipantIds: []\n        });\n      }\n\n    case SET_CHANNEL_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: true\n        });\n      }\n\n    case GET_PREV_MESSAGES_START:\n      {\n        return __assign(__assign({}, state), {\n          loading: true\n        });\n      }\n\n    case GET_PREV_MESSAGES_SUCESS:\n    case GET_PREV_MESSAGES_FAIL:\n      {\n        var isFailed = action.type === GET_PREV_MESSAGES_FAIL;\n        var _b = action.payload,\n            _c = _b.currentOpenChannel,\n            currentOpenChannel = _c === void 0 ? {} : _c,\n            _d = _b.messages,\n            messages = _d === void 0 ? [] : _d,\n            hasMore = _b.hasMore,\n            lastMessageTimestamp = _b.lastMessageTimestamp;\n        var actionChannelUrl = currentOpenChannel.url;\n        var receivedMessages_1 = isFailed ? [] : messages;\n\n        var _hasMore = isFailed ? false : hasMore;\n\n        var _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;\n\n        var stateChannel = state.currentOpenChannel;\n        var stateChannelUrl = stateChannel.url;\n\n        if (actionChannelUrl !== stateChannelUrl) {\n          return state;\n        }\n\n        var filteredAllMessages = state.allMessages.filter(function (message) {\n          return !receivedMessages_1.find(function (_a) {\n            var messageId = _a.messageId;\n            return compareIds(messageId, message.messageId);\n          });\n        });\n        return __assign(__assign({}, state), {\n          loading: false,\n          initialized: true,\n          hasMore: _hasMore,\n          lastMessageTimestamp: _lastMessageTimestamp,\n          allMessages: __spreadArray(__spreadArray([], receivedMessages_1, true), filteredAllMessages, true)\n        });\n      }\n\n    case SENDING_MESSAGE_START:\n      {\n        var _e = action.payload,\n            message = _e.message,\n            channel = _e.channel;\n\n        if (channel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), [__assign({}, message)], false)\n        });\n      }\n\n    case SENDING_MESSAGE_SUCCEEDED:\n      {\n        var sentMessage_1 = action.payload;\n        var newMessages = state.allMessages.map(function (m) {\n          return compareIds(m.reqId, sentMessage_1.reqId) ? sentMessage_1 : m;\n        });\n        return __assign(__assign({}, state), {\n          allMessages: newMessages\n        });\n      }\n\n    case SENDING_MESSAGE_FAILED:\n      {\n        var sentMessage_2 = action.payload;\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, sentMessage_2.reqId) ? sentMessage_2 : m;\n          })\n        });\n      }\n\n    case TRIM_MESSAGE_LIST:\n      {\n        var allMessages = state.allMessages;\n        var experimentalMessageLimit = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.experimentalMessageLimit;\n\n        if (experimentalMessageLimit && experimentalMessageLimit > 0 && (allMessages === null || allMessages === void 0 ? void 0 : allMessages.length) > experimentalMessageLimit) {\n          var sliceAt = allMessages.length - experimentalMessageLimit;\n          return __assign(__assign({}, state), {\n            allMessages: allMessages.slice(sliceAt)\n          });\n        }\n\n        return state;\n      }\n\n    case RESENDING_MESSAGE_START:\n      {\n        var eventedChannel = action.payload.channel;\n        var resentMessage_1 = action.payload.message;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, resentMessage_1.reqId) ? resentMessage_1 : m;\n          })\n        });\n      }\n\n    case FETCH_PARTICIPANT_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedParticipantList = action.payload.users;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          participants: __spreadArray(__spreadArray([], state.participants, true), fetchedParticipantList, true)\n        });\n      }\n\n    case FETCH_BANNED_USER_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedBannedUserList = action.payload.users;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url || !fetchedBannedUserList.every(function (user) {\n          return typeof user.userId === 'string';\n        })) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), fetchedBannedUserList.map(function (user) {\n            return user.userId;\n          }), true)\n        });\n      }\n\n    case FETCH_MUTED_USER_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedMutedUserList = action.payload.users;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url || !fetchedMutedUserList.every(function (user) {\n          return typeof user.userId === 'string';\n        })) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), fetchedMutedUserList.map(function (user) {\n            return user.userId;\n          }), true)\n        });\n      }\n    // events\n\n    case ON_MESSAGE_RECEIVED:\n      {\n        var eventedChannel = action.payload.channel;\n        var receivedMessage = action.payload.message;\n        var currentOpenChannel = state.currentOpenChannel;\n\n        if (!compareIds(eventedChannel.url, currentOpenChannel.url) || !(state.allMessages.map(function (message) {\n          return message.messageId;\n        }).indexOf(receivedMessage.messageId) < 0)) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), [receivedMessage], false)\n        });\n      }\n\n    case ON_MESSAGE_UPDATED:\n      {\n        var eventedChannel = action.payload.channel;\n        var updatedMessage_1 = action.payload.message;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (message) {\n            return message.isIdentical(updatedMessage_1) ? updatedMessage_1 : message;\n          })\n        });\n      }\n\n    case ON_MESSAGE_DELETED:\n      {\n        var eventedChannel = action.payload.channel;\n        var deletedMessageId_1 = action.payload.messageId;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.filter(function (message) {\n            return !compareIds(message.messageId, deletedMessageId_1);\n          })\n        });\n      }\n\n    case ON_MESSAGE_DELETED_BY_REQ_ID:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.filter(function (m) {\n            return !compareIds(m.reqId, action.payload);\n          })\n        });\n      }\n\n    case ON_OPERATOR_UPDATED:\n      {\n        var eventedChannel = action.payload.channel;\n        var updatedOperators = action.payload.operators;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          currentOpenChannel: __assign(__assign({}, state.currentOpenChannel), {\n            operators: updatedOperators\n          }),\n          operators: updatedOperators\n        });\n      }\n\n    case ON_USER_ENTERED:\n      {\n        var eventedChannel = action.payload.channel;\n        var enteredUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          participants: __spreadArray(__spreadArray([], state.participants, true), [enteredUser], false)\n        });\n      }\n\n    case ON_USER_EXITED:\n      {\n        var eventedChannel = action.payload.channel;\n        var exitedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          participants: state.participants.filter(function (participant) {\n            return !compareIds(participant.userId, exitedUser_1.userId);\n          })\n        });\n      }\n\n    case ON_USER_MUTED:\n      {\n        var eventedChannel = action.payload.channel;\n        var mutedUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: __spreadArray(__spreadArray([], state.mutedParticipantIds, true), [mutedUser.userId], false)\n        });\n      }\n\n    case ON_USER_UNMUTED:\n      {\n        var eventedChannel = action.payload.channel;\n        var unmutedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.mutedParticipantIds.indexOf(unmutedUser_1.userId) < 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: state.mutedParticipantIds.filter(function (userId) {\n            return userId !== unmutedUser_1.userId;\n          })\n        });\n      }\n\n    case ON_USER_BANNED:\n      {\n        var eventedChannel = action.payload.channel;\n        var bannedUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.bannedParticipantIds.indexOf(bannedUser.userId) >= 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), [bannedUser.userId], false)\n        });\n      }\n\n    case ON_USER_UNBANNED:\n      {\n        var eventedChannel = action.payload.channel;\n        var unbannedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.bannedParticipantIds.indexOf(unbannedUser_1.userId) < 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: state.bannedParticipantIds.filter(function (userId) {\n            return userId !== unbannedUser_1.userId;\n          })\n        });\n      }\n\n    case ON_CHANNEL_FROZEN:\n      {\n        var frozenChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== frozenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          frozen: true\n        });\n      }\n\n    case ON_CHANNEL_UNFROZEN:\n      {\n        var unfrozenChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== unfrozenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          frozen: false\n        });\n      }\n\n    case ON_CHANNEL_CHANGED:\n      {\n        var changedChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== changedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          currentOpenChannel: changedChannel\n        });\n      }\n\n    case ON_META_DATA_CREATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const createdMetaData = action.payload.metaData;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_DATA_UPDATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const updatedMetaData = action.payload.metaData;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_DATA_DELETED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const deletedMetaDataKeys = action.payload.metaDataKeys;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_COUNTERS_CREATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const createdMetaCounter = action.payload.metaCounter;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_COUNTERS_UPDATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const updatedMetaCounter = action.payload.metaCounter;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_COUNTERS_DELETED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const deletedMetaCounterKeys = action.payload.metaCounterKeys;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_MENTION_RECEIVED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const mentionedMessage = action.payload.message;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}\n\nvar initialState = {\n  allMessages: [],\n  loading: false,\n  initialized: false,\n  currentOpenChannel: null,\n  isInvalid: false,\n  hasMore: false,\n  lastMessageTimestamp: 0,\n  frozen: false,\n  operators: [],\n  participants: [],\n  bannedParticipantIds: [],\n  mutedParticipantIds: []\n};\n\nfunction useSetChannel(_a, _b) {\n  var channelUrl = _a.channelUrl,\n      sdkInit = _a.sdkInit,\n      fetchingParticipants = _a.fetchingParticipants;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && sdk.OpenChannel) {\n      logger.info('OpenChannel | useSetChannel fetching channel', channelUrl);\n      sdk.OpenChannel.getChannel(channelUrl, function (openChannel, error) {\n        if (!error) {\n          logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: openChannel\n          });\n          openChannel.enter(function (_, error) {\n            if (error) {\n              logger.warning('OpenChannel | useSetChannel enter channel failed', {\n                channelUrl: channelUrl,\n                error: error\n              });\n              messagesDispatcher({\n                type: SET_CHANNEL_INVALID,\n                payload: null\n              });\n            }\n\n            if (fetchingParticipants) {\n              // fetch participants, banned participantIds, muted participantIds\n              var participantListQuery = openChannel.createParticipantListQuery();\n              var bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n              var mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n              fetchWithListQuery(participantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_PARTICIPANT_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n              fetchWithListQuery(bannedParticipantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_BANNED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n              fetchWithListQuery(mutedParticipantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_MUTED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useSetChannel fetching channel failed', {\n            channelUrl: channelUrl,\n            error: error\n          });\n          messagesDispatcher({\n            type: SET_CHANNEL_INVALID,\n            payload: null\n          });\n        }\n      }); // .then((openChannel) => {\n      //   logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CURRENT_CHANNEL,\n      //     payload: openChannel,\n      //   });\n      //   openChannel.enter((_, error) => {\n      //     if (error) {\n      //       logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n      //       messagesDispatcher({\n      //         type: messageActionTypes.SET_CHANNEL_INVALID,\n      //       });\n      //     }\n      //     if (fetchingParticipants) {\n      //       // fetch participants, banned participantIds, muted participantIds\n      //       const participantListQuery = openChannel.createParticipantListQuery();\n      //       const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n      //       const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n      //       utils.fetchWithListQuery(\n      //         participantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         bannedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_BANNED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         mutedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_MUTED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //     }\n      //   });\n      // })\n      // .catch((error) => {\n      //   logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CHANNEL_INVALID,\n      //   });\n      // });\n    }\n  }, [channelUrl, sdkInit, fetchingParticipants]);\n}\n\nfunction useHandleChannelEvents(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      checkScrollBottom = _a.checkScrollBottom;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    var messageReceiverId = uuidv4();\n\n    if (currentOpenChannel && currentOpenChannel.url && sdk && sdk.ChannelHandler) {\n      var ChannelHandler = new sdk.ChannelHandler();\n      logger.info('OpenChannel | useHandleChannelEvents: Setup evnet handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = function (channel, message) {\n        var scrollToEnd = checkScrollBottom();\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageReceived', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_RECEIVED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n\n        if (scrollToEnd) {\n          try {\n            setTimeout(function () {\n              scrollIntoLast();\n            });\n          } catch (error) {\n            logger.warning('OpenChannel | onMessageReceived | scroll to end failed');\n          }\n        }\n      };\n\n      ChannelHandler.onMessageUpdated = function (channel, message) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageUpdated', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      };\n\n      ChannelHandler.onMessageDeleted = function (channel, messageId) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageDeleted', {\n          channelUrl: channelUrl,\n          messageId: messageId\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: {\n            channel: channel,\n            messageId: messageId\n          }\n        });\n      };\n\n      ChannelHandler.onOperatorUpdated = function (channel, operators) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onOperatorUpdated', {\n          channelUrl: channelUrl,\n          operators: operators\n        });\n        messagesDispatcher({\n          type: ON_OPERATOR_UPDATED,\n          payload: {\n            channel: channel,\n            operators: operators\n          }\n        });\n      };\n\n      ChannelHandler.onUserEntered = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserEntered', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_ENTERED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserExited = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserExited', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_EXITED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserMuted = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserMuted', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_MUTED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserUnmuted = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnmuted', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_UNMUTED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserBanned = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserBanned', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_BANNED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserUnbanned = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnbanned', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_UNBANNED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onChannelFrozen = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelFrozen', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_FROZEN,\n          payload: channel\n        });\n      };\n\n      ChannelHandler.onChannelUnfrozen = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelUnfrozen', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_UNFROZEN,\n          payload: channel\n        });\n      };\n\n      ChannelHandler.onChannelChanged = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelChanged', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_CHANGED,\n          payload: channel\n        });\n      };\n\n      ChannelHandler.onMetaDataCreated = function (channel, metaData) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataCreated', {\n          channelUrl: channelUrl,\n          metaData: metaData\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_CREATED,\n          payload: {\n            channel: channel,\n            metaData: metaData\n          }\n        });\n      };\n\n      ChannelHandler.onMetaDataUpdated = function (channel, metaData) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataUpdated', {\n          channelUrl: channelUrl,\n          metaData: metaData\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_UPDATED,\n          payload: {\n            channel: channel,\n            metaData: metaData\n          }\n        });\n      };\n\n      ChannelHandler.onMetaDataDeleted = function (channel, metaDataKeys) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataDeleted', {\n          channelUrl: channelUrl,\n          metaDataKeys: metaDataKeys\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_DELETED,\n          payload: {\n            channel: channel,\n            metaDataKeys: metaDataKeys\n          }\n        });\n      };\n\n      ChannelHandler.onMetaCountersCreated = function (channel, metaCounter) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersCreated', {\n          channelUrl: channelUrl,\n          metaCounter: metaCounter\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_CREATED,\n          payload: {\n            channel: channel,\n            metaCounter: metaCounter\n          }\n        });\n      };\n\n      ChannelHandler.onMetaCountersUpdated = function (channel, metaCounter) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersUpdated', {\n          channelUrl: channelUrl,\n          metaCounter: metaCounter\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_UPDATED,\n          payload: {\n            channel: channel,\n            metaCounter: metaCounter\n          }\n        });\n      };\n\n      ChannelHandler.onMetaCountersDeleted = function (channel, metaCounterKeys) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersDeleted', {\n          channelUrl: channelUrl,\n          metaCounterKeys: metaCounterKeys\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_DELETED,\n          payload: {\n            channel: channel,\n            metaCounterKeys: metaCounterKeys\n          }\n        });\n      };\n\n      ChannelHandler.onMentionReceived = function (channel, message) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMentionReceived', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MENTION_RECEIVED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      };\n\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return function () {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('OpenChannel | useHandleChannelEvents: Removing message receiver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    };\n  }, [currentOpenChannel]);\n}\n\nfunction useInitialMessagesFetch(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      userFilledMessageListParams = _a.userFilledMessageListParams;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    logger.info('OpenChannel | useInitialMessagesFetch: Setup started', currentOpenChannel);\n    messagesDispatcher({\n      type: RESET_MESSAGES,\n      payload: null\n    });\n\n    if (sdk && sdk.MessageListParams && currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {\n      var messageListParams_1 = new sdk.MessageListParams();\n      messageListParams_1.prevResultSize = 30;\n      messageListParams_1.isInclusive = true;\n      messageListParams_1.includeReplies = false;\n      messageListParams_1.includeReactions = false;\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach(function (key) {\n          messageListParams_1[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams');\n      }\n\n      logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages', {\n        currentOpenChannel: currentOpenChannel,\n        messageListParams: messageListParams_1\n      });\n      messagesDispatcher({\n        type: GET_PREV_MESSAGES_START,\n        payload: null\n      });\n      currentOpenChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams_1, function (messages, error) {\n        if (!error) {\n          logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages succeeded', messages);\n          var hasMore = messages && messages.length > 0;\n          var lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: messages,\n              hasMore: hasMore,\n              lastMessageTimestamp: lastMessageTimestamp\n            }\n          });\n          setTimeout(function () {\n            scrollIntoLast();\n          });\n        } else {\n          logger.error('OpenChannel | useInitialMessagesFetch: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, userFilledMessageListParams]);\n}\n\nfunction useScrollCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      lastMessageTimestamp = _a.lastMessageTimestamp,\n      fetchMore = _a.fetchMore;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher,\n      hasMore = _b.hasMore,\n      userFilledMessageListParams = _b.userFilledMessageListParams;\n  return useCallback(function (callback) {\n    if (fetchMore && hasMore && sdk && sdk.MessageListParams) {\n      logger.info('OpenChannel | useScrollCallback: start');\n      var messageListParams_1 = new sdk.MessageListParams();\n      messageListParams_1.prevResultSize = 30;\n      messageListParams_1.includeReplies = false;\n      messageListParams_1.includeReactions = false;\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach(function (key) {\n          messageListParams_1[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useScrollCallback: Used userFilledMessageListParams', userFilledMessageListParams);\n      }\n\n      logger.info('OpenChannel | useScrollCallback: Fetching messages', {\n        currentOpenChannel: currentOpenChannel,\n        messageListParams: messageListParams_1\n      });\n      currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || new Date().getTime(), messageListParams_1, function (messages, error) {\n        if (!error) {\n          logger.info('OpenChannel | useScrollCallback: Fetching messages succeeded', messages);\n          var hasMore_1 = messages && messages.length > 0;\n          var lastMessageTimestamp_1 = hasMore_1 ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: messages,\n              hasMore: hasMore_1,\n              lastMessageTimestamp: lastMessageTimestamp_1\n            }\n          });\n          setTimeout(function () {\n            callback();\n          });\n        } else {\n          logger.error('OpenChannel | useScrollCallback: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, lastMessageTimestamp, fetchMore]);\n}\n\nfunction useCheckScrollBottom(_a, _b) {\n  var conversationScrollRef = _a.conversationScrollRef;\n  var logger = _b.logger;\n  return useCallback(function () {\n    var isBottom = true;\n\n    if (conversationScrollRef) {\n      try {\n        var conversationScroll = conversationScrollRef.current;\n        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;\n      } catch (error) {\n        logger.error('OpenChannel | useCheckScrollBottom', error);\n      }\n    }\n\n    return isBottom;\n  }, [conversationScrollRef]);\n}\n\nfunction useSendMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      onBeforeSendUserMessage = _a.onBeforeSendUserMessage,\n      checkScrollBottom = _a.checkScrollBottom,\n      messageInputRef = _a.messageInputRef;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function () {\n    if (sdk && sdk.UserMessageParams) {\n      var text = messageInputRef.current.value;\n\n      var createParamsDefault = function createParamsDefault(txt) {\n        var message = typeof txt === 'string' ? txt.trim() : txt.toString(10).trim();\n        var params = new sdk.UserMessageParams();\n        params.message = message;\n        return params;\n      };\n\n      var createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n\n      if (createCustomParams) {\n        logger.info('OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n\n      var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n      logger.info('OpenChannel | useSendMessageCallback: Sending message has started', params);\n      var isBottom_1 = checkScrollBottom();\n      var pendingMessage = currentOpenChannel.sendUserMessage(params, function (message, error) {\n        if (!error) {\n          logger.info('OpenChannel | useSendMessageCallback: Sending message succeeded', message);\n          messagesDispatcher({\n            type: SENDING_MESSAGE_SUCCEEDED,\n            payload: message\n          });\n\n          if (isBottom_1) {\n            setTimeout(function () {\n              scrollIntoLast();\n            });\n          }\n        } else {\n          logger.warning('OpenChannel | useSendMessageCallback: Sending message failed', error);\n          messagesDispatcher({\n            type: SENDING_MESSAGE_FAILED,\n            payload: messageActionTypes\n          });\n        }\n      });\n      messagesDispatcher({\n        type: SENDING_MESSAGE_START,\n        payload: {\n          message: pendingMessage,\n          channel: currentOpenChannel\n        }\n      });\n    }\n  }, [currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef]);\n}\n\nfunction useFileUploadCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      checkScrollBottom = _a.checkScrollBottom,\n      _c = _a.imageCompression,\n      imageCompression = _c === void 0 ? {} : _c,\n      onBeforeSendFileMessage = _a.onBeforeSendFileMessage;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (file) {\n    if (sdk && sdk.FileMessageParams) {\n      var compressionRate_1 = imageCompression.compressionRate,\n          resizingWidth_1 = imageCompression.resizingWidth,\n          resizingHeight_1 = imageCompression.resizingHeight;\n      var createCustomParams_1 = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n      var compressibleFileType = file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg';\n      var compressibleRatio = compressionRate_1 > 0 && compressionRate_1 < 1; // pxToNumber returns null if values are invalid\n\n      var compressibleDiamensions_1 = pxToNumber(resizingWidth_1) || pxToNumber(resizingHeight_1);\n      var canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions_1);\n\n      var createParamsDefault_1 = function createParamsDefault_1(file_) {\n        var params = new sdk.FileMessageParams();\n        params.file = file_;\n        return params;\n      };\n\n      if (canCompressImage) {\n        // Using image compression\n        try {\n          var image_1 = document.createElement('img');\n          image_1.src = URL.createObjectURL(file);\n\n          image_1.onload = function () {\n            URL.revokeObjectURL(image_1.src);\n            var canvas = document.createElement('canvas');\n            var imageWidth = image_1.naturalWidth || image_1.width;\n            var imageHeight = image_1.naturalHeight || image_1.height;\n            var targetWidth = pxToNumber(resizingWidth_1) || imageWidth;\n            var targetHeight = pxToNumber(resizingHeight_1) || imageHeight; // In canvas.toBlob(callback, mimeType, qualityArgument)\n            // qualityArgument doesnt work\n            // so in case compressibleDiamensions are not present, we use ratio\n\n            if (file.type === 'image/png' && !compressibleDiamensions_1) {\n              targetWidth *= compressionRate_1;\n              targetHeight *= compressionRate_1;\n            }\n\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            var context = canvas.getContext('2d');\n            context.drawImage(image_1, 0, 0, targetWidth, targetHeight);\n            context.canvas.toBlob(function (newImageBlob) {\n              var compressedFile = new File([newImageBlob], file.name, {\n                type: file.type\n              });\n\n              if (createCustomParams_1) {\n                logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n\n              var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault_1(compressedFile);\n              logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n              var isBottom = checkScrollBottom();\n              var pendingMessage = currentOpenChannel.sendFileMessage(params, function (message, error) {\n                if (!error) {\n                  logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n                  messagesDispatcher({\n                    type: SENDING_MESSAGE_SUCCEEDED,\n                    payload: message\n                  });\n\n                  if (isBottom) {\n                    setTimeout(function () {\n                      scrollIntoLast();\n                    });\n                  }\n                } else {\n                  logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', {\n                    message: message,\n                    error: error\n                  });\n                  message.localUrl = URL.createObjectURL(file);\n                  message.file = file;\n                  messagesDispatcher({\n                    type: SENDING_MESSAGE_FAILED,\n                    payload: message\n                  });\n                }\n              });\n              messagesDispatcher({\n                type: SENDING_MESSAGE_START,\n                payload: {\n                  message: __assign(__assign({}, pendingMessage), {\n                    url: URL.createObjectURL(file),\n                    // pending thumbnail message seems to be failed\n                    requestState: 'pending'\n                  }),\n                  channel: currentOpenChannel\n                }\n              });\n            }, file.type, compressionRate_1);\n          };\n        } catch (error) {\n          logger.warning('OpenChannel | useFileUploadCallback: Sending file message with image compression failed', error);\n        }\n      } else {\n        // Not using image compression\n        if (createCustomParams_1) {\n          logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n        }\n\n        var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault_1(file);\n        logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n        var isBottom_1 = checkScrollBottom();\n        var pendingMessage = currentOpenChannel.sendFileMessage(params, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n\n            if (isBottom_1) {\n              setTimeout(function () {\n                scrollIntoLast();\n              });\n            }\n          } else {\n            logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', {\n              message: message,\n              error: error\n            });\n            message.localUrl = URL.createObjectURL(file);\n            message.file = file;\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: message\n            });\n          }\n        });\n        messagesDispatcher({\n          type: SENDING_MESSAGE_START,\n          payload: {\n            message: __assign(__assign({}, pendingMessage), {\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending'\n            }),\n            channel: currentOpenChannel\n          }\n        });\n      }\n    }\n  }, [currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression]);\n}\n\nfunction useUpdateMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      onBeforeSendUserMessage = _a.onBeforeSendUserMessage;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (messageId, text, callback) {\n    var createParamsDefault = function createParamsDefault(txt) {\n      var params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function') {\n      logger.info('OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage');\n    }\n\n    var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n    currentOpenChannel.updateUserMessage(messageId, params, function (message, error) {\n      if (callback) {\n        callback();\n      }\n\n      if (!error) {\n        logger.info('OpenChannel | useUpdateMessageCallback: Updating message succeeded', {\n          message: message,\n          params: params\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentOpenChannel,\n            message: message\n          }\n        });\n      } else {\n        logger.warning('OpenChannel | useUpdateMessageCallback: Updating message failed', error);\n      }\n    });\n  }, [currentOpenChannel, onBeforeSendUserMessage]);\n}\n\nfunction useDeleteMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel;\n  var logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (message, callback) {\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message', message);\n    var sendingStatus = message.sendingStatus;\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message requestState', sendingStatus);\n\n    if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n      logger.info('OpenChannel | useDeleteMessageCallback: Deleted message from local', message);\n      messagesDispatcher({\n        type: ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId\n      });\n\n      if (callback) {\n        callback();\n      }\n    } else {\n      if (!(message.messageType === 'file' || message.messageType === 'user')) {\n        return;\n      }\n\n      var messageToDelete = message;\n      currentOpenChannel.deleteMessage(messageToDelete, function (error) {\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message on server', sendingStatus);\n\n        if (callback) {\n          callback();\n        }\n\n        if (!error) {\n          logger.info('OpenChannel | useDeleteMessageCallback: Deleting message succeeded', message);\n          messagesDispatcher({\n            type: ON_MESSAGE_DELETED,\n            payload: {\n              channel: currentOpenChannel,\n              messageId: message.messageId\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useDeleteMessageCallback: Deleting message failed', error);\n        }\n      });\n    }\n  }, [currentOpenChannel]);\n}\n\nfunction useResendMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel;\n  var logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (failedMessage) {\n    logger.info('OpenChannel | useResendMessageCallback: Resending message has started', failedMessage);\n    var messageType = failedMessage.messageType,\n        file = failedMessage.file;\n\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable()) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: RESENDING_MESSAGE_START,\n        payload: {\n          channel: currentOpenChannel,\n          message: failedMessage\n        }\n      }); // userMessage\n\n      if (messageType === 'user' && failedMessage.messageType === 'user') {\n        currentOpenChannel.resendUserMessage(failedMessage, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Reseding message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending message failed', error); // eslint-disable-next-line no-param-reassign\n\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: failedMessage\n            });\n          }\n        });\n        return;\n      } // fileMessage\n\n\n      if (messageType === 'file' && failedMessage.messageType === 'file') {\n        currentOpenChannel.resendFileMessage(failedMessage, file, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Resending file message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending file message failed', error); // eslint-disable-next-line no-param-reassign\n\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: failedMessage\n            });\n          }\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('OpenChannel | useResendMessageCallback: Message is not resendable');\n      logger.warning('OpenChannel | useResendMessageCallback: Message is not resendable', failedMessage);\n    }\n  }, [currentOpenChannel]);\n}\n\nvar THROTTLE_TIMER = 5000; // to trim message list so that we wont keep thousands of messages in memory\n// We are throttling here; not debouncing\n// it will be called once very 5 sec if messagesLength, experimentalMessageLimit changes\n// we check if messagesLength > experimentalMessageLimit before dispatching action\n\nfunction useTrimMessageList(_a, _b) {\n  var messagesLength = _a.messagesLength,\n      experimentalMessageLimit = _a.experimentalMessageLimit;\n  var messagesDispatcher = _b.messagesDispatcher,\n      logger = _b.logger;\n\n  var _c = useState(false),\n      inProgress = _c[0],\n      setInProgress = _c[1];\n\n  useEffect(function () {\n    if (inProgress) {\n      return;\n    }\n\n    if (typeof messagesLength === 'number' && messagesLength > experimentalMessageLimit) {\n      logger.info('Trimming MessageList');\n      messagesDispatcher({\n        type: TRIM_MESSAGE_LIST,\n        payload: {\n          experimentalMessageLimit: experimentalMessageLimit\n        }\n      });\n    }\n\n    setInProgress(true);\n    setTimeout(function () {\n      setInProgress(false);\n    }, THROTTLE_TIMER);\n  }, [messagesLength, experimentalMessageLimit]);\n}\n\nvar COMPONENT_CLASS_NAME = 'sendbird-openchannel-conversation';\n\nvar OpenchannelConversation = function OpenchannelConversation(props) {\n  var // internal props\n  stores = props.stores,\n      config = props.config,\n      // normal props\n  useMessageGrouping = props.useMessageGrouping,\n      channelUrl = props.channelUrl,\n      _a = props.queries,\n      queries = _a === void 0 ? {} : _a,\n      disableUserProfile = props.disableUserProfile,\n      _b = props.fetchingParticipants,\n      fetchingParticipants = _b === void 0 ? false : _b,\n      // We didn't decide to support fetching participant list\n  renderCustomMessage = props.renderCustomMessage,\n      renderUserProfile = props.renderUserProfile,\n      renderChannelTitle = props.renderChannelTitle,\n      renderMessageInput = props.renderMessageInput,\n      onBeforeSendUserMessage = props.onBeforeSendUserMessage,\n      experimentalMessageLimit = props.experimentalMessageLimit,\n      onBeforeSendFileMessage = props.onBeforeSendFileMessage,\n      onChatHeaderActionClick = props.onChatHeaderActionClick;\n  var sdkStore = stores.sdkStore,\n      userStore = stores.userStore;\n  var userId = config.userId,\n      isOnline = config.isOnline,\n      logger = config.logger,\n      pubSub = config.pubSub,\n      imageCompression = config.imageCompression;\n  var sdk = sdkStore.sdk;\n  var user = userStore.user; // hook variables\n\n  var _c = useReducer(reducer, initialState),\n      messagesStore = _c[0],\n      messagesDispatcher = _c[1];\n\n  var allMessages = messagesStore.allMessages,\n      loading = messagesStore.loading,\n      initialized = messagesStore.initialized,\n      currentOpenChannel = messagesStore.currentOpenChannel,\n      isInvalid = messagesStore.isInvalid,\n      hasMore = messagesStore.hasMore,\n      lastMessageTimestamp = messagesStore.lastMessageTimestamp,\n      operators = messagesStore.operators,\n      bannedParticipantIds = messagesStore.bannedParticipantIds,\n      mutedParticipantIds = messagesStore.mutedParticipantIds; // ref\n\n  var messageInputRef = useRef(null); // useSendMessageCallback\n\n  var conversationScrollRef = useRef(null); // useScrollAfterSendMessageCallback\n\n  var stringSet = useContext(LocalizationContext).stringSet; // const\n\n  var sdkInit = sdkStore.initialized;\n  var userFilledMessageListParams = queries ? queries.messageListParams : null;\n  var disabled = !initialized || !isOnline || isDisabledBecauseFrozen(currentOpenChannel, userId); // || utils.isDisabledBecauseMuted(mutedParticipantIds, userId)\n\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile; // useMemo\n\n  var amIBanned = useMemo(function () {\n    return bannedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, bannedParticipantIds, user]);\n  var amIMuted = useMemo(function () {\n    return mutedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, mutedParticipantIds, user]);\n  var amIOperator = useMemo(function () {\n    return operators.map(function (operator) {\n      return operator.userId;\n    }).indexOf(user.userId) >= 0;\n  }, [channelUrl, operators, user]); // use hooks\n\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit,\n    fetchingParticipants: fetchingParticipants\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useEffect(function () {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n  var checkScrollBottom = useCheckScrollBottom({\n    conversationScrollRef: conversationScrollRef\n  }, {\n    logger: logger\n  });\n  useHandleChannelEvents({\n    currentOpenChannel: currentOpenChannel,\n    checkScrollBottom: checkScrollBottom\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useInitialMessagesFetch({\n    currentOpenChannel: currentOpenChannel,\n    userFilledMessageListParams: userFilledMessageListParams\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  }); // donot fetch more for streaming\n\n  var fetchMore = shouldFetchMore(allMessages === null || allMessages === void 0 ? void 0 : allMessages.length, experimentalMessageLimit);\n  var onScroll = useScrollCallback({\n    currentOpenChannel: currentOpenChannel,\n    lastMessageTimestamp: lastMessageTimestamp,\n    fetchMore: fetchMore\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher,\n    hasMore: hasMore,\n    userFilledMessageListParams: userFilledMessageListParams\n  });\n  var handleSendMessage = useSendMessageCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendUserMessage: onBeforeSendUserMessage,\n    checkScrollBottom: checkScrollBottom,\n    messageInputRef: messageInputRef\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var handleFileUpload = useFileUploadCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendFileMessage: onBeforeSendFileMessage,\n    checkScrollBottom: checkScrollBottom,\n    imageCompression: imageCompression\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var updateMessage = useUpdateMessageCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendUserMessage: onBeforeSendUserMessage\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var deleteMessage = useDeleteMessageCallback({\n    currentOpenChannel: currentOpenChannel\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var resendMessage = useResendMessageCallback({\n    currentOpenChannel: currentOpenChannel\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useTrimMessageList({\n    messagesLength: allMessages === null || allMessages === void 0 ? void 0 : allMessages.length,\n    experimentalMessageLimit: experimentalMessageLimit\n  }, {\n    messagesDispatcher: messagesDispatcher,\n    logger: logger\n  }); // handle API calls from withSendbird\n\n  useEffect(function () {\n    var subscriber = new Map();\n\n    if (!pubSub || !pubSub.subscribe) {\n      return;\n    }\n\n    subscriber.set(SEND_USER_MESSAGE, pubSub.subscribe(SEND_USER_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          message = msg.message;\n      scrollIntoLast();\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_SUCCEEDED,\n          payload: message\n        });\n      }\n    }));\n    subscriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n      var channel = msg.channel,\n          message = msg.message;\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_START,\n          payload: {\n            message: message,\n            channel: channel\n          }\n        });\n      }\n    }));\n    subscriber.set(SEND_FILE_MESSAGE, pubSub.subscribe(SEND_FILE_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          message = msg.message;\n      scrollIntoLast();\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_SUCCEEDED,\n          payload: {\n            message: message,\n            channel: channel\n          }\n        });\n      }\n    }));\n    subscriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          message = msg.message,\n          fromSelector = msg.fromSelector;\n\n      if (fromSelector && channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      }\n    }));\n    subscriber.set(DELETE_MESSAGE, pubSub.subscribe(DELETE_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          messageId = msg.messageId;\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: messageId\n        });\n      }\n    }));\n    return function () {\n      if (subscriber) {\n        subscriber.forEach(function (s) {\n          try {\n            s.remove();\n          } catch (_a) {//\n          }\n        });\n      }\n    };\n  }, [channelUrl, sdkInit]);\n\n  if (!currentOpenChannel || !currentOpenChannel.url || amIBanned) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.NO_CHANNELS\n    }));\n  }\n\n  if (loading) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.LOADING\n    }));\n  }\n\n  if (isInvalid) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG\n    }));\n  }\n\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: COMPONENT_CLASS_NAME,\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, renderChannelTitle ? renderChannelTitle({\n    channel: currentOpenChannel,\n    user: user\n  }) : /*#__PURE__*/React__default.createElement(OpenchannelConversationHeader, {\n    title: currentOpenChannel.name,\n    subTitle: kFormatter(currentOpenChannel.participantCount) + \" \" + stringSet.OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS,\n    coverImage: currentOpenChannel.coverUrl,\n    onActionClick: onChatHeaderActionClick,\n    amIOperator: amIOperator\n  }), currentOpenChannel.isFrozen && /*#__PURE__*/React__default.createElement(FrozenNotification, null), /*#__PURE__*/React__default.createElement(OpenchannelConversationScroll$1, {\n    ref: conversationScrollRef,\n    renderCustomMessage: renderCustomMessage,\n    openchannel: currentOpenChannel,\n    user: user,\n    useMessageGrouping: useMessageGrouping,\n    isOnline: isOnline,\n    allMessages: allMessages,\n    onScroll: onScroll,\n    hasMore: hasMore,\n    updateMessage: updateMessage,\n    deleteMessage: deleteMessage,\n    resendMessage: resendMessage\n  }), renderMessageInput ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-footer\"\n  }, renderMessageInput({\n    channel: currentOpenChannel,\n    user: user,\n    disabled: disabled\n  })) : /*#__PURE__*/React__default.createElement(MessageInputWrapper$1, {\n    channel: currentOpenChannel,\n    user: user,\n    ref: messageInputRef,\n    disabled: disabled || amIMuted,\n    onSendMessage: handleSendMessage,\n    onFileUpload: handleFileUpload,\n    renderMessageInput: renderMessageInput\n  }));\n};\n\nvar index = withSendbirdContext(OpenchannelConversation);\nexport { OpenchannelConversation, index as default };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\utils.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\MessageInpuetWrapper.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\FrozenNotification.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelConversationHeader\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelUserMessage\\utils.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\utils\\openChannelUtils.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelUserMessage\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OpenChannelAdminMessage\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelOGMessage\\utils.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelOGMessage\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelThumbnailMessage\\utils.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelThumbnailMessage\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelFileMessage\\utils.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelFileMessage\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\RemoveMessageModal.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\FileViewer\\types.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\types.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\MessageHOC.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\OpenchannelConversationScroll.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\dux\\actionTypes.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\dux\\reducers.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\dux\\initialState.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useSetChannel.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useHandleChannelEvents.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useInitialMessagesFetch.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useScrollCallback.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useCheckScrollBottom.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useSendMessageCallback.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useFileUploadCallback.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useUpdateMessageCallback.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useDeleteMessageCallback.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useResendMessageCallback.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useTrimMessageList.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\index.tsx"],"names":["getMessageCreatedAt","message","shouldFetchMore","maxMessages","scrollIntoLast","MAX_TRIES","currentTry","scrollDOM","document","setTimeout","isSameGroup","comparingMessage","compareMessagesForGrouping","kFormatter","Math","isOperator","openChannel","isDisabledBecauseFrozen","isFrozen","fetchWithListQuery","fetchList","query","eachQueryNextCallback","logger","pxToNumber","parsed","Number","MessageInputWrapper","channel","user","disabled","onSendMessage","onFileUpload","renderMessageInput","useContext","stringSet","React","FrozenNotification","LabelTypography","CAPTION_2","OpenchannelConversationHeader","_a","coverImage","title","subTitle","amIOperator","onActionClick","width","height","IconTypes","IconColors","LabelColors","ONBACKGROUND_1","ONBACKGROUND_2","copyToClipboard","window","textarea","OpenChannelMessageStatusTypes","NONE","PENDING","FAILED","CANCELED","SUCCEEDED","getSenderFromMessage","checkIsSent","status","checkIsPending","checkIsFailed","checkIsByMe","isFineCopy","isFineResend","userId","isFineEdit","isFineDelete","showMenuTrigger","props","OpenchannelUserMessage","className","resendMessage","showEdit","showRemove","chainTop","dateLocale","disableUserProfile","renderUserProfile","messageRef","useRef","avatarRef","contextMenuRef","contextStyle","setContextStyle","useState","isByMe","isPending","isFailed","sender","MemoizedMessageText","useMemo","splitMessage","matchedMessage","word","uuidv4","useEffect","top","__spreadArray","Array","toggleDropdown","paddingTop","paddingBottom","close","closeDropdown","ONBACKGROUND_3","format","locale","OpenChannelAdminMessage","URL_REG","createUrlTester","checkOGIsEnalbed","ogMetaData","OpenchannelOGMessage","messageComponentRef","isUrl","wordClassName","PRIMARY","openLink","defaultImage","SUPPORTING_TYPES","IMAGE","VIDEO","UNSUPPORTED","SUPPORTED_MIMES","getSupportingFileType","OpenchannelThumbnailMessage","onClick","url","localUrl","thumbnails","thumbnailUrl","messageWidth","setMessageWidth","memorizedThumbnailPlaceHolder","style","isMessageSent","thumbnailWidth","_b","type","checkFileType","audioFile","gifFile","truncate","fullStr","separator","sepLen","charsToShow","strLen","frontChars","backChars","OpenchannelFileMessage","openFileUrl","RemoveMessageModal","onCloseModal","onDeleteMessage","MODAL__DELETE_MESSAGE__TITLE","isImage","isVideo","MessageTypes","ADMIN","USER","FILE","THUMBNAIL","OG","UNKNOWN","SendingMessageStatus","getMessageType","MessageHoc","editDisabled","hasSeparator","renderCustomMessage","deleteMessage","updateMessage","chainBottom","RenderedMessage","setShowEdit","setShowRemove","showFileViewer","setShowFileViewer","editMessageInputRef","openchannel","allMessages","_c","hasMore","onScroll","scrollRef","ref","showScrollDownButton","setShowScrollDownButton","handleOnScroll","element","e","scrollHeight","clientHeight","scrollTop","nodes","first_1","scrollToBottom","hasMessage","previousMessage","index","nextMessage","previousMessageCreatedAt","currentCreatedAt","isSameDay","useMessageGrouping","PlaceHolderTypes","NO_MESSAGES","CONTENT","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","RESET_MESSAGES","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_PREV_MESSAGES_FAIL","SENDING_MESSAGE_FAILED","SENDING_MESSAGE_SUCCEEDED","SENDING_MESSAGE_START","RESENDING_MESSAGE_START","FETCH_PARTICIPANT_LIST","FETCH_BANNED_USER_LIST","FETCH_MUTED_USER_LIST","TRIM_MESSAGE_LIST","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","ON_OPERATOR_UPDATED","ON_USER_ENTERED","ON_USER_EXITED","ON_USER_MUTED","ON_USER_UNMUTED","ON_USER_BANNED","ON_USER_UNBANNED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_CHANNEL_CHANGED","ON_META_DATA_CREATED","ON_META_DATA_UPDATED","ON_META_DATA_DELETED","ON_META_COUNTERS_CREATED","ON_META_COUNTERS_UPDATED","ON_META_COUNTERS_DELETED","ON_MENTION_RECEIVED","reducer","state","action","gottenChannel","operators","currentOpenChannel","isInvalid","participants","bannedParticipantIds","mutedParticipantIds","loading","_d","lastMessageTimestamp","actionChannelUrl","receivedMessages_1","_hasMore","_lastMessageTimestamp","stateChannel","stateChannelUrl","filteredAllMessages","messageId","initialized","sentMessage_1","newMessages","compareIds","m","sentMessage_2","experimentalMessageLimit","sliceAt","eventedChannel","resentMessage_1","fetchedParticipantList","fetchedBannedUserList","fetchedMutedUserList","receivedMessage","updatedMessage_1","currentChannel","deletedMessageId_1","updatedOperators","enteredUser","exitedUser_1","participant","mutedUser","unmutedUser_1","bannedUser","unbannedUser_1","frozenChannel","frozen","unfrozenChannel","changedChannel","initialState","channelUrl","sdkInit","fetchingParticipants","sdk","messagesDispatcher","payload","error","participantListQuery","bannedParticipantListQuery","mutedParticipantListQuery","utils","users","checkScrollBottom","messageReceiverId","ChannelHandler","scrollToEnd","metaData","metaDataKeys","metaCounter","metaCounterKeys","userFilledMessageListParams","messageListParams_1","Object","messageListParams","messages","fetchMore","useCallback","hasMore_1","lastMessageTimestamp_1","callback","conversationScrollRef","isBottom","conversationScroll","onBeforeSendUserMessage","messageInputRef","text","createParamsDefault","txt","params","createCustomParams","isBottom_1","pendingMessage","messageActionTypes","onBeforeSendFileMessage","resizingWidth_1","resizingHeight_1","imageCompression","createCustomParams_1","compressibleFileType","file","compressibleRatio","compressionRate_1","compressibleDiamensions_1","canCompressImage","createParamsDefault_1","image_1","URL","canvas","imageWidth","imageHeight","targetWidth","targetHeight","context","compressedFile","requestState","sendingStatus","reqId","messageToDelete","failedMessage","messageType","console","THROTTLE_TIMER","messagesLength","inProgress","setInProgress","COMPONENT_CLASS_NAME","OpenchannelConversation","config","renderChannelTitle","onChatHeaderActionClick","userStore","stores","isOnline","pubSub","sdkStore","messagesStore","useReducer","queries","userDefinedDisableUserProfile","userDefinedRenderProfile","amIBanned","amIMuted","useSetChannel","useCheckScrollBottom","useHandleChannelEvents","useInitialMessagesFetch","useScrollCallback","handleSendMessage","useSendMessageCallback","handleFileUpload","useFileUploadCallback","useUpdateMessageCallback","useDeleteMessageCallback","useResendMessageCallback","useTrimMessageList","subscriber","msg","fromSelector","s","NO_CHANNELS","LOADING","WRONG","withSendbirdContext"],"mappings":"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","sourcesContent":["import format from 'date-fns/format';\nimport Sendbird from 'sendbird';\nimport SendbirdUIKit from '../../index';\n\nexport const getMessageCreatedAt = (message: SendbirdUIKit.EveryMessage): string => format(message.createdAt, 'p');\n\nexport const shouldFetchMore = (messageLength: number, maxMessages: number): boolean => {\n  if (typeof maxMessages !== 'number') {\n    return true;\n  }\n\n  if (typeof maxMessages === 'number'\n    && maxMessages > messageLength\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport const scrollIntoLast = (intialTry = 0): void => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-openchannel-conversation-scroll');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const isSameGroup = (\n  message: SendbirdUIKit.EveryMessage,\n  comparingMessage: SendbirdUIKit.EveryMessage,\n): boolean => {\n  if (!(\n    message\n    && comparingMessage\n    && message?.messageType !== 'admin'\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false\n  }\n\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage: SendbirdUIKit.EveryMessage,\n  currMessage: SendbirdUIKit.EveryMessage,\n  nextMessage: SendbirdUIKit.EveryMessage,\n): [boolean, boolean] => (\n  [\n    isSameGroup(prevMessage, currMessage),\n    isSameGroup(currMessage, nextMessage),\n  ]\n);\n\nexport const kFormatter = (num: number): string => {\n  if (Math.abs(num) > 999999) {\n    return `${(Math.abs(num) / 1000000).toFixed(1)}M`;\n  }\n\n  if (Math.abs(num) > 999) {\n    return `${(Math.abs(num) / 1000).toFixed(1)}K`;\n  }\n\n  return `${num}`;\n};\n\nexport const isOperator = (openChannel: Sendbird.OpenChannel, userId: string): boolean => {\n  const { operators } = openChannel;\n  if (operators.map(operator => operator.userId).indexOf(userId) < 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const isDisabledBecauseFrozen = (openChannel: Sendbird.OpenChannel, userId: string): boolean => {\n  const { isFrozen } = openChannel;\n  return isFrozen && !isOperator(openChannel, userId);\n};\n\nexport const isDisabledBecauseMuted = (mutedParticipantIds: Array<string>, userId: string): boolean => {\n  return mutedParticipantIds.indexOf(userId) < 0;\n};\n\nexport const fetchWithListQuery = (\n  listQuery: SendbirdUIKit.UserListQuery,\n  logger: SendbirdUIKit.Logger,\n  eachQueryNextCallback: (users: Array<Sendbird.User>) => void,\n): void => {\n  const fetchList = (query) => {\n    const { hasNext } = query;\n    if (hasNext) {\n      query.next((error, users) => {\n        if (!error) {\n          eachQueryNextCallback(users);\n          fetchList(query);\n        } else {\n          logger.warning('OpenChannel | FetchUserList failed', error);\n        }\n      });\n    } else {\n      logger.info('OpenChannel | FetchUserList finished');\n    }\n  };\n  logger.info('OpenChannel | FetchUserList start', listQuery);\n  fetchList(listQuery);\n};\n\nexport const pxToNumber = (px: string | number): number | void => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n","import React, { useContext } from 'react';\nimport Sendbird from 'sendbird';\nimport { RenderOpenChannelMessageInputProps } from '../../../index';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport MessageInput from '../../../ui/MessageInput';\n\ninterface Props {\n  channel: Sendbird.OpenChannel;\n  user: Sendbird.User;\n  disabled: boolean;\n  onSendMessage(): void;\n  onFileUpload(file_: File): void;\n  renderMessageInput?(renderProps: RenderOpenChannelMessageInputProps): JSX.Element;\n}\n\nconst MessageInputWrapper = ({\n  channel,\n  user,\n  disabled,\n  onSendMessage,\n  onFileUpload,\n  renderMessageInput,\n}: Props, ref: React.RefObject<HTMLInputElement>): JSX.Element => {\n  if (!channel) {\n    return;\n  }\n\n  const { stringSet } = useContext(LocalizationContext);\n\n  if (renderMessageInput) {\n    return renderMessageInput({ channel, user, disabled });\n  }\n\n  return (\n    <div className=\"sendbird-openchannel-footer\">\n      <MessageInput\n        ref={ref}\n        disabled={disabled}\n        onSendMessage={onSendMessage}\n        onFileUpload={onFileUpload}\n        placeholder={(\n          disabled\n          && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED\n          // add disabled because of muted state\n        )}\n      />\n    </div>\n  );\n};\n\nexport default React.forwardRef(MessageInputWrapper);\n","import React, { useContext } from 'react';\n\nimport './frozen-notification.scss';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelTypography } from '../../../ui/Label';\n\nconst FrozenNotification = (): JSX.Element => {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-frozen-channel-notification\">\n      <Label\n        className=\"sendbird-frozen-channel-notification__text\"\n        type={LabelTypography.CAPTION_2}\n      >\n        {stringSet.CHANNEL_FROZEN}\n      </Label>\n    </div>\n  );\n}\n\nexport default FrozenNotification;\n","import React, { useContext } from 'react';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport IconButton from '../IconButton';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  coverImage?: string;\n  title?: string;\n  subTitle?: string;\n  amIOperator?: boolean;\n  onActionClick?(): void;\n}\n\nexport default function OpenchannelConversationHeader({\n  coverImage,\n  title,\n  subTitle,\n  amIOperator,\n  onActionClick,\n}: Props): JSX.Element {\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div className=\"sendbird-openchannel-conversation-header\">\n      <div className=\"sendbird-openchannel-conversation-header__left\">\n        {\n          coverImage ? (\n            <Avatar\n              className=\"sendbird-openchannel-conversation-header__left__cover-image\"\n              src={coverImage}\n              alt=\"channel cover image\"\n              width=\"32px\"\n              height=\"32px\"\n            />\n          ) : (\n            <div\n              className=\"sendbird-openchannel-conversation-header__left__cover-image--icon\"\n              style={{ width: 32, height: 32 }}\n            >\n              <Icon\n                type={IconTypes.CHANNELS}\n                fillColor={IconColors.CONTENT}\n                width=\"18px\"\n                height=\"18px\"\n              />\n            </div>\n          )\n        }\n        <Label\n          className=\"sendbird-openchannel-conversation-header__left__title\"\n          type={LabelTypography.H_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {title || stringSet.NO_TITLE}\n        </Label>\n        <Label\n          className=\"sendbird-openchannel-conversation-header__left__sub-title\"\n          type={LabelTypography.BODY_2}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {subTitle || stringSet.NO_TITLE}\n        </Label>\n      </div>\n      <div className=\"sendbird-openchannel-conversation-header__right\">\n        <IconButton\n          className=\"sendbird-openchannel-conversation-header__right__trigger\"\n          width=\"32px\"\n          height=\"32px\"\n          onClick={onActionClick}\n        >\n          <Icon\n            type={(\n              amIOperator\n              ? IconTypes.INFO\n              : IconTypes.MEMBERS\n            )}\n            fillColor={IconColors.PRIMARY}\n            width=\"24px\"\n            height=\"24px\"\n          />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n","export const copyToClipboard = (text: string): boolean => {\n  // @ts-ignore: Unreachable code error\n  if (window.clipboardData && window.clipboardData.setData) {\n    // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n    // @ts-ignore: Unreachable code error\n    return window.clipboardData.setData('Text', text);\n  }\n  if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n    const textarea = document.createElement('textarea');\n    textarea.textContent = text;\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n    document.body.appendChild(textarea);\n    textarea.select();\n    try {\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n    } catch (ex) {\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n  return false;\n};\n\nexport default { copyToClipboard };\n","import Sendbird from 'sendbird';\nimport { ClientUserMessage, ClientFileMessage } from '../index';\n\nconst OpenChannelMessageStatusTypes = {\n  NONE: 'none',\n  PENDING: 'pending',\n  FAILED: 'failed',\n  CANCELED: 'canceled',\n  SUCCEEDED: 'succeeded'\n};\n\nexport const getSenderFromMessage = (message: ClientUserMessage | ClientFileMessage): Sendbird.User => {\n  return message.sender || message._sender;\n};\n\nexport const checkIsSent = (status: string): boolean => (status === OpenChannelMessageStatusTypes.SUCCEEDED);\nexport const checkIsPending = (status: string): boolean => (status === OpenChannelMessageStatusTypes.PENDING);\nexport const checkIsFailed = (status: string): boolean => (status === OpenChannelMessageStatusTypes.FAILED);\n\nexport const checkIsByMe = (message: ClientFileMessage | ClientUserMessage, userId: string): boolean => (getSenderFromMessage(message).userId === userId);\n\ninterface isFineCopyParams {\n  message: ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineCopy = ({ message }: isFineCopyParams): boolean => {\n  return (message.messageType === 'user' && message.message.length > 0);\n};\n\ninterface isFineResendParams {\n  message: ClientFileMessage | ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineResend = ({ message, status, userId }: isFineResendParams): boolean => {\n  return checkIsByMe(message, userId)\n    && checkIsFailed(status)\n    && message.isResendable\n    && message.isResendable();\n};\n\ninterface isFineEditParams {\n  message: ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineEdit = ({ message, status, userId }: isFineEditParams): boolean => {\n  return checkIsByMe(message, userId) && checkIsSent(status);\n};\n\ninterface isFineDeleteParams {\n  message: ClientFileMessage | ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineDelete = ({ message, userId }: isFineDeleteParams): boolean => {\n  return checkIsByMe(message, userId);\n};\n\ninterface showMenuTriggerParams {\n  message: ClientUserMessage | ClientFileMessage;\n  status: string;\n  userId: string;\n}\nexport const showMenuTrigger = (props: showMenuTriggerParams): boolean => {\n  const { message, status, userId } = props;\n  if (message.messageType === 'user') {\n    return (\n      isFineDelete({ message, status, userId })\n      || isFineEdit({ message, status, userId })\n      || isFineCopy({ message, status, userId })\n      || isFineResend({ message, status, userId })\n    );\n  } else {\n    return (\n      isFineDelete({ message, status, userId })\n      || isFineResend({ message, status, userId })\n    );\n  }\n};\n","import React, {\n  useMemo,\n  useContext,\n  useRef,\n  useState,\n  ReactElement,\n  useEffect,\n} from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { copyToClipboard } from './utils';\nimport uuidv4 from '../../utils/uuid';\nimport { ClientUserMessage } from '../../index';\nimport {\n  checkIsByMe,\n  checkIsPending,\n  checkIsFailed,\n  isFineCopy,\n  isFineEdit,\n  isFineResend,\n  isFineDelete,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientUserMessage;\n  userId: string;\n  disabled?: boolean;\n  showEdit(bool: boolean): void;\n  showRemove(bool: boolean): void;\n  resendMessage(message: ClientUserMessage): void;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  status: string;\n}\n\nexport default function OpenchannelUserMessage({\n  className,\n  message,\n  userId,\n  resendMessage,\n  disabled,\n  showEdit,\n  showRemove,\n  chainTop,\n  status,\n}: Props): ReactElement {\n  if (!message || message.messageType !== 'user') {\n    return null;\n  }\n\n  // hooks\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const messageRef = useRef(null);\n  const avatarRef = useRef(null);\n  const contextMenuRef = useRef(null);\n  const [contextStyle, setContextStyle] = useState({});\n\n  // consts\n  const isByMe = checkIsByMe(message, userId);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  const MemoizedMessageText = useMemo(() => () => {\n    const splitMessage = message.message.split(/\\r/);\n    const matchedMessage = splitMessage.map((word) => (word !== '' ? word : <br />));\n    if (message.updatedAt > 0) {\n      matchedMessage.push(\n        <Label\n          key={uuidv4()}\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_2}\n          calssName=\"sendbird-openchannel-user-message-word\"\n        >\n          {` ${stringSet.MESSAGE_EDITED} `}\n        </Label>,\n      );\n    }\n    return matchedMessage;\n  }, [message, message.updatedAt]);\n\n  // place context menu top depending clientHeight of message component\n  useEffect(() => {\n    if (messageRef?.current?.clientHeight > 36) {\n      setContextStyle({ top: '8px ' });\n    } else {\n      setContextStyle({ top: '2px' });\n    }\n  }, [window.innerWidth]);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-user-message',\n      ].join(' ')}\n      ref={messageRef}\n    >\n      <div className=\"sendbird-openchannel-user-message__left\">\n        {\n          !chainTop && (\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                <Avatar\n                  className=\"sendbird-openchannel-user-message__left__avatar\"\n                  src={sender.profileUrl || ''}\n                  ref={avatarRef}\n                  width=\"28px\"\n                  height=\"28px\"\n                  onClick={() => {\n                    if (!disableUserProfile) {\n                      toggleDropdown();\n                    }\n                  }}\n                />\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={avatarRef}\n                  parentContainRef={avatarRef}\n                  closeDropdown={closeDropdown}\n                  style={{ paddingTop: 0, paddingBottom: 0 }}\n                >\n                  {\n                    renderUserProfile\n                    ? (\n                      renderUserProfile({\n                        user: sender,\n                        close: closeDropdown,\n                      })\n                    )\n                    : (\n                      <UserProfile\n                        user={sender}\n                        onSuccess={closeDropdown}\n                        disableMessaging\n                      />\n                    )\n                  }\n                </MenuItems>\n              )}\n            />\n          )\n        }\n      </div>\n      <div className=\"sendbird-openchannel-user-message__right\">\n        {\n          !chainTop && (\n            <div className=\"sendbird-openchannel-user-message__right__top\">\n              <Label\n                className=\"sendbird-openchannel-user-message__right__top__sender-name\"\n                type={LabelTypography.CAPTION_2}\n                color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n              >\n                {\n                  sender && (\n                    sender.friendName\n                    || sender.nickname\n                    || sender.userId\n                  )\n                }\n              </Label>\n              <Label\n                className=\"sendbird-openchannel-user-message__right__top__sent-at\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {format(message.createdAt, 'p', { locale: dateLocale })}\n              </Label>\n            </div>\n          )\n        }\n        <div className=\"sendbird-openchannel-user-message__right__bottom\">\n          <Label\n            className=\"sendbird-openchannel-user-message__right__bottom__message\"\n            type={LabelTypography.BODY_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {MemoizedMessageText()}\n          </Label>\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-user-message__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-user-message__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-user-message__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n      {\n        <div\n          className=\"sendbird-openchannel-user-message__context-menu\"\n          ref={contextMenuRef}\n          style={contextStyle}\n        >\n          <ContextMenu\n            menuTrigger={(toggleDropdown) => (\n              showMenuTrigger({ message: message, userId: userId, status: status}) && (\n                <IconButton\n                  className=\"sendbird-openchannel-user-message__context-menu--icon\"\n                  width=\"32px\"\n                  height=\"32px\"\n                  onClick={() => {\n                    toggleDropdown();\n                  }}\n                >\n                  <Icon\n                    type={IconTypes.MORE}\n                    fillColor={IconColors.CONTENT_INVERSE}\n                    width=\"24px\"\n                    height=\"24px\"\n                  />\n                </IconButton>\n              )\n            )}\n            menuItems={(closeDropdown) => (\n              <MenuItems\n                parentRef={contextMenuRef}\n                parentContainRef={contextMenuRef}\n                closeDropdown={closeDropdown}\n                openLeft\n              >\n                {\n                  isFineCopy({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__copy\"\n                      onClick={() => {\n                        copyToClipboard(message.message);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__COPY}\n                    </MenuItem>\n                  )\n                }\n                {\n                  isFineEdit({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__edit\"\n                      onClick={() => {\n                        if (disabled) {\n                          return;\n                        }\n                        showEdit(true);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__EDIT}\n                    </MenuItem>\n                  )\n                }\n                {\n                  isFineResend({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__resend\"\n                      onClick={() => {\n                        resendMessage(message);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                    </MenuItem>\n                  )\n                }\n                {\n                  isFineDelete({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__delete\"\n                      onClick={() => {\n                        if (disabled) {\n                          return;\n                        }\n                        showRemove(true);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                    </MenuItem>\n                  )\n                }\n              </MenuItems>\n            )}\n          />\n        </div>\n      }\n    </div>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { ClientAdminMessage } from '../../index';\nimport './index.scss';\n\nimport Label, { LabelColors, LabelTypography } from '../Label';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientAdminMessage;\n}\n\nexport default function OpenChannelAdminMessage({\n  className,\n  message,\n}: Props): ReactElement {\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-admin-message',\n      ].join(' ')}\n    >\n      <Label\n        className=\"sendbird-openchannel-admin-message__text\"\n        type={LabelTypography.CAPTION_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {message.message || ''}\n      </Label>\n    </div>\n  );\n}\n","import Sendbird from 'sendbird';\n\nexport const URL_REG = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\nexport const createUrlTester = (regexp: RegExp) => (text: string): boolean => regexp.test(text);\nexport const checkOGIsEnalbed = (message: Sendbird.UserMessage): boolean => {\n  const { ogMetaData } = message;\n  if (!ogMetaData) {\n    return false;\n  }\n  const { url } = ogMetaData;\n  if (!url) {\n    return false;\n  }\n  return true;\n};\n","import React, { useState, useContext, useMemo, useRef, useEffect } from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ImageRenderer from '../ImageRenderer';\nimport LinkLabel from '../LinkLabel';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\n\nimport uuidv4 from '../../utils/uuid';\nimport { copyToClipboard } from '../OpenchannelUserMessage/utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { checkOGIsEnalbed, createUrlTester, URL_REG } from './utils';\nimport { ClientUserMessage } from '../../index';\nimport {\n  checkIsByMe,\n  checkIsPending,\n  checkIsFailed,\n  isFineCopy,\n  isFineEdit,\n  isFineResend,\n  isFineDelete,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  message: ClientUserMessage;\n  className?: string | Array<string>;\n  disabled?: boolean;\n  showEdit(bool: boolean): void;\n  showRemove(bool: boolean): void;\n  resendMessage(message: ClientUserMessage): void;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  status: string;\n  userId: string;\n}\n\nexport default function OpenchannelOGMessage({\n  message,\n  className,\n  disabled,\n  showEdit,\n  showRemove,\n  resendMessage,\n  chainTop,\n  status,\n  userId,\n}: Props): JSX.Element {\n  if (!message || message.messageType !== 'user') {\n    return null;\n  }\n\n  const { ogMetaData } = message;\n  const { defaultImage } = ogMetaData;\n\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const [contextStyle, setContextStyle] = useState({});\n  const messageComponentRef = useRef(null);\n  const contextMenuRef = useRef(null);\n  const avatarRef = useRef(null);\n\n  const isUrl = createUrlTester(URL_REG);\n  const isByMe = checkIsByMe(message, userId);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  const MemoizedMessageText = useMemo(() => () => {\n    const wordClassName = 'sendbird-openchannel-og-message--word';\n    const splitMessage = message.message.split(' ');\n    const matchedMessage = splitMessage\n      .map((word) => (\n        isUrl(word)\n          ? (\n            <LinkLabel\n              key={uuidv4()}\n              className={[\n                wordClassName,\n                'sendbird-openchannel-og-message--word--link'\n              ]}\n              src={word}\n              type={LabelTypography.BODY_1}\n              color={LabelColors.PRIMARY}\n            >\n              {word}\n            </LinkLabel>\n          )\n          : (\n            <Label\n              key={uuidv4()}\n              className={wordClassName}\n              type={LabelTypography.BODY_1}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {word}\n            </Label>\n          )\n      ));\n\n    if (message.updatedAt > 0) {\n      matchedMessage.push(\n        <Label\n          key={uuidv4()}\n          className={wordClassName}\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {stringSet.MESSAGE_EDITED}\n        </Label>,\n      );\n    }\n\n    return matchedMessage;\n  }, [message, message.updatedAt]);\n\n  const openLink = () => {\n    if (checkOGIsEnalbed(message)) {\n      const { url } = ogMetaData;\n      window.open(url);\n    }\n  };\n\n  // place conxt menu top depending clientHeight of message component\n  useEffect(() => {\n    if (messageComponentRef?.current?.clientHeight > 36) {\n      setContextStyle({ top: '8px ' });\n    } else {\n      setContextStyle({ top: '2px' });\n    }\n  }, [window.innerWidth]);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-og-message',\n      ].join(' ')}\n      ref={messageComponentRef}\n    >\n      <div\n        className=\"sendbird-openchannel-og-message__top\"\n      >\n        <div className=\"sendbird-openchannel-og-message__top__left\">\n          {\n            !chainTop && (\n              <ContextMenu\n                menuTrigger={(toggleDropdown) => (\n                  <Avatar\n                    className=\"sendbird-openchannel-og-message__top__left__avatar\"\n                    src={sender.profileUrl || ''}\n                    ref={avatarRef}\n                    width=\"28px\"\n                    height=\"28px\"\n                    onClick={() => {\n                      if (!disableUserProfile) {\n                        toggleDropdown();\n                      }\n                    }}\n                  />\n                )}\n                menuItems={(closeDropdown) => (\n                  <MenuItems\n                    parentRef={avatarRef}\n                    parentContainRef={avatarRef}\n                    closeDropdown={closeDropdown}\n                    style={{ paddingTop: 0, paddingBottom: 0 }}\n                  >\n                    {\n                      renderUserProfile\n                        ? (\n                          renderUserProfile({\n                            user: sender,\n                            close: closeDropdown,\n                          })\n                        )\n                        : (\n                          <UserProfile\n                            user={sender}\n                            onSuccess={closeDropdown}\n                            disableMessaging\n                          />\n                        )\n                    }\n                  </MenuItems>\n                )}\n              />\n            )\n          }\n        </div>\n        <div className=\"sendbird-openchannel-og-message__top__right\">\n          {\n            !chainTop && (\n              <div className=\"sendbird-openchannel-og-message__top__right__title\">\n                <Label\n                  className=\"sendbird-openchannel-og-message__top__right__title__sender-name\"\n                  type={LabelTypography.CAPTION_2}\n                  color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n                >\n                  {\n                    sender && (\n                      sender.friendName\n                      || sender.nickname\n                      || sender.userId\n                    )\n                  }\n                </Label>\n                <Label\n                  className=\"sendbird-openchannel-og-message__top__right__title__sent-at\"\n                  type={LabelTypography.CAPTION_3}\n                  color={LabelColors.ONBACKGROUND_3}\n                >\n                  {format(message.createdAt, 'p', { locale: dateLocale })}\n                </Label>\n              </div>\n            )\n          }\n          <div className=\"sendbird-openchannel-og-message__top__right__description\">\n            <Label\n              className=\"sendbird-openchannel-og-message__top__right__description__message\"\n              type={LabelTypography.BODY_1}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {MemoizedMessageText()}\n            </Label>\n          </div>\n        </div>\n        {\n          <div\n            className=\"sendbird-openchannel-og-message__top__context-menu\"\n            ref={contextMenuRef}\n            style={contextStyle}\n          >\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                showMenuTrigger({ message: message, userId: userId, status: status }) && (\n                  <IconButton\n                    className=\"sendbird-openchannel-og-message__top__context-menu--icon\"\n                    width=\"32px\"\n                    height=\"32px\"\n                    onClick={() => {\n                      toggleDropdown();\n                    }}\n                  >\n                    <Icon\n                      type={IconTypes.MORE}\n                      fillColor={IconColors.CONTENT_INVERSE}\n                      width=\"24px\"\n                      height=\"24px\"\n                    />\n                  </IconButton>\n                )\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={contextMenuRef}\n                  parentContainRef={contextMenuRef}\n                  closeDropdown={closeDropdown}\n                  openLeft\n                >\n                  {\n                    isFineCopy({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__copy\"\n                        onClick={() => {\n                          copyToClipboard(message.message);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__COPY}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineEdit({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__edit\"\n                        onClick={() => {\n                          if (disabled) {\n                            return;\n                          }\n                          showEdit(true);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__EDIT}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineResend({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__resend\"\n                        onClick={() => {\n                          resendMessage(message);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineDelete({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__delete\"\n                        onClick={() => {\n                          if (disabled) {\n                            return;\n                          }\n                          showRemove(true);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                      </MenuItem>\n                    )\n                  }\n                </MenuItems>\n              )}\n            />\n          </div>\n        }\n      </div>\n      <div className=\"sendbird-openchannel-og-message__bottom\">\n        <div className=\"sendbird-openchannel-og-message__bottom__og-tag\">\n          {\n            ogMetaData.url && (\n              <Label\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__url\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_2}\n              >\n                {ogMetaData.url}\n              </Label>\n            )\n          }\n          {\n            ogMetaData.title && (\n              <LinkLabel\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__title\"\n                src={ogMetaData.url}\n                type={LabelTypography.SUBTITLE_2}\n                color={LabelColors.PRIMARY}\n              >\n                {\n                  ogMetaData.title\n                }\n              </LinkLabel>\n            )\n          }\n          {\n            ogMetaData.description && (\n              <Label\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__description\"\n                type={LabelTypography.BODY_2}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {ogMetaData.description}\n              </Label>\n            )\n          }\n          {\n            ogMetaData.url && (\n              <div\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__thumbnail\"\n                role=\"button\"\n                onClick={openLink}\n                onKeyDown={openLink}\n                tabIndex={0}\n              >\n                {\n                  defaultImage && (\n                    <ImageRenderer\n                      className=\"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image\"\n                      url={defaultImage.url || ''}\n                      alt={defaultImage.alt || ''}\n                      height=\"189px\"\n                      defaultComponent={(\n                        <div className=\"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image--placeholder\">\n                          <Icon\n                            type={IconTypes.THUMBNAIL_NONE}\n                            width=\"56px\"\n                            height=\"56px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  )\n                }\n              </div>\n            )\n          }\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-og-message__top__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-og-message__top__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-og-message__top__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n","export const SUPPORTING_TYPES = {\n  IMAGE: 'IMAGE',\n  VIDEO: 'VIDEO',\n  UNSUPPORTED: 'UNSUPPORTED',\n};\n\nconst SUPPORTED_MIMES = {\n  IMAGE: [\n    'image/jpeg',\n    'image/jpg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  VIDEO: [\n    'video/mpeg',\n    'video/ogg',\n    'video/webm',\n    'video/mp4',\n  ],\n};\n\nexport const getSupportingFileType = (type: string): string => {\n  if (SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.IMAGE;\n  }\n  if (SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.VIDEO;\n  }\n  return SUPPORTING_TYPES.UNSUPPORTED;\n}\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useContext,\n} from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\nimport { SUPPORTING_TYPES, getSupportingFileType } from './utils';\nimport { ClientFileMessage } from '../../index';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ImageRenderer from '../ImageRenderer';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\nimport {\n  checkIsByMe,\n  checkIsSent,\n  checkIsPending,\n  checkIsFailed,\n  isFineResend,\n  isFineDelete,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientFileMessage;\n  disabled: boolean;\n  userId: string;\n  status: string;\n  chainTop: boolean;\n  chainBottom: boolean;\n  onClick(bool: boolean): void,\n  showRemove(bool: boolean): void,\n  resendMessage(message: ClientFileMessage): void;\n}\n\nexport default function OpenchannelThumbnailMessage({\n  className,\n  message,\n  disabled,\n  userId,\n  status,\n  chainTop,\n  onClick,\n  showRemove,\n  resendMessage,\n}: Props): JSX.Element {\n  const {\n    type,\n    url,\n    localUrl,\n    thumbnails,\n  } = message;\n  const thumbnailUrl = (thumbnails && thumbnails.length > 0 && thumbnails[0].url) || null;\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const [messageWidth, setMessageWidth] = useState(360);\n  const messageRef = useRef(null);\n  const contextMenuRef = useRef(null);\n  const avatarRef = useRef(null);\n\n  const memorizedThumbnailPlaceHolder = useMemo(() => (type) => ({ style }) => ( // eslint-disable-line\n    <div style={style}>\n      <Icon\n        type={type}\n        fillColor={IconColors.ON_BACKGROUND_2}\n        width=\"56px\"\n        height=\"56px\"\n        />\n    </div>\n  ), []);\n\n  const isByMe = checkIsByMe(message, userId);\n  const isMessageSent = checkIsSent(status);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  useEffect(() => {\n    const thumbnailWidth = messageRef?.current?.clientWidth - 80;\n    setMessageWidth(thumbnailWidth > 360 ? 360 : thumbnailWidth);\n  }, []);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-thumbnail-message',\n      ].join(' ')}\n      ref={messageRef}\n    >\n      <div className=\"sendbird-openchannel-thumbnail-message__left\">\n        {\n          !chainTop && (\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                <Avatar\n                  className=\"sendbird-openchannel-thumbnail-message__left__avatar\"\n                  src={sender.profileUrl || ''}\n                  ref={avatarRef}\n                  width=\"28px\"\n                  height=\"28px\"\n                  onClick={() => {\n                    if (!disableUserProfile) {\n                      toggleDropdown();\n                    }\n                  }}\n                />\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={avatarRef}\n                  parentContainRef={avatarRef}\n                  closeDropdown={closeDropdown}\n                  style={{ paddingTop: 0, paddingBottom: 0 }}\n                >\n                  {\n                    renderUserProfile\n                      ? (\n                        renderUserProfile({\n                          user: sender,\n                          close: closeDropdown,\n                        })\n                      )\n                      : (\n                        <UserProfile\n                          user={sender}\n                          onSuccess={closeDropdown}\n                          disableMessaging\n                        />\n                      )\n                  }\n                </MenuItems>\n              )}\n            />\n          )\n        }\n      </div>\n      <div className=\"sendbird-openchannel-thumbnail-message__right\">\n        {\n          !chainTop && (\n            <div className=\"sendbird-openchannel-thumbnail-message__right__title\">\n              <Label\n                className=\"sendbird-openchannel-thumbnail-message__right__title__sender-name\"\n                type={LabelTypography.CAPTION_2}\n                color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n              >\n                {\n                  sender && (\n                    sender.friendName\n                    || sender.nickname\n                    || sender.userId\n                  )\n                }\n              </Label>\n              <Label\n                className=\"sendbird-openchannel-thumbnail-message__right__title__sent-at\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {format(message.createdAt, 'p', { locale: dateLocale })}\n              </Label>\n            </div>\n          )\n        }\n        <div className=\"sendbird-openchannel-thumbnail-message__right__body\">\n          <div\n            className=\"sendbird-openchannel-thumbnail-message__right__body__wrap\"\n            role=\"button\"\n            onClick={() => {\n              if (isMessageSent) {\n                onClick(true);\n              }\n            }}\n            onKeyDown={() => {\n              if (isMessageSent) {\n                onClick(true);\n              }\n            }}\n            tabIndex={0}\n          >\n            <div className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__overlay\" />\n            {\n              {\n                [SUPPORTING_TYPES.VIDEO]: (\n                  (url || localUrl)\n                    ? (\n                      <div className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video\" >\n                        {\n                          (thumbnailUrl)\n                            ? (\n                              <ImageRenderer\n                                className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video\"\n                                url={thumbnailUrl}\n                                width={messageWidth}\n                                height=\"270px\"\n                                alt=\"image\"\n                                placeHolder={memorizedThumbnailPlaceHolder(IconTypes.PLAY)}\n                              />\n                            )\n                            : (\n                              <video className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video__video\">\n                                <source src={url || localUrl} type={type} />\n                              </video>\n                            )\n                        }\n                        <Icon\n                          className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video__icon\"\n                          type={IconTypes.PLAY}\n                          fillColor={IconColors.ON_BACKGROUND_2}\n                          width=\"56px\"\n                          height=\"56px\"\n                        />\n                      </div>\n                    )\n                    : (\n                      <Icon\n                        className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video--icon\"\n                        type={IconTypes.PHOTO}\n                        fillColor={IconColors.ON_BACKGROUND_2}\n                        width=\"56px\"\n                        height=\"56px\"\n                      />\n                    )\n                ),\n                [SUPPORTING_TYPES.IMAGE]: (\n                  (url || localUrl)\n                    ? (\n                      <ImageRenderer\n                        className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__image\"\n                        url={thumbnailUrl || url || localUrl}\n                        alt=\"image\"\n                        width={messageWidth}\n                        height=\"270px\"\n                        placeHolder={memorizedThumbnailPlaceHolder(IconTypes.PHOTO)}\n                      />\n                    )\n                    : (\n                      <Icon\n                        className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__image--icon\"\n                        type={IconTypes.PHOTO}\n                        fillColor={IconColors.ON_BACKGROUND_2}\n                        width=\"56px\"\n                        height=\"56px\"\n                      />\n                    )\n                ),\n                [SUPPORTING_TYPES.UNSUPPORTED]: (\n                  <Icon\n                    className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__unknown\"\n                    type={IconTypes.PHOTO}\n                    fillColor={IconColors.ON_BACKGROUND_2}\n                    width=\"56px\"\n                    height=\"56px\"\n                  />\n                ),\n              }[getSupportingFileType(type)]\n            }\n          </div>\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-thumbnail-message__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-thumbnail-message__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-thumbnail-message__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n      <div\n        className=\"sendbird-openchannel-thumbnail-message__context-menu\"\n        ref={contextMenuRef}\n      >\n        <ContextMenu\n          menuTrigger={(toggleDropdown) => (\n            showMenuTrigger({ message, userId, status }) && (\n              <IconButton\n                className=\"sendbird-openchannel-thumbnail-message__context-menu--icon\"\n                width=\"32px\"\n                height=\"32px\"\n                onClick={toggleDropdown}\n              >\n                <Icon\n                  type={IconTypes.MORE}\n                  fillColor={IconColors.CONTENT_INVERSE}\n                  width=\"24px\"\n                  height=\"24px\"\n                />\n              </IconButton>\n            )\n          )}\n          menuItems={(closeDropdown) => (\n            <MenuItems\n              parentRef={contextMenuRef}\n              parentContainRef={contextMenuRef}\n              closeDropdown={closeDropdown}\n              openLeft\n            >\n              {\n                isFineResend({ message, userId, status }) && (\n                  <MenuItem\n                    onClick={() => {\n                      resendMessage(message);\n                      closeDropdown();\n                    }}\n                  >\n                    {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                  </MenuItem>\n                )\n              }\n              {\n                isFineDelete({ message, userId, status }) && (\n                  <MenuItem\n                    onClick={() => {\n                      if (disabled) {\n                        return;\n                      }\n                      showRemove(true);\n                      closeDropdown();\n                    }}\n                  >\n                    {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                  </MenuItem>\n                )\n              }\n            </MenuItems>\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n","import { IconTypes } from '../Icon';\n\nexport const checkFileType = (fileUrl: string): string => {\n  const audioFile = /(\\.mp3)$/i;\n  const gifFile = /(\\.gif)$/i;\n  if (audioFile.test(fileUrl)) {\n    return IconTypes.FILE_AUDIO;\n  }\n  if (gifFile.test(fileUrl)) {\n    return IconTypes.GIF\n  }\n  return IconTypes.FILE_DOCUMENT;\n}\n\nexport const truncate = (fullStr:string, strLen: number): string => {\n  if (fullStr === null || fullStr === undefined) return '';\n  if (fullStr.length <= strLen) return fullStr;\n  const separator = '...';\n  const sepLen = separator.length;\n  const charsToShow = strLen - sepLen;\n  const frontChars = Math.ceil(charsToShow / 2);\n  const backChars = Math.floor(charsToShow / 2);\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n","import React, { useContext, useRef } from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport TextButton from '../TextButton';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { checkFileType, truncate } from './utils';\nimport { ClientFileMessage } from '../../index';\nimport {\n  checkIsByMe,\n  checkIsPending,\n  checkIsFailed,\n  isFineDelete,\n  isFineResend,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientFileMessage;\n  userId: string;\n  disabled?: boolean;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  status: string;\n  showRemove(bool: boolean): void;\n  resendMessage(message: ClientFileMessage): void;\n}\n\nexport default function OpenchannelFileMessage({\n  className,\n  message,\n  userId,\n  disabled,\n  chainTop,\n  status,\n  showRemove,\n  resendMessage,\n}: Props): JSX.Element {\n  const contextMenuRef = useRef(null);\n  const avatarRef = useRef(null);\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n\n  const openFileUrl = () => { window.open(message.url); };\n\n  const isByMe = checkIsByMe(message, userId);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-file-message',\n      ].join(' ')}\n    >\n      <div className=\"sendbird-openchannel-file-message__left\">\n        {\n            !chainTop && (\n              <ContextMenu\n                menuTrigger={(toggleDropdown) => (\n                  <Avatar\n                    className=\"sendbird-openchannel-file-message__left__avatar\"\n                    src={sender.profileUrl || ''}\n                    ref={avatarRef}\n                    width=\"28px\"\n                    height=\"28px\"\n                    onClick={() => {\n                      if (!disableUserProfile) {\n                        toggleDropdown();\n                      }\n                    }}\n                  />\n                )}\n                menuItems={(closeDropdown) => (\n                  <MenuItems\n                    parentRef={avatarRef}\n                    parentContainRef={avatarRef}\n                    closeDropdown={closeDropdown}\n                    style={{ paddingTop: 0, paddingBottom: 0 }}\n                  >\n                    {\n                      renderUserProfile\n                      ? (\n                        renderUserProfile({\n                          user: sender,\n                          close: closeDropdown,\n                        })\n                      )\n                      : (\n                        <UserProfile\n                          user={sender}\n                          onSuccess={closeDropdown}\n                          disableMessaging\n                        />\n                      )\n                    }\n                  </MenuItems>\n                )}\n              />\n            )\n          }\n      </div>\n      <div className=\"sendbird-openchannel-file-message__right\">\n        {\n          !chainTop && (\n            <div className=\"sendbird-openchannel-file-message__right__title\">\n              <Label\n                className=\"sendbird-openchannel-file-message__right__title__sender-name\"\n                type={LabelTypography.CAPTION_2}\n                color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n              >\n                {\n                  sender && (\n                    sender.friendName\n                    || sender.nickname\n                    || sender.userId\n                  )\n                }\n              </Label>\n              <Label\n                className=\"sendbird-openchannel-file-message__right__title__sent-at\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {format(message.createdAt, 'p', { locale: dateLocale })}\n              </Label>\n            </div>\n          )\n        }\n        <div className=\"sendbird-openchannel-file-message__right__body\">\n          {\n            checkFileType(message.url) && (\n              <Icon\n                className=\"sendbird-openchannel-file-message__right__body__icon\"\n                type={checkFileType(message.url)}\n                fillColor={IconColors.PRIMARY}\n                width=\"48px\"\n                height=\"48px\"\n              />\n            )\n          }\n          <TextButton\n            className=\"sendbird-openchannel-file-message__right__body__file-name\"\n            onClick={openFileUrl}\n          >\n            <Label\n              type={LabelTypography.BODY_1}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {truncate(message.name || message.url, 40)}\n            </Label>\n          </TextButton>\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-file-message__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-file-message__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-file-message__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n      <div\n        className=\"sendbird-openchannel-file-message__context-menu\"\n        ref={contextMenuRef}\n      >\n        {\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                showMenuTrigger({ message, userId, status }) && (\n                  <IconButton\n                    className=\"sendbird-openchannel-file-message__context-menu__icon\"\n                    width=\"32px\"\n                    height=\"32px\"\n                    onClick={toggleDropdown}\n                  >\n                    <Icon\n                      type={IconTypes.MORE}\n                      width=\"24px\"\n                      height=\"24px\"\n                    />\n                  </IconButton>\n                )\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={contextMenuRef}\n                  parentContainRef={contextMenuRef}\n                  closeDropdown={closeDropdown}\n                  openLeft\n                >\n                  {\n                    isFineResend({ message, userId, status }) && (\n                      <MenuItem\n                        onClick={() => {\n                          if (disabled) { return; }\n                          resendMessage(message);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineDelete({ message, userId, status }) && (\n                      <MenuItem\n                        onClick={() => {\n                          if (disabled) { return; }\n                          showRemove(true);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                      </MenuItem>\n                    )\n                  }\n                </MenuItems>\n              )}\n            />\n        }\n      </div>\n    </div>\n  );\n}\n","import React, { useContext } from 'react'\nimport { ClientFileMessage, ClientUserMessage } from '../../..'\nimport Modal from '../../../ui/Modal';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  onCloseModal(): void;\n  onDeleteMessage(message: ClientUserMessage | ClientFileMessage, callback?: () => void): void;\n}\n\nexport default function RemoveMessageModal({\n  onCloseModal,\n  onDeleteMessage,\n}: Props): JSX.Element {\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <Modal\n      onCancel={onCloseModal}\n      onSubmit={onDeleteMessage}\n      submitText=\"Delete\"\n      titleText={stringSet.MODAL__DELETE_MESSAGE__TITLE}\n    />\n  );\n}\n","// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\nconst SUPPORTED_MIMES = {\n  IMAGE: [\n    'image/jpeg',\n    'image/jpg',\n    'image/png',\n    'image/gif',\n    'image/svg+xml',\n    'image/webp', // not supported in IE\n  ],\n  VIDEO: [\n    'video/mpeg',\n    'video/ogg',\n    'video/webm',\n    'video/mp4',\n  ],\n};\n\nexport const isImage = (type) => SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0;\nexport const isVideo = (type) => SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0;\nexport const isGif = (type) => type === 'image/gif';\nexport const unSupported = (type) => !(isImage(type) || isVideo(type));\n\nexport default SUPPORTED_MIMES;\n","import { EveryMessage } from '../../..';\nimport { isImage, isVideo } from '../../../ui/FileViewer/types';\n\nexport const MessageTypes = {\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n  FILE: 'FILE',\n  THUMBNAIL: 'THUMBNAIL',\n  OG: 'OG',\n  UNKNOWN: 'UNKNOWN',\n};\n\nexport const SendingMessageStatus = {\n  NONE: 'none',\n  SUCCEEDED: 'succeeded',\n  FAILED: 'failed',\n  PENDING: 'pending',\n};\n\nexport const getMessageType = (message: EveryMessage): string => {\n  if ((message.isUserMessage && message.isUserMessage()) || message.messageType === 'user') {\n    return (message.ogMetaData)\n      ? MessageTypes.OG\n      : MessageTypes.USER;\n  }\n  if (message.isAdminMessage && message.isAdminMessage()) {\n    return MessageTypes.ADMIN;\n  }\n  if (message.messageType === 'file') {\n    return (isImage(message.type) || isVideo(message.type))\n      ? MessageTypes.THUMBNAIL\n      : MessageTypes.FILE;\n  }\n  return MessageTypes.UNKNOWN;\n};\n\nexport default {\n  MessageTypes,\n  SendingMessageStatus,\n  getMessageType,\n};\n","import React, {\n  useState,\n  useRef,\n  ReactElement,\n  useMemo,\n  useContext,\n} from 'react';\n\nimport format from 'date-fns/format';\nimport * as types from '../../../index';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nimport OpenChannelUserMessage from '../../../ui/OpenchannelUserMessage';\nimport OpenChannelAdminMessage from '../../../ui/OpenChannelAdminMessage';\nimport OpenChannelOGMessage from '../../../ui/OpenchannelOGMessage';\nimport OpenChannelThumbnailMessage from '../../../ui/OpenchannelThumbnailMessage';\nimport OpenChannelFileMessage from '../../../ui/OpenchannelFileMessage';\n// import UnknownMessage from '../../../ui/UnknownMessage';\n\nimport DateSeparator from '../../../ui/DateSeparator';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport MessageInput from '../../../ui/MessageInput';\nimport FileViewer from '../../../ui/FileViewer';\n\nimport RemoveMessageModal from './RemoveMessageModal';\nimport {\n  MessageTypes,\n  SendingMessageStatus,\n  getMessageType,\n} from './types';\nimport { OpenChannel } from 'sendbird';\n\ninterface Props {\n  message: types.EveryMessage;\n  userId: string;\n  disabled: boolean;\n  editDisabled: boolean;\n  hasSeparator: boolean;\n  channel: OpenChannel;\n  renderCustomMessage?: types.RenderCustomMessage,\n  deleteMessage(message: types.ClientUserMessage | types.ClientFileMessage, callback?: () => void): void;\n  updateMessage(messageId: number, text: string, callback?: () => void): void;\n  resendMessage(failedMessage: types.ClientUserMessage | types.ClientFileMessage): void;\n  status?: string;\n  chainTop: boolean;\n  chainBottom: boolean;\n}\n\nexport default function MessageHoc({\n  message,\n  userId,\n  disabled,\n  editDisabled,\n  hasSeparator,\n  channel,\n  renderCustomMessage,\n  deleteMessage,\n  updateMessage,\n  resendMessage,\n  status,\n  chainTop,\n  chainBottom,\n}: Props): ReactElement {\n  let sender: SendBird.User = null;\n  if (message.messageType !== 'admin') {\n    sender = message.sender;\n  }\n\n  const { dateLocale } = useContext(LocalizationContext);\n\n  const RenderedMessage = useMemo(() => {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, channel, chainTop, chainBottom);\n    }\n    return null;\n  }, [message, renderCustomMessage]);\n\n  const [showEdit, setShowEdit] = useState(false);\n  const [showRemove, setShowRemove] = useState(false);\n  const [showFileViewer, setShowFileViewer] = useState(false);\n  const editMessageInputRef = useRef(null);\n\n  let isByMe = false;\n\n  if (sender && message.messageType !== 'admin') {\n    // pending and failed messages are by me\n    isByMe = (userId === sender.userId)\n      || (message.requestState === SendingMessageStatus.PENDING)\n      || (message.requestState === SendingMessageStatus.FAILED);\n  }\n\n  if(RenderedMessage) {\n    return (\n      <div className=\"sendbird-msg-hoc sendbird-msg--scroll-ref\">\n        <RenderedMessage message={message} />\n      </div>\n    );\n  }\n\n  if (message.messageType === 'user' && showEdit) {\n    return (\n      <MessageInput\n        isEdit\n        disabled={editDisabled}\n        ref={editMessageInputRef}\n        name={message.messageId}\n        onSendMessage={updateMessage}\n        onCancelEdit={() => { setShowEdit(false); }}\n        value={message.message}\n      />\n    );\n  }\n\n  return (\n    <div className=\"sendbird-msg-hoc sendbird-msg--scroll-ref\">\n      {/* date-separator */}\n      {\n        hasSeparator && (\n          <DateSeparator>\n            <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n              {format(message.createdAt, 'MMMM dd, yyyy', { locale: dateLocale })}\n            </Label>\n          </DateSeparator>\n        )\n      }\n      {/* Message */}\n      {\n        {\n          [MessageTypes.ADMIN]: (() => {\n            if (message.messageType === 'admin') {\n              return (\n                <OpenChannelAdminMessage message={message} />\n              )\n            }\n          })(),\n          [MessageTypes.FILE]: (() => {\n            if (message.messageType === 'file') {\n              return (\n                <OpenChannelFileMessage\n                  message={message}\n                  disabled={disabled}\n                  userId={userId}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  status={status}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.OG]: (() => {\n            if (message.messageType === 'user') {\n              return (\n                <OpenChannelOGMessage\n                  message={message}\n                  status={status}\n                  userId={userId}\n                  showEdit={setShowEdit}\n                  disabled={disabled}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.THUMBNAIL]: (() => {\n            if (message.messageType === 'file') {\n              return (\n                <OpenChannelThumbnailMessage\n                  message={message}\n                  disabled={disabled}\n                  userId={userId}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  onClick={setShowFileViewer}\n                  status={status}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.USER]: (() => {\n            if (message.messageType === 'user') {\n              return (\n                <OpenChannelUserMessage\n                  message={message}\n                  userId={userId}\n                  disabled={disabled}\n                  showEdit={setShowEdit}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  status={status}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.UNKNOWN]: (() => {\n            return;\n            // return (\n            //   <OpenChannelUnknownMessage message={message} />\n            // );\n          })(),\n        }[getMessageType(message)]\n      }\n      {/* Modal */}\n      {\n        showRemove && (\n          <RemoveMessageModal\n            onCloseModal={() => setShowRemove(false)}\n            onDeleteMessage={() => {\n              if (message.messageType !== 'admin') {\n                deleteMessage(message);\n              }\n            }}\n          />\n        )\n      }\n      {\n        (showFileViewer && message.messageType === 'file') && (\n          <FileViewer\n            onClose={() => setShowFileViewer(false)}\n            message={message}\n            onDelete={() => deleteMessage(message)}\n            isByMe={isByMe}\n          />\n        )\n      }\n      {/* {\n        !((message.isFileMessage && message.isFileMessage()) || message.messageType === 'file')\n        && !(message.isAdminMessage && message.isAdminMessage())\n        && !(((message.isUserMessage && message.isUserMessage()) || message.messageType === 'user'))\n        && !(showFileViewer)\n        && (\n          <UnknownMessage\n            message={message}\n            status={status}\n            isByMe={isByMe}\n            showRemove={setShowRemove}\n            chainTop={chainTop}\n            chainBottom={chainBottom}\n          />\n        )\n      } */}\n    </div>\n  );\n}\n","import React, { ReactElement, useRef, useState, useMemo } from 'react';\nimport isSameDay from 'date-fns/isSameDay';\nimport {\n  ClientFileMessage,\n  ClientUserMessage,\n  EveryMessage,\n  RenderCustomMessage,\n} from '../../../index';\nimport MessageHoc from './MessageHOC';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\n\nimport PlaceHolder, { PlaceHolderTypes } from '../../../ui/PlaceHolder';\nimport './openchannel-conversation-scroll.scss';\nimport { compareMessagesForGrouping } from '../utils';\n\ninterface Props {\n  openchannel: SendBird.OpenChannel;\n  user: SendBird.User;\n  allMessages: Array<EveryMessage>;\n  useMessageGrouping: boolean;\n  isOnline: boolean;\n  hasMore: boolean;\n  renderCustomMessage?: RenderCustomMessage;\n  onScroll(callback?: () => void): void;\n  updateMessage(messageId: number, text: string, callback?: () => void): void;\n  deleteMessage(message: ClientUserMessage | ClientFileMessage, callback?: () => void): void;\n  resendMessage(failedMessage: ClientUserMessage | ClientFileMessage): void;\n}\n\nfunction OpenchannelConversationScroll(\n  {\n    useMessageGrouping = true,\n    openchannel,\n    user,\n    allMessages,\n    isOnline = true,\n    hasMore,\n    onScroll,\n    renderCustomMessage,\n    updateMessage,\n    deleteMessage,\n    resendMessage,\n  }: Props,\n  ref: React.RefObject<HTMLDivElement>,\n): ReactElement {\n  const scrollRef = ref || useRef(null);\n  const [showScrollDownButton, setShowScrollDownButton] = useState(false);\n\n  const handleOnScroll = (e) => {\n    const element = e.target;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = element;\n    if (\n      (scrollHeight > scrollTop + clientHeight)\n      && (window.navigator.userAgent.indexOf('MSIE ') < 0) // don't show button in IE\n    ) {\n      setShowScrollDownButton(true);\n    } else {\n      setShowScrollDownButton(false);\n    }\n\n    if (!hasMore) {\n      return;\n    }\n    if (scrollTop === 0) {\n      const nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n      const first = nodes && nodes[0];\n      onScroll(() => {\n        try {\n          first.scrollIntoView();\n        } catch (error) { }\n      });\n    }\n  };\n\n  const scrollToBottom = () => {\n    if (scrollRef && scrollRef.current) {\n      scrollRef.current.scrollTo(0, scrollRef.current.scrollHeight);\n      setShowScrollDownButton(false);\n    }\n  };\n\n  const hasMessage = useMemo(() => {\n    return allMessages.length > 0;\n  }, [allMessages.length]);\n\n  return (\n    <div\n      className=\"sendbird-openchannel-conversation-scroll\"\n      onScroll={handleOnScroll}\n      ref={scrollRef}\n    >\n      <div className=\"sendbird-openchannel-conversation-scroll__container\">\n        <div className=\"sendbird-openchannel-conversation-scroll__container__padding\" />\n        <div className={`sendbird-openchannel-conversation-scroll__container__item-container${hasMessage ? '' : '--no-messages'}`}>\n          {\n            hasMessage\n              ? (\n                allMessages.map((message, index) => {\n                  let status: string;\n\n                  if (message.messageType !== 'admin') {\n                    status = message.sendingStatus;\n                  }\n\n                  const previousMessage = allMessages[index - 1];\n                  const nextMessage = allMessages[index - 1];\n\n                  const previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n                  const currentCreatedAt = message.createdAt;\n                  // https://stackoverflow.com/a/41855608\n                  const hasSeparator = !(previousMessageCreatedAt && (\n                    isSameDay(currentCreatedAt, previousMessageCreatedAt)\n                  ));\n\n                  const [chainTop, chainBottom] = useMessageGrouping\n                    ? compareMessagesForGrouping(previousMessage, message, nextMessage)\n                    : [false, false];\n                  return (\n                    <MessageHoc\n                      renderCustomMessage={renderCustomMessage}\n                      channel={openchannel}\n                      key={message.messageId}\n                      message={message}\n                      status={status}\n                      userId={user.userId}\n                      disabled={!isOnline}\n                      editDisabled={openchannel.isFrozen}\n                      hasSeparator={hasSeparator}\n                      chainTop={chainTop}\n                      chainBottom={chainBottom}\n                      deleteMessage={deleteMessage}\n                      updateMessage={updateMessage}\n                      resendMessage={resendMessage}\n                    />\n                  )\n                })\n              )\n              : (\n                <PlaceHolder\n                  className=\"sendbird-openchannel-conversation-scroll__container__place-holder\"\n                  type={PlaceHolderTypes.NO_MESSAGES}\n                />\n              )\n          }\n        </div>\n        {\n          showScrollDownButton && (\n            <div\n              className=\"sendbird-openchannel-conversation-scroll__container__scroll-bottom-button\"\n              onClick={scrollToBottom}\n              onKeyDown={scrollToBottom}\n              tabIndex={0}\n              role=\"button\"\n            >\n              <Icon\n                width=\"24px\"\n                height=\"24px\"\n                type={IconTypes.CHEVRON_DOWN}\n                fillColor={IconColors.CONTENT}\n              />\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default React.forwardRef(OpenchannelConversationScroll);\n","export const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const RESET_MESSAGES = 'RESET_MESSAGES';\nexport const GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nexport const GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nexport const GET_PREV_MESSAGES_FAIL = 'GET_PREV_MESSAGES_FAIL';\nexport const SENDING_MESSAGE_FAILED = 'SENDING_MESSAGE_FAILED';\nexport const SENDING_MESSAGE_SUCCEEDED = 'SENDING_MESSAGE_SUCCEEDED';\nexport const SENDING_MESSAGE_START = 'SENDING_MESSAGE_START';\nexport const RESENDING_MESSAGE_START = 'RESENDING_MESSAGE_START';\nexport const FETCH_PARTICIPANT_LIST = 'FETCH_PARTICIPANT_LIST';\nexport const FETCH_BANNED_USER_LIST = 'FETCH_BANNED_USER_LIST';\nexport const FETCH_MUTED_USER_LIST= 'FETCH_MUTED_USER_LIST';\nexport const TRIM_MESSAGE_LIST= 'TRIM_MESSAGE_LIST';\n\n// event handlers\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nexport const ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED';\nexport const ON_USER_ENTERED = 'ON_USER_ENTERED';\nexport const ON_USER_EXITED = 'ON_USER_EXITED';\nexport const ON_USER_MUTED = 'ON_USER_MUTED';\nexport const ON_USER_UNMUTED = 'ON_USER_UNMUTED';\nexport const ON_USER_BANNED = 'ON_USER_BANNED';\nexport const ON_USER_UNBANNED = 'ON_USER_UNBANNED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_META_DATA_CREATED = 'ON_META_DATA_CREATED';\nexport const ON_META_DATA_UPDATED = 'ON_META_DATA_UPDATED';\nexport const ON_META_DATA_DELETED = 'ON_META_DATA_DELETED';\nexport const ON_META_COUNTERS_CREATED = 'ON_META_COUNTERS_CREATED';\nexport const ON_META_COUNTERS_UPDATED = 'ON_META_COUNTERS_UPDATED';\nexport const ON_META_COUNTERS_DELETED = 'ON_META_COUNTERS_DELETED';\nexport const ON_MENTION_RECEIVED = 'ON_MENTION_RECEIVED';\n","import { State as initialStateInterface } from './initialState';\nimport * as actionTypes from './actionTypes';\n\nimport compareIds from '../../../utils/compareIds.js';\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\n// @ts-ignore: Unreachable code error\ninterface ActionInterface {\n  type: string;\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const gottenChannel = action.payload;\n      const operators = gottenChannel.operators;\n      if (\n        !state.isInvalid\n        && state.currentOpenChannel\n        && state.currentOpenChannel.url\n        && (state.currentOpenChannel.url === gottenChannel.url)\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: gottenChannel,\n        isInvalid: false,\n        operators: operators,\n        participants: operators,\n        bannedParticipantIds: [],\n        mutedParticipantIds: [],\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_SUCESS:\n    case actionTypes.GET_PREV_MESSAGES_FAIL: {\n      const isFailed = (action.type === actionTypes.GET_PREV_MESSAGES_FAIL);\n      const {\n        currentOpenChannel = {},\n        messages = [],\n        hasMore,\n        lastMessageTimestamp,\n      } = action.payload;\n      const actionChannelUrl = currentOpenChannel.url;\n      const receivedMessages = isFailed ? [] : messages;\n      const _hasMore = isFailed ? false : hasMore;\n      const _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;\n\n      const stateChannel = state.currentOpenChannel;\n      const stateChannelUrl = stateChannel.url;\n\n      if (actionChannelUrl !== stateChannelUrl) {\n        return state;\n      }\n\n      const filteredAllMessages = state.allMessages.filter((message) => (\n        !(receivedMessages.find(({ messageId }) => compareIds(messageId, message.messageId)))\n      ));\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMore: _hasMore,\n        lastMessageTimestamp: _lastMessageTimestamp,\n        allMessages: [\n          ...receivedMessages,\n          ...filteredAllMessages,\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_START: {\n      const {\n        message,\n        channel,\n      } = action.payload;\n      if (channel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          { ...message },\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_SUCCEEDED: {\n      const sentMessage = action.payload;\n      const newMessages = state.allMessages.map((m) => (\n        compareIds(m.reqId, sentMessage.reqId) ? sentMessage : m\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_FAILED: {\n      const sentMessage = action.payload;\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, sentMessage.reqId) ? sentMessage : m\n        )),\n      };\n    }\n    case actionTypes.TRIM_MESSAGE_LIST: {\n      const { allMessages } = state;\n      const experimentalMessageLimit = action.payload?.experimentalMessageLimit;\n      if (experimentalMessageLimit\n        && experimentalMessageLimit > 0\n        && allMessages?.length > experimentalMessageLimit\n      ) {\n        const sliceAt = allMessages.length - experimentalMessageLimit;\n        return {\n          ...state,\n          allMessages: allMessages.slice(sliceAt),\n        }\n      }\n      return state;\n    }\n    case actionTypes.RESENDING_MESSAGE_START: {\n      const eventedChannel = action.payload.channel;\n      const resentMessage = action.payload.message;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, resentMessage.reqId) ? resentMessage : m\n        )),\n      };\n    }\n    case actionTypes.FETCH_PARTICIPANT_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedParticipantList = action.payload.users;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [... state.participants, ...fetchedParticipantList],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_BANNED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedBannedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedBannedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: [\n          ... state.bannedParticipantIds,\n          ...fetchedBannedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_MUTED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedMutedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedMutedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [\n          ... state.bannedParticipantIds,\n          ...fetchedMutedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    // events\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const eventedChannel = action.payload.channel;\n      const receivedMessage = action.payload.message;\n\n      const {\n        currentOpenChannel\n      } = state;\n\n      if (\n        !compareIds(eventedChannel.url, currentOpenChannel.url)\n        || (\n          !(state.allMessages.map(\n            (message) => message.messageId).indexOf(receivedMessage.messageId) < 0\n        ))\n      ) {\n        return state;\n      }\n\n      return {\n        ...state,\n        allMessages: [...state.allMessages, receivedMessage],\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedMessage = action.payload.message;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((message) => (\n          message.isIdentical(updatedMessage)\n            ? updatedMessage\n            : message\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED: {\n      const eventedChannel = action.payload.channel;\n      const deletedMessageId = action.payload.messageId;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((message) => (\n          !compareIds(message.messageId, deletedMessageId)\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    }\n    case actionTypes.ON_OPERATOR_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedOperators = action.payload.operators;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: {\n          ...state.currentOpenChannel,\n          operators: updatedOperators,\n        },\n        operators: updatedOperators,\n      };\n    }\n    case actionTypes.ON_USER_ENTERED: {\n      const eventedChannel = action.payload.channel;\n      const enteredUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [...state.participants, enteredUser],\n      };\n    }\n    case actionTypes.ON_USER_EXITED: {\n      const eventedChannel = action.payload.channel;\n      const exitedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: state.participants.filter((participant) => (\n          !compareIds(participant.userId, exitedUser.userId)\n        )),\n      };\n    }\n    case actionTypes.ON_USER_MUTED: {\n      const eventedChannel = action.payload.channel;\n      const mutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [...state.mutedParticipantIds, mutedUser.userId],\n      };\n    }\n    case actionTypes.ON_USER_UNMUTED: {\n      const eventedChannel = action.payload.channel;\n      const unmutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(unmutedUser.userId) < 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: state.mutedParticipantIds.filter(userId => userId !== unmutedUser.userId),\n      };\n    }\n    case actionTypes.ON_USER_BANNED: {\n      const eventedChannel = action.payload.channel;\n      const bannedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.bannedParticipantIds.indexOf(bannedUser.userId) >= 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: [...state.bannedParticipantIds, bannedUser.userId],\n      };\n    }\n    case actionTypes.ON_USER_UNBANNED: {\n      const eventedChannel = action.payload.channel;\n      const unbannedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.bannedParticipantIds.indexOf(unbannedUser.userId) < 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: state.bannedParticipantIds.filter(userId => userId !== unbannedUser.userId),\n      };\n    }\n    case actionTypes.ON_CHANNEL_FROZEN: {\n      const frozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== frozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: true,\n      };\n    }\n    case actionTypes.ON_CHANNEL_UNFROZEN: {\n      const unfrozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== unfrozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: false,\n      };\n    }\n    case actionTypes.ON_CHANNEL_CHANGED: {\n      const changedChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== changedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: changedChannel,\n      };\n    }\n    case actionTypes.ON_META_DATA_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaDataKeys = action.payload.metaDataKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaCounterKeys = action.payload.metaCounterKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_MENTION_RECEIVED: {\n      // const eventedChannel = action.payload.channel;\n      // const mentionedMessage = action.payload.message;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","import Sendbird from 'sendbird';\nimport { EveryMessage } from '../../../index';\n\nexport interface State {\n  allMessages: Array<EveryMessage>;\n  loading: boolean;\n  initialized: boolean;\n  currentOpenChannel: Sendbird.OpenChannel;\n  isInvalid: boolean;\n  hasMore: boolean;\n  lastMessageTimestamp: number;\n  frozen: boolean;\n  operators: Array<Sendbird.User>;\n  participants: Array<Sendbird.User>;\n  bannedParticipantIds: Array<string | number>;\n  mutedParticipantIds: Array<string | number>;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  initialized: false,\n  currentOpenChannel: null,\n  isInvalid: false,\n  hasMore: false,\n  lastMessageTimestamp: 0,\n  frozen: false,\n  operators: [],\n  participants: [],\n  bannedParticipantIds: [],\n  mutedParticipantIds: [],\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  channelUrl: string;\n  sdkInit: boolean;\n  fetchingParticipants: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit, fetchingParticipants }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.OpenChannel) {\n      logger.info('OpenChannel | useSetChannel fetching channel', channelUrl);\n      sdk.OpenChannel.getChannel(channelUrl, (openChannel, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: openChannel,\n          });\n          openChannel.enter((_, error) => {\n            if (error) {\n              logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n              messagesDispatcher({\n                type: messageActionTypes.SET_CHANNEL_INVALID,\n                payload: null,\n              });\n            }\n            if (fetchingParticipants) {\n              // fetch participants, banned participantIds, muted participantIds\n              const participantListQuery = openChannel.createParticipantListQuery();\n              const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n              const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n              utils.fetchWithListQuery(\n                participantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n              utils.fetchWithListQuery(\n                bannedParticipantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_BANNED_USER_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n              utils.fetchWithListQuery(\n                mutedParticipantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_MUTED_USER_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n            payload: null,\n          });\n        }\n      });\n      // .then((openChannel) => {\n      //   logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CURRENT_CHANNEL,\n      //     payload: openChannel,\n      //   });\n      //   openChannel.enter((_, error) => {\n      //     if (error) {\n      //       logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n      //       messagesDispatcher({\n      //         type: messageActionTypes.SET_CHANNEL_INVALID,\n      //       });\n      //     }\n      //     if (fetchingParticipants) {\n      //       // fetch participants, banned participantIds, muted participantIds\n      //       const participantListQuery = openChannel.createParticipantListQuery();\n      //       const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n      //       const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n      //       utils.fetchWithListQuery(\n      //         participantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         bannedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_BANNED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         mutedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_MUTED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //     }\n      //   });\n      // })\n      // .catch((error) => {\n      //   logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CHANNEL_INVALID,\n      //   });\n      // });\n    }\n  }, [channelUrl, sdkInit, fetchingParticipants]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport uuidv4 from '../../../utils/uuid';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  checkScrollBottom: () => boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useHandleChannelEvents(\n  { currentOpenChannel, checkScrollBottom }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    const messageReceiverId = uuidv4();\n    if (currentOpenChannel && currentOpenChannel.url && sdk && sdk.ChannelHandler) {\n      const ChannelHandler = new sdk.ChannelHandler();\n      logger.info('OpenChannel | useHandleChannelEvents: Setup evnet handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = (channel, message) => {\n        const scrollToEnd = checkScrollBottom();\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageReceived', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_RECEIVED,\n          payload: { channel, message },\n        });\n        if (scrollToEnd) {\n          try {\n            setTimeout(() => {\n              scrollIntoLast();\n            });\n          } catch (error) {\n            logger.warning('OpenChannel | onMessageReceived | scroll to end failed');\n          }\n        }\n      };\n      ChannelHandler.onMessageUpdated = (channel, message) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageUpdated', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      };\n      ChannelHandler.onMessageDeleted = (channel, messageId) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageDeleted', { channelUrl, messageId });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: { channel, messageId },\n        });\n      };\n      ChannelHandler.onOperatorUpdated = (channel, operators) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onOperatorUpdated', { channelUrl, operators });\n        messagesDispatcher({\n          type: messageActionTypes.ON_OPERATOR_UPDATED,\n          payload: { channel, operators },\n        });\n      };\n      ChannelHandler.onUserEntered = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserEntered', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_ENTERED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserExited = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserExited', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_EXITED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserMuted = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserMuted', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_MUTED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserUnmuted = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnmuted', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_UNMUTED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserBanned = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserBanned', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_BANNED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserUnbanned = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnbanned', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_UNBANNED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onChannelFrozen = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelFrozen', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_FROZEN,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onChannelUnfrozen = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelUnfrozen', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_UNFROZEN,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onChannelChanged = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelChanged', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_CHANGED,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onMetaDataCreated = (channel, metaData) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataCreated', { channelUrl, metaData });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_CREATED,\n          payload: { channel, metaData },\n        });\n      };\n      ChannelHandler.onMetaDataUpdated = (channel, metaData) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataUpdated', { channelUrl, metaData });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_UPDATED,\n          payload: { channel, metaData },\n        });\n      };\n      ChannelHandler.onMetaDataDeleted = (channel, metaDataKeys) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataDeleted', { channelUrl, metaDataKeys });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_DELETED,\n          payload: { channel, metaDataKeys },\n        });\n      };\n      ChannelHandler.onMetaCountersCreated = (channel, metaCounter) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersCreated', { channelUrl, metaCounter });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_CREATED,\n          payload: { channel, metaCounter },\n        });\n      };\n      ChannelHandler.onMetaCountersUpdated = (channel, metaCounter) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersUpdated', { channelUrl, metaCounter });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_UPDATED,\n          payload: { channel, metaCounter },\n        });\n      };\n      ChannelHandler.onMetaCountersDeleted = (channel, metaCounterKeys) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersDeleted', { channelUrl, metaCounterKeys });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_DELETED,\n          payload: { channel, metaCounterKeys },\n        });\n      };\n      ChannelHandler.onMentionReceived = (channel, message) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMentionReceived', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MENTION_RECEIVED,\n          payload: { channel, message },\n        });\n      };\n\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return () => {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('OpenChannel | useHandleChannelEvents: Removing message receiver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useInitialMessagesFetch(\n  { currentOpenChannel, userFilledMessageListParams }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    logger.info('OpenChannel | useInitialMessagesFetch: Setup started', currentOpenChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (sdk && sdk.MessageListParams && currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = 30;\n      messageListParams.isInclusive = true;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReactions = false;\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams');\n      }\n\n      logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages', { currentOpenChannel, messageListParams });\n      messagesDispatcher({\n        type: messageActionTypes.GET_PREV_MESSAGES_START,\n        payload: null,\n      });\n      currentOpenChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams, (messages, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages succeeded', messages);\n          const hasMore = (messages && messages.length > 0);\n          const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel,\n              messages,\n              hasMore,\n              lastMessageTimestamp,\n            },\n          });\n          setTimeout(() => { scrollIntoLast(); });\n        } else {\n          logger.error('OpenChannel | useInitialMessagesFetch: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0,\n            },\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, userFilledMessageListParams]);\n}\n\nexport default useInitialMessagesFetch;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  lastMessageTimestamp: number;\n  fetchMore?: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  hasMore: boolean;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ntype CallbackReturn = (callback: () => void) => void;\n\nfunction useScrollCallback(\n  { currentOpenChannel, lastMessageTimestamp, fetchMore }: DynamicParams,\n  { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams }: StaticParams,\n): CallbackReturn {\n  return useCallback((callback) => {\n    if (fetchMore && hasMore && sdk && sdk.MessageListParams) {\n      logger.info('OpenChannel | useScrollCallback: start');\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = 30;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReactions = false;\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useScrollCallback: Used userFilledMessageListParams', userFilledMessageListParams);\n      }\n\n      logger.info('OpenChannel | useScrollCallback: Fetching messages', { currentOpenChannel, messageListParams });\n\n      currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || new Date().getTime(), messageListParams, (messages, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useScrollCallback: Fetching messages succeeded', messages);\n          const hasMore = (messages && messages.length > 0);\n          const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel,\n              messages,\n              hasMore,\n              lastMessageTimestamp,\n            }\n          });\n          setTimeout(() => {\n            callback();\n          });\n        } else {\n          logger.error('OpenChannel | useScrollCallback: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0,\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, lastMessageTimestamp, fetchMore]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\n\ninterface DynamicParams {\n  conversationScrollRef: React.RefObject<HTMLDivElement>;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n}\n\nfunction useCheckScrollBottom(\n  { conversationScrollRef }: DynamicParams,\n  { logger }: StaticParams,\n): () => boolean {\n  return useCallback(() => {\n    let isBottom = true;\n    if (conversationScrollRef) {\n      try {\n        const conversationScroll = conversationScrollRef.current;\n        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;\n      } catch(error) {\n        logger.error('OpenChannel | useCheckScrollBottom', error);\n      }\n    }\n    return isBottom;\n  }, [conversationScrollRef])\n}\n\nexport default useCheckScrollBottom;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendUserMessage: (text: string) => Sendbird.UserMessageParams;\n  checkScrollBottom: () => boolean;\n  messageInputRef: React.RefObject<HTMLInputElement>;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSendMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): () => void {\n  return useCallback(() => {\n    if (sdk && sdk.UserMessageParams) {\n      const text = messageInputRef.current.value;\n      const createParamsDefault = (txt: string | number): Sendbird.UserMessageParams => {\n        const message = typeof txt === 'string' ? txt.trim() : txt.toString(10).trim();\n        const params = new sdk.UserMessageParams();\n        params.message = message;\n        return params;\n      }\n      const createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n      if (createCustomParams) {\n        logger.info('OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n      const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n      logger.info('OpenChannel | useSendMessageCallback: Sending message has started', params);\n\n      const isBottom = checkScrollBottom();\n      const pendingMessage = currentOpenChannel.sendUserMessage(params, (message, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useSendMessageCallback: Sending message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n            payload: message,\n          });\n          if (isBottom) {\n            setTimeout(() => {\n              utils.scrollIntoLast();\n            });\n          }\n        } else {\n          logger.warning('OpenChannel | useSendMessageCallback: Sending message failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_FAILED,\n            payload: messageActionTypes,\n          });\n        }\n      });\n      messagesDispatcher({\n        type: messageActionTypes.SENDING_MESSAGE_START,\n        payload: {\n          message: pendingMessage,\n          channel: currentOpenChannel,\n        }\n      });\n    }\n  }, [currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef]);\n}\n\nexport default useSendMessageCallback;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendFileMessage: (file: File) => Sendbird.FileMessageParams;\n  checkScrollBottom: () => boolean;\n  imageCompression?: {\n    compressionRate?: number,\n    resizingWidth?: number | string,\n    resizingHeight?: number | string,\n  };\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\ntype CallbackReturn = (file: File) => void;\n\nfunction useFileUploadCallback(\n  {\n    currentOpenChannel,\n    checkScrollBottom,\n    imageCompression = {},\n    onBeforeSendFileMessage,\n  }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((file) => {\n    if (sdk && sdk.FileMessageParams) {\n      const {\n        compressionRate,\n        resizingWidth,\n        resizingHeight,\n      } = imageCompression;\n      const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n      const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n      const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n      // pxToNumber returns null if values are invalid\n      const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n        || utils.pxToNumber(resizingHeight);\n\n      const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n      const createParamsDefault = (file_): Sendbird.FileMessageParams => {\n        const params = new sdk.FileMessageParams();\n        params.file = file_;\n        return params;\n      };\n\n      if (canCompressImage) { // Using image compression\n        try {\n          const image: HTMLImageElement = document.createElement('img');\n          image.src = URL.createObjectURL(file);\n          image.onload = () => {\n            URL.revokeObjectURL(image.src);\n            const canvas = document.createElement('canvas');\n            const imageWidth = image.naturalWidth || image.width;\n            const imageHeight = image.naturalHeight || image.height;\n            let targetWidth = utils.pxToNumber(resizingWidth) || imageWidth;\n            let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n            // In canvas.toBlob(callback, mimeType, qualityArgument)\n            // qualityArgument doesnt work\n            // so in case compressibleDiamensions are not present, we use ratio\n            if (file.type === 'image/png' && !compressibleDiamensions) {\n              targetWidth *= compressionRate;\n              targetHeight *= compressionRate;\n            }\n\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            const context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0, targetWidth, targetHeight);\n            context.canvas.toBlob(\n              (newImageBlob) => {\n                const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n                if (createCustomParams) {\n                  logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n                }\n                const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault(compressedFile);\n                logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n                const isBottom = checkScrollBottom();\n                const pendingMessage = currentOpenChannel.sendFileMessage(\n                  params,\n                  (message: SendbirdUIKit.ClientFileMessage, error) => {\n                    if (!error) {\n                      logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n                      messagesDispatcher({\n                        type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n                        payload: message,\n                      });\n                      if (isBottom) {\n                        setTimeout(() => {\n                          utils.scrollIntoLast();\n                        });\n                      }\n                    } else {\n                      logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n                      message.localUrl = URL.createObjectURL(file);\n                      message.file = file;\n                      messagesDispatcher({\n                        type: messageActionTypes.SENDING_MESSAGE_FAILED,\n                        payload: message,\n                      });\n                    }\n                  },\n                );\n\n                messagesDispatcher({\n                  type: messageActionTypes.SENDING_MESSAGE_START,\n                  payload: {\n                    message: {\n                      ...pendingMessage,\n                      url: URL.createObjectURL(file),\n                      // pending thumbnail message seems to be failed\n                      requestState: 'pending',\n                    },\n                    channel: currentOpenChannel,\n                  }\n                });\n              },\n              file.type,\n              compressionRate,\n            );\n          }\n        } catch (error) {\n          logger.warning('OpenChannel | useFileUploadCallback: Sending file message with image compression failed', error);\n        }\n      } else { // Not using image compression\n        if (createCustomParams) {\n          logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n        }\n        const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault(file);\n        logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n        const isBottom = checkScrollBottom();\n        const pendingMessage = currentOpenChannel.sendFileMessage(\n          params,\n          (message: SendbirdUIKit.ClientFileMessage, error) => {\n            if (!error) {\n              logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n              messagesDispatcher({\n                type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n                payload: message,\n              });\n              if (isBottom) {\n                setTimeout(() => {\n                  utils.scrollIntoLast();\n                });\n              }\n            } else {\n              logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n              message.localUrl = URL.createObjectURL(file);\n              message.file = file;\n              messagesDispatcher({\n                type: messageActionTypes.SENDING_MESSAGE_FAILED,\n                payload: message,\n              });\n            }\n          }\n        );\n\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_START,\n          payload: {\n            message: {\n              ...pendingMessage,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n            channel: currentOpenChannel,\n          }\n        });\n      }\n    }\n  }, [currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression]);\n}\n\nexport default useFileUploadCallback;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendUserMessage?: (text) => Sendbird.UserMessageParams;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload :any }) => void;\n}\ntype CallbackReturn = (messageId, text, callback) => void;\n\nfunction useUpdateMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((messageId, text, callback) => {\n    const createParamsDefault = (txt) => {\n      const params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function') {\n      logger.info('OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage');\n    }\n    const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n    currentOpenChannel.updateUserMessage(messageId, params, (message, error) => {\n      if (callback) {\n        callback();\n      }\n      if (!error) {\n        logger.info('OpenChannel | useUpdateMessageCallback: Updating message succeeded', { message, params });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentOpenChannel,\n            message,\n          },\n        });\n      } else {\n        logger.warning('OpenChannel | useUpdateMessageCallback: Updating message failed', error);\n      }\n    });\n  }, [currentOpenChannel, onBeforeSendUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\ntype CallbackReturn = (\n  message: SendbirdUIKit.ClientUserMessage | SendbirdUIKit.ClientFileMessage,\n  callback?: () => void,\n) => void;\n\nfunction useDeleteMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((message, callback) => {\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message', message);\n    const { sendingStatus } = message;\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message requestState', sendingStatus);\n\n    if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n      logger.info('OpenChannel | useDeleteMessageCallback: Deleted message from local', message);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId,\n      });\n      if (callback) {\n        callback();\n      }\n    } else {\n      if (!(message.messageType ==='file' || message.messageType === 'user')) {\n        return;\n      }\n      const messageToDelete = message as SendBird.UserMessage;\n      currentOpenChannel.deleteMessage(messageToDelete, (error) => {\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message on server', sendingStatus);\n        if (callback) {\n          callback();\n        }\n        if (!error) {\n          logger.info('OpenChannel | useDeleteMessageCallback: Deleting message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: {\n              channel: currentOpenChannel,\n              messageId: message.messageId,\n            },\n          });\n        } else {\n          logger.warning('OpenChannel | useDeleteMessageCallback: Deleting message failed', error);\n        }\n      });\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\ntype CallbackReturn = (failedMessage: SendbirdUIKit.ClientUserMessage | SendbirdUIKit.ClientFileMessage) => void;\n\nfunction useResendMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((failedMessage) => {\n    logger.info('OpenChannel | useResendMessageCallback: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable()) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESENDING_MESSAGE_START,\n        payload: {\n          channel: currentOpenChannel,\n          message: failedMessage,\n        },\n      });\n\n      // userMessage\n      if (messageType === 'user' && failedMessage.messageType === 'user') {\n        currentOpenChannel.resendUserMessage(failedMessage, (message, error) => {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Reseding message succeeded', message);\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n              payload: message,\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending message failed', error);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_FAILED,\n              payload: failedMessage,\n            });\n          }\n        });\n        return;\n      }\n\n      // fileMessage\n      if (messageType === 'file' && failedMessage.messageType === 'file') {\n        currentOpenChannel.resendFileMessage(failedMessage, file, (message, error) => {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Resending file message succeeded', message);\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n              payload: message,\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending file message failed', error);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_FAILED,\n              payload: failedMessage,\n            });\n          }\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('OpenChannel | useResendMessageCallback: Message is not resendable');\n      logger.warning('OpenChannel | useResendMessageCallback: Message is not resendable', failedMessage);\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useResendMessageCallback;\n","import { useEffect, useState } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  messagesLength: number;\n  experimentalMessageLimit: number;\n}\n\ninterface StaticParams {\n  messagesDispatcher: ({\n    type: string,\n    payload: { experimentalMessageLimit: number }\n  }) => void;\n  logger: SendbirdUIKit.Logger;\n}\n\nconst THROTTLE_TIMER = 5000;\n\n// to trim message list so that we wont keep thousands of messages in memory\n// We are throttling here; not debouncing\n// it will be called once very 5 sec if messagesLength, experimentalMessageLimit changes\n// we check if messagesLength > experimentalMessageLimit before dispatching action\nfunction useTrimMessageList(\n  { messagesLength, experimentalMessageLimit }: DynamicParams,\n  { messagesDispatcher, logger }: StaticParams,\n): void {\n  const [inProgress, setInProgress] = useState(false);\n  useEffect(() => {\n    if (inProgress) {\n      return;\n    }\n    if (typeof messagesLength === 'number' && messagesLength > experimentalMessageLimit) {\n      logger.info('Trimming MessageList');\n      messagesDispatcher({\n        type: messageActionTypes.TRIM_MESSAGE_LIST,\n        payload: { experimentalMessageLimit },\n      });\n    }\n    setInProgress(true);\n    setTimeout(() => { setInProgress(false); }, THROTTLE_TIMER);\n  }, [messagesLength, experimentalMessageLimit]);\n}\n\nexport default useTrimMessageList;\n","import React, {\n  useRef,\n  useEffect,\n  useReducer,\n  useContext,\n  useMemo,\n} from 'react';\nimport * as utils from './utils';\nimport './index.scss';\n\nimport MessageInputWrapper from './components/MessageInpuetWrapper';\nimport FrozenChannelNotification from './components/FrozenNotification';\nimport OpenchannelConversationHeader from '../../ui/OpenchannelConversationHeader';\nimport OpenchannelConversationScroll from './components/OpenchannelConversationScroll';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder';\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\n\nimport { OpenChannelProps } from '../../index';\nimport messagesReducer from './dux/reducers';\nimport messagesInitialState from './dux/initialState';\nimport * as messageActionTypes from './dux/actionTypes';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext.jsx';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { scrollIntoLast } from './utils';\nimport * as topics from '../../lib/pubSub/topics';\n\n// hooks\nimport useSetChannel from './hooks/useSetChannel';\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useCheckScrollBottom from './hooks/useCheckScrollBottom';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useFileUploadCallback from './hooks/useFileUploadCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useTrimMessageList from './hooks/useTrimMessageList';\n\nconst COMPONENT_CLASS_NAME = 'sendbird-openchannel-conversation';\n\ninterface Props extends OpenChannelProps {\n  stores: {\n    sdkStore?: SendbirdUIKit.SdkStore,\n    userStore?: SendbirdUIKit.UserStore,\n  };\n  config: {\n    userId: string,\n    isOnline: boolean,\n    logger?: SendbirdUIKit.Logger,\n    theme?: string,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    pubSub: any,\n    disableUserProfile?: boolean,\n    renderUserProfile?(): JSX.Element,\n    imageCompression?: {\n      compressionRate?: number,\n      resizingWidth?: number | string,\n      resizingHeight?: number | string,\n    },\n  };\n}\n\nexport const OpenchannelConversation = (props: Props): JSX.Element => {\n  const {\n    // internal props\n    stores,\n    config,\n    // normal props\n    useMessageGrouping,\n    channelUrl,\n    queries = {},\n    disableUserProfile,\n    fetchingParticipants = false, // We didn't decide to support fetching participant list\n    renderCustomMessage,\n    renderUserProfile,\n    renderChannelTitle,\n    renderMessageInput,\n    onBeforeSendUserMessage,\n    experimentalMessageLimit,\n    onBeforeSendFileMessage,\n    onChatHeaderActionClick\n  } = props;\n\n  const {\n    sdkStore,\n    userStore,\n  } = stores;\n  const {\n    userId,\n    isOnline,\n    logger,\n    pubSub,\n    imageCompression,\n  } = config;\n\n  const {\n    sdk\n  } = sdkStore;\n  const {\n    user\n  } = userStore;\n\n  // hook variables\n  const [messagesStore, messagesDispatcher] = useReducer(messagesReducer, messagesInitialState);\n  const {\n    allMessages,\n    loading,\n    initialized,\n    currentOpenChannel,\n    isInvalid,\n    hasMore,\n    lastMessageTimestamp,\n    operators,\n    bannedParticipantIds,\n    mutedParticipantIds,\n  } = messagesStore;\n  // ref\n  const messageInputRef = useRef(null); // useSendMessageCallback\n  const conversationScrollRef = useRef(null); // useScrollAfterSendMessageCallback\n  const { stringSet } = useContext(LocalizationContext);\n\n  // const\n  const sdkInit = sdkStore.initialized;\n  const userFilledMessageListParams = queries ? queries.messageListParams: null;\n  const disabled = !initialized\n    || !isOnline\n    || utils.isDisabledBecauseFrozen(currentOpenChannel, userId);\n  // || utils.isDisabledBecauseMuted(mutedParticipantIds, userId)\n  const userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  const userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n\n  // useMemo\n  const amIBanned = useMemo(() => {\n    return bannedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, bannedParticipantIds, user]);\n  const amIMuted = useMemo(() => {\n    return mutedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, mutedParticipantIds, user]);\n  const amIOperator = useMemo(() => {\n    return operators.map(operator => operator.userId).indexOf(user.userId) >= 0;\n  }, [channelUrl, operators, user]);\n\n  // use hooks\n  useSetChannel(\n    { channelUrl, sdkInit, fetchingParticipants },\n    { sdk, logger, messagesDispatcher },\n  );\n\n  useEffect(() => {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n\n  const checkScrollBottom = useCheckScrollBottom(\n    { conversationScrollRef },\n    { logger },\n  );\n  useHandleChannelEvents(\n    { currentOpenChannel, checkScrollBottom },\n    { sdk, logger, messagesDispatcher },\n  );\n  useInitialMessagesFetch(\n    { currentOpenChannel, userFilledMessageListParams },\n    { sdk, logger, messagesDispatcher },\n  );\n\n  // donot fetch more for streaming\n  const fetchMore = utils.shouldFetchMore(allMessages?.length, experimentalMessageLimit);\n  const onScroll = useScrollCallback(\n    { currentOpenChannel, lastMessageTimestamp, fetchMore },\n    { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams },\n  );\n  const handleSendMessage = useSendMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef },\n    { sdk, logger, messagesDispatcher },\n  );\n  const handleFileUpload = useFileUploadCallback(\n    { currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression },\n    { sdk, logger, messagesDispatcher },\n  );\n  const updateMessage = useUpdateMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage },\n    { sdk, logger, messagesDispatcher },\n  );\n  const deleteMessage = useDeleteMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n\n  useTrimMessageList(\n    { messagesLength: allMessages?.length, experimentalMessageLimit },\n    { messagesDispatcher, logger }\n  );\n\n  // handle API calls from withSendbird\n  useEffect(() => {\n    const subscriber = new Map();\n    if (!pubSub || !pubSub.subscribe) {\n      return;\n    }\n    subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: message,\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n      const { channel, message } = msg;\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_START,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n      const { channel, message, fromSelector } = msg;\n      if (fromSelector && channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      }\n    }));\n    subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n      const { channel, messageId } = msg;\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: messageId,\n        });\n      }\n    }));\n\n    return () => {\n      if (subscriber) {\n        subscriber.forEach((s) => {\n          try {\n            s.remove();\n          } catch {\n            //\n          }\n        });\n      }\n    };\n  }, [channelUrl, sdkInit]);\n\n  if (\n    !currentOpenChannel\n    || !currentOpenChannel.url\n    || amIBanned\n  ) {\n    return (<div className={COMPONENT_CLASS_NAME}><PlaceHolder type={PlaceHolderTypes.NO_CHANNELS} /></div>);\n  }\n  if (loading) {\n    return (<div className={COMPONENT_CLASS_NAME}><PlaceHolder type={PlaceHolderTypes.LOADING} /></div>);\n  }\n  if (isInvalid) {\n    return (<div className={COMPONENT_CLASS_NAME}><PlaceHolder type={PlaceHolderTypes.WRONG} /></div>);\n  }\n\n  return (\n    <UserProfileProvider\n      className={COMPONENT_CLASS_NAME}\n      disableUserProfile={userDefinedDisableUserProfile}\n      renderUserProfile={userDefinedRenderProfile}\n    >\n      {\n        renderChannelTitle\n          ? renderChannelTitle({\n            channel: currentOpenChannel,\n            user: user,\n          })\n          : (\n            <OpenchannelConversationHeader\n              title={currentOpenChannel.name}\n              subTitle={`${utils.kFormatter(currentOpenChannel.participantCount)} ${stringSet.OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS}`}\n              coverImage={currentOpenChannel.coverUrl}\n              onActionClick={onChatHeaderActionClick}\n              amIOperator={amIOperator}\n            />\n          )\n      }\n      {\n        currentOpenChannel.isFrozen && (\n          <FrozenChannelNotification />\n        )\n      }\n      <OpenchannelConversationScroll\n        ref={conversationScrollRef}\n        renderCustomMessage={renderCustomMessage}\n        openchannel={currentOpenChannel}\n        user={user}\n        useMessageGrouping={useMessageGrouping}\n        isOnline={isOnline}\n        allMessages={allMessages}\n        onScroll={onScroll}\n        hasMore={hasMore}\n        updateMessage={updateMessage}\n        deleteMessage={deleteMessage}\n        resendMessage={resendMessage}\n      />\n      {\n        renderMessageInput\n          ? (\n            <div className=\"sendbird-openchannel-footer\">\n              {\n                renderMessageInput({\n                  channel: currentOpenChannel,\n                  user: user,\n                  disabled: disabled,\n                })\n              }\n            </div>\n          )\n          : (\n            <MessageInputWrapper\n              channel={currentOpenChannel}\n              user={user}\n              ref={messageInputRef}\n              disabled={disabled || amIMuted}\n              onSendMessage={handleSendMessage}\n              onFileUpload={handleFileUpload}\n              renderMessageInput={renderMessageInput}\n            />\n          )\n      }\n    </UserProfileProvider>\n  );\n};\n\nexport default withSendbirdContext(OpenchannelConversation);\n"]},"metadata":{},"sourceType":"module"}
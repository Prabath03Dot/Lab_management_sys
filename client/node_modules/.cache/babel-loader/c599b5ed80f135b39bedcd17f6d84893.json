{"ast":null,"code":"import * as e from \"react\";\nexport function createContext(t, n) {\n  const o = /*#__PURE__*/e.createContext(n);\n\n  function r(t) {\n    const {\n      children: n,\n      ...r\n    } = t,\n          c = e.useMemo(() => r, Object.values(r));\n    /*#__PURE__*/\n\n    return e.createElement(o.Provider, {\n      value: c\n    }, n);\n  }\n\n  return r.displayName = t + \"Provider\", [r, function (r) {\n    const c = e.useContext(o);\n    if (c) return c;\n    if (void 0 !== n) return n;\n    throw new Error(`\\`${r}\\` must be used within \\`${t}\\``);\n  }];\n}\nexport function createContextScope(n) {\n  let o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let r = [];\n\n  const c = () => {\n    const t = r.map(t => /*#__PURE__*/e.createContext(t));\n    return function (o) {\n      const r = (null == o ? void 0 : o[n]) || t;\n      return e.useMemo(() => ({\n        [`__scope${n}`]: { ...o,\n          [n]: r\n        }\n      }), [o, r]);\n    };\n  };\n\n  return c.scopeName = n, [function (t, o) {\n    const c = /*#__PURE__*/e.createContext(o),\n          u = r.length;\n\n    function s(t) {\n      const {\n        scope: o,\n        children: r,\n        ...s\n      } = t,\n            i = (null == o ? void 0 : o[n][u]) || c,\n            a = e.useMemo(() => s, Object.values(s));\n      /*#__PURE__*/\n\n      return e.createElement(i.Provider, {\n        value: a\n      }, r);\n    }\n\n    return r = [...r, o], s.displayName = t + \"Provider\", [s, function (r, s) {\n      const i = (null == s ? void 0 : s[n][u]) || c,\n            a = e.useContext(i);\n      if (a) return a;\n      if (void 0 !== o) return o;\n      throw new Error(`\\`${r}\\` must be used within \\`${t}\\``);\n    }];\n  }, t(c, ...o)];\n}\n\nfunction t() {\n  for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {\n    t[_key] = arguments[_key];\n  }\n\n  const n = t[0];\n  if (1 === t.length) return n;\n\n  const o = () => {\n    const o = t.map(e => ({\n      useScope: e(),\n      scopeName: e.scopeName\n    }));\n    return function (t) {\n      const r = o.reduce((e, _ref) => {\n        let {\n          useScope: n,\n          scopeName: o\n        } = _ref;\n        return { ...e,\n          ...n(t)[`__scope${o}`]\n        };\n      }, {});\n      return e.useMemo(() => ({\n        [`__scope${n.scopeName}`]: r\n      }), [r]);\n    };\n  };\n\n  return o.scopeName = n.scopeName, o;\n}","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@radix-ui\\react-context\\dist\\packages\\react\\context\\src\\createContext.tsx"],"names":["createContext","rootComponentName","defaultContext","Context","React","Provider","props","children","context","value","useMemo","Object","values","_react","consumerName","useContext","undefined","Error","displayName","createContextScope","scopeName","createContextScopeDeps","defaultContexts","BaseContext","index","length","scope","createScope","scopeContexts","map","contexts","composeContextScopes","scopes","baseScope","scopeHooks","useScope","overrideScopes","nextScopes","reduce"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(\n      props: ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    ) {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName][index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    }\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName][index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"]},"metadata":{},"sourceType":"module"}
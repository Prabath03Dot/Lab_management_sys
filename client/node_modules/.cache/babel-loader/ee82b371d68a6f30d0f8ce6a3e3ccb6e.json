{"ast":null,"code":"import { useEffect } from 'react';\nimport { getHotkeyMatcher } from './parse-hotkey.js';\nexport { getHotkeyHandler } from './parse-hotkey.js';\n\nfunction shouldFireEvent(event) {\n  if (event.target instanceof HTMLElement) {\n    return ![\"INPUT\", \"TEXTAREA\", \"SELECT\"].includes(event.target.tagName);\n  }\n\n  return true;\n}\n\nfunction useHotkeys(hotkeys) {\n  useEffect(() => {\n    const keydownListener = event => {\n      hotkeys.forEach(_ref => {\n        let [hotkey, handler] = _ref;\n\n        if (getHotkeyMatcher(hotkey)(event) && shouldFireEvent(event)) {\n          event.preventDefault();\n          handler(event);\n        }\n      });\n    };\n\n    document.documentElement.addEventListener(\"keydown\", keydownListener);\n    return () => document.documentElement.removeEventListener(\"keydown\", keydownListener);\n  }, [hotkeys]);\n}\n\nexport { useHotkeys };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-hotkeys\\use-hotkeys.ts"],"names":[],"mappings":";;;;AAGA,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B,MAAI,KAAK,CAAC,MAAN,YAAwB,WAA5B,EAAyC;AACvC,WAAO,CAAC,CAAC,OAAD,EAAU,UAAV,EAAsB,QAAtB,EAAgC,QAAhC,CAAyC,KAAK,CAAC,MAAN,CAAa,OAAtD,CAAR;AACD;;AACD,SAAO,IAAP;AACD;;AACM,SAAS,UAAT,CAAoB,OAApB,EAA6B;AAClC,EAAA,SAAS,CAAC,MAAM;AACd,UAAM,eAAe,GAAI,KAAD,IAAW;AACjC,MAAA,OAAO,CAAC,OAAR,CAAgB,QAAuB;AAAA,YAAtB,CAAC,MAAD,EAAS,OAAT,CAAsB;;AACrC,YAAI,gBAAgB,CAAC,MAAD,CAAhB,CAAyB,KAAzB,KAAmC,eAAe,CAAC,KAAD,CAAtD,EAA+D;AAC7D,UAAA,KAAK,CAAC,cAAN;AACA,UAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,OALD;AAMD,KAPD;;AAQA,IAAA,QAAQ,CAAC,eAAT,CAAyB,gBAAzB,CAA0C,SAA1C,EAAqD,eAArD;AACA,WAAO,MAAM,QAAQ,CAAC,eAAT,CAAyB,mBAAzB,CAA6C,SAA7C,EAAwD,eAAxD,CAAb;AACD,GAXQ,EAWN,CAAC,OAAD,CAXM,CAAT;AAYF","sourcesContent":["import { useEffect } from 'react';\nimport { getHotkeyMatcher, getHotkeyHandler } from './parse-hotkey';\n\nexport { getHotkeyHandler };\n\ntype HokeyItem = [string, (event: KeyboardEvent) => void];\n\nfunction shouldFireEvent(event: KeyboardEvent) {\n  if (event.target instanceof HTMLElement) {\n    return !['INPUT', 'TEXTAREA', 'SELECT'].includes(event.target.tagName);\n  }\n  return true;\n}\n\nexport function useHotkeys(hotkeys: HokeyItem[]) {\n  useEffect(() => {\n    const keydownListener = (event: KeyboardEvent) => {\n      hotkeys.forEach(([hotkey, handler]) => {\n        if (getHotkeyMatcher(hotkey)(event) && shouldFireEvent(event)) {\n          event.preventDefault();\n          handler(event);\n        }\n      });\n    };\n\n    document.documentElement.addEventListener('keydown', keydownListener);\n    return () => document.documentElement.removeEventListener('keydown', keydownListener);\n  }, [hotkeys]);\n}\n"]},"metadata":{},"sourceType":"module"}
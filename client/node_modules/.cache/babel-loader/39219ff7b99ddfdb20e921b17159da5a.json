{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\n\nfunction useHover() {\n  const [hovered, setHovered] = useState(false);\n  const ref = useRef(null);\n  const onMouseEnter = useCallback(() => setHovered(true), []);\n  const onMouseLeave = useCallback(() => setHovered(false), []);\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(\"mouseenter\", onMouseEnter);\n      ref.current.addEventListener(\"mouseleave\", onMouseLeave);\n      return () => {\n        var _a, _b;\n\n        (_a = ref.current) == null ? void 0 : _a.removeEventListener(\"mouseenter\", onMouseEnter);\n        (_b = ref.current) == null ? void 0 : _b.removeEventListener(\"mouseleave\", onMouseLeave);\n      };\n    }\n\n    return void 0;\n  }, []);\n  return {\n    ref,\n    hovered\n  };\n}\n\nexport { useHover };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-hover\\use-hover.ts"],"names":[],"mappings":";;AACO,SAAS,QAAT,GAAoB;AACzB,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,GAAG,GAAG,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM,YAAY,GAAG,WAAW,CAAC,MAAM,UAAU,CAAC,IAAD,CAAjB,EAAyB,EAAzB,CAAhC;AACA,QAAM,YAAY,GAAG,WAAW,CAAC,MAAM,UAAU,CAAC,KAAD,CAAjB,EAA0B,EAA1B,CAAhC;AACA,EAAA,SAAS,CAAC,MAAM;AACd,QAAI,GAAG,CAAC,OAAR,EAAiB;AACf,MAAA,GAAG,CAAC,OAAJ,CAAY,gBAAZ,CAA6B,YAA7B,EAA2C,YAA3C;AACA,MAAA,GAAG,CAAC,OAAJ,CAAY,gBAAZ,CAA6B,YAA7B,EAA2C,YAA3C;AACA,aAAO,MAAM;AACX,YAAI,EAAJ,EAAQ,EAAR;;AACA,SAAC,EAAE,GAAG,GAAG,CAAC,OAAV,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsC,EAAE,CAAC,mBAAH,CAAuB,YAAvB,EAAqC,YAArC,CAAtC;AACA,SAAC,EAAE,GAAG,GAAG,CAAC,OAAV,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsC,EAAE,CAAC,mBAAH,CAAuB,YAAvB,EAAqC,YAArC,CAAtC;AACD,OAJD;AAKD;;AACD,WAAO,KAAK,CAAZ;AACD,GAXQ,EAWN,EAXM,CAAT;AAYA,SAAO;AAAE,IAAA,GAAF;AAAO,IAAA;AAAP,GAAP;AACF","sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\n\nexport function useHover<T extends HTMLElement = HTMLDivElement>() {\n  const [hovered, setHovered] = useState(false);\n  const ref = useRef<T>(null);\n  const onMouseEnter = useCallback(() => setHovered(true), []);\n  const onMouseLeave = useCallback(() => setHovered(false), []);\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener('mouseenter', onMouseEnter);\n      ref.current.addEventListener('mouseleave', onMouseLeave);\n\n      return () => {\n        ref.current?.removeEventListener('mouseenter', onMouseEnter);\n        ref.current?.removeEventListener('mouseleave', onMouseLeave);\n      };\n    }\n\n    return undefined;\n  }, []);\n\n  return { ref, hovered };\n}\n"]},"metadata":{},"sourceType":"module"}
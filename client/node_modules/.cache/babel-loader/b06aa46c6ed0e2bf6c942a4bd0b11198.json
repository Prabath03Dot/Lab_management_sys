{"ast":null,"code":"import React__default, { useContext, useMemo, useRef, useState, useEffect } from 'react';\nimport { M as Modal, T as Type, a as TextButton, B as Button, d as ButtonTypes, e as ButtonSizes, U as UserProfileContext, C as ContextMenu, b as MenuItems, f as ConnectedUserProfile, s as selectors, h as UserProfileProvider } from './index-5ffc2e37.js';\nimport { c as LocalizationContext, d as __spreadArray, w as withSendbirdContext } from './LocalizationContext-2dd9ebb4.js';\nimport { n as copyToClipboard } from './index-2b8da253.js';\nimport { A as Avatar, L as Label, a as LabelTypography, b as LabelColors, I as Icon, c as IconTypes, d as IconColors, P as PlaceHolder, f as PlaceHolderTypes } from './index-8f3e6954.js';\nimport { g as getOpenChannelAvatar } from './utils-dadb8f4b.js';\nimport { I as InputLabel, a as Input, n as noop, U as UserListItem$1 } from './index-89e256af.js';\nimport { a as Accordion, A as AccordionGroup } from './index-c5333808.js';\nimport 'prop-types';\nimport 'react-dom';\n\nfunction ChannelAvatar(_a) {\n  var channel = _a.channel,\n      theme = _a.theme,\n      _b = _a.height,\n      height = _b === void 0 ? 56 : _b,\n      _c = _a.width,\n      width = _c === void 0 ? 56 : _c;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var memoizedAvatar = useMemo(function () {\n    return /*#__PURE__*/React__default.createElement(Avatar, {\n      className: \"sendbird-chat-header__avatar--open-channel\",\n      src: getOpenChannelAvatar(channel),\n      width: width + \"px\",\n      height: height + \"px\",\n      alt: channel.name || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE\n    });\n  }, [channel.coverUrl, theme]);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, memoizedAvatar);\n}\n\nvar EditDetails = function EditDetails(props) {\n  var _onSubmit = props.onSubmit,\n      onCancel = props.onCancel,\n      channel = props.channel,\n      theme = props.theme;\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var hiddenInputRef = useRef(null);\n\n  var _a = useState(null),\n      currentImg = _a[0],\n      setCurrentImg = _a[1];\n\n  var _b = useState(null),\n      newFile = _b[0],\n      setNewFile = _b[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var title = channel.name;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (title !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n\n        return;\n      }\n\n      _onSubmit(newFile, inputRef.current.value);\n\n      onCancel();\n    },\n    type: Type.PRIMARY\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"channel-profile-form\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__img-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__avatar\"\n  }, currentImg ? /*#__PURE__*/React__default.createElement(Avatar, {\n    height: \"80px\",\n    width: \"80px\",\n    src: currentImg\n  }) : /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    height: 80,\n    width: 80,\n    channel: channel,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"channel-profile-form__avatar-button\",\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    },\n    notUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__name-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME), /*#__PURE__*/React__default.createElement(Input, {\n    required: title !== '',\n    name: \"channel-profile-form__name\",\n    ref: inputRef,\n    value: title,\n    placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER\n  }))));\n};\n\nfunction ChannelProfile(props) {\n  var disabled = props.disabled,\n      channel = props.channel,\n      theme = props.theme,\n      onChannelInfoChange = props.onChannelInfoChange;\n  var title = channel.name;\n\n  var _a = useState(false),\n      showModal = _a[0],\n      setShowModal = _a[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile--inner\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    theme: theme,\n    height: 80,\n    width: 80\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1,\n    className: \"sendbird-openchannel-profile__title\"\n  }, title || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE), /*#__PURE__*/React__default.createElement(TextButton, {\n    disabled: disabled,\n    className: \"sendbird-openchannel-profile__edit\",\n    onClick: function onClick() {\n      if (disabled) {\n        return;\n      }\n\n      setShowModal(true);\n    },\n    notUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY\n  }, stringSet.CHANNEL_SETTING__PROFILE__EDIT)), showModal && /*#__PURE__*/React__default.createElement(EditDetails, {\n    onCancel: function onCancel() {\n      return setShowModal(false);\n    },\n    onSubmit: onChannelInfoChange,\n    channel: channel,\n    theme: theme\n  })));\n}\n\nfunction ParticipantsModal(_a) {\n  var hideModal = _a.hideModal,\n      channel = _a.channel;\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _b = useState([]),\n      participants = _b[0],\n      setParticipants = _b[1];\n\n  var _c = useState(null),\n      participantListQuery = _c[0],\n      setParticipantListQuery = _c[1];\n\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n\n    var participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n\n      setParticipants(participantList);\n    });\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    hideFooter: true,\n    onCancel: function onCancel() {\n      return hideModal();\n    },\n    onSubmit: noop,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = participantListQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        participantListQuery.next(function (fetchedParticipants, error) {\n          if (error) {\n            return;\n          }\n\n          setParticipants(__spreadArray(__spreadArray([], participants, true), fetchedParticipants, true));\n        });\n      }\n    }\n  }, participants.map(function (p) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$1, {\n      user: p,\n      key: p.userId\n    });\n  }))));\n}\n\nvar SHOWN_MEMBER_MAX = 10;\n\nvar UserListItem = function UserListItem(_a) {\n  var member = _a.member,\n      _b = _a.currentUser,\n      currentUser = _b === void 0 ? '' : _b;\n  var avatarRef = useRef(null);\n\n  var _c = useContext(UserProfileContext),\n      disableUserProfile = _c.disableUserProfile,\n      renderUserProfile = _c.renderUserProfile;\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member-avatar\"\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        },\n        ref: avatarRef,\n        src: member.profileUrl,\n        width: 24,\n        height: 24\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        openLeft: true,\n        parentRef: avatarRef // for catching location(x, y) of MenuItems\n        ,\n        parentContainRef: avatarRef // for toggling more options(menus & reactions)\n        ,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: member,\n        currentUserId: currentUser,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        disableMessaging: true,\n        user: member,\n        currentUserId: currentUser,\n        onSuccess: closeDropdown\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, member.nickname || stringSet.NO_NAME, currentUser === member.userId && stringSet.CHANNEL_SETTING__MEMBERS__YOU));\n};\n\nfunction ParticipantsAccordion(_a) {\n  var channel = _a.channel,\n      currentUser = _a.currentUser;\n\n  var _b = useState([]),\n      participants = _b[0],\n      setParticipants = _b[1];\n\n  var _c = useState(false),\n      showMoreModal = _c[0],\n      setShowMoreModal = _c[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n\n    var participantListQuery = channel.createParticipantListQuery();\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(Accordion, {\n    className: \"sendbird-participants-accordion\",\n    id: \"participants\",\n    renderTitle: function renderTitle() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MEMBERS,\n        fillColor: IconColors.PRIMARY,\n        width: 24,\n        height: 24,\n        className: \"sendbird-openchannel-settings__accordion-icon\"\n      }), /*#__PURE__*/React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE));\n    },\n    renderContent: function renderContent() {\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"\"\n      }, /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-participants-accordion__list\"\n      }, participants.slice(0, SHOWN_MEMBER_MAX).map(function (p) {\n        return /*#__PURE__*/React__default.createElement(UserListItem, {\n          member: p,\n          currentUser: currentUser,\n          key: p.userId\n        });\n      }), participants && participants.length === 0 ? /*#__PURE__*/React__default.createElement(Label, {\n        className: \"sendbird-channel-settings__empty-list\",\n        type: LabelTypography.SUBTITLE_2,\n        color: LabelColors.ONBACKGROUND_3\n      }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null), participants.length >= SHOWN_MEMBER_MAX && /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-participants-accordion__footer\"\n      }, /*#__PURE__*/React__default.createElement(Button, {\n        className: \"sendbird-participants-accordion__footer__all-participants\",\n        type: ButtonTypes.SECONDARY,\n        size: ButtonSizes.SMALL,\n        onClick: function onClick() {\n          return setShowMoreModal(true);\n        }\n      }, stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL), showMoreModal && /*#__PURE__*/React__default.createElement(ParticipantsModal, {\n        currentUser: currentUser,\n        hideModal: function hideModal() {\n          setShowMoreModal(false);\n        },\n        channel: channel\n      })));\n    }\n  });\n}\n\nfunction DeleteChannel(_a) {\n  var isOnline = _a.isOnline,\n      onDeleteChannel = _a.onDeleteChannel;\n\n  var _b = useState(false),\n      showDeleteChannelModal = _b[0],\n      setShowDeleteChannelModal = _b[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__panel-item\\n          sendbird-openchannel-settings__delete-channel\\n            \" + (!isOnline ? 'sendbird-openchannel-settings__panel-item__disabled' : ''),\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      if (!isOnline) {\n        return;\n      }\n\n      setShowDeleteChannelModal(true);\n    },\n    onClick: function onClick() {\n      if (!isOnline) {\n        return;\n      }\n\n      setShowDeleteChannelModal(true);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.DELETE,\n    className: ['sendbird-openchannel-settings__panel-icon-left', 'sendbird-openchannel-settings__panel-icon__delete'].join(' '),\n    height: \"24px\",\n    width: \"24px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL)), showDeleteChannelModal && /*#__PURE__*/React__default.createElement(Modal, {\n    onCancel: function onCancel() {\n      setShowDeleteChannelModal(false);\n    },\n    onSubmit: function onSubmit() {\n      onDeleteChannel();\n    },\n    submitText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE\n  }));\n}\n\nfunction ParticipantsList(_a) {\n  var channel = _a.channel,\n      onCloseClick = _a.onCloseClick,\n      currentUser = _a.currentUser;\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _b = useState([]),\n      participants = _b[0],\n      setParticipants = _b[1];\n\n  var _c = useState(null),\n      participantListQuery = _c[0],\n      setParticipantListQuery = _c[1];\n\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n\n    var participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__participant\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CLOSE,\n    className: \"sendbird-openchannel-settings__close-icon\",\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__participants-list\",\n    onScroll: function onScroll(e) {\n      var hasNext = participantListQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        participantListQuery.next(function (fetchedParticipants, error) {\n          if (error) {\n            return;\n          }\n\n          setParticipants(__spreadArray(__spreadArray([], participants, true), fetchedParticipants, true));\n        });\n      }\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", null, participants.map(function (p) {\n    return /*#__PURE__*/React__default.createElement(UserListItem, {\n      member: p,\n      currentUser: currentUser,\n      key: p.userId\n    });\n  }), participants && participants.length === 0 ? /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-settings__empty-list\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null)));\n}\n\nfunction InvalidChannel(_a) {\n  var onCloseClick = _a.onCloseClick;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CLOSE,\n    className: \"sendbird-openchannel-settings__close-icon\",\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__placeholder\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.WRONG\n  })));\n}\n\nvar emptyLogger = function emptyLogger() {\n  return {\n    info: noop,\n    error: noop,\n    warning: noop\n  };\n};\n\nfunction OpenChannelSettings(props) {\n  var channelUrl = props.channelUrl,\n      _a = props.onCloseClick,\n      _onCloseClick = _a === void 0 ? noop : _a,\n      onBeforeUpdateChannel = props.onBeforeUpdateChannel,\n      _b = props.onChannelModified,\n      onChannelModified = _b === void 0 ? noop : _b,\n      renderChannelProfile = props.renderChannelProfile,\n      renderUserProfile = props.renderUserProfile,\n      _onDeleteChannel = props.onDeleteChannel,\n      _c = props.disableUserProfile,\n      disableUserProfile = _c === void 0 ? false : _c,\n      _d = props.logger,\n      logger = _d === void 0 ? emptyLogger() : _d,\n      sdk = props.sdk,\n      theme = props.theme,\n      user = props.user,\n      isOnline = props.isOnline;\n\n  var currentUser = user.userId;\n\n  var _e = useState(null),\n      channel = _e[0],\n      setChannel = _e[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (!channelUrl || !sdk || !sdk.getConnectionState) {\n      setChannel(null);\n      return;\n    }\n\n    sdk.OpenChannel.getChannel(channelUrl, function (openChannel, error) {\n      if (!error) {\n        setChannel(openChannel);\n      } else {\n        setChannel(null);\n      }\n    });\n  }, [channelUrl, sdk]);\n\n  if (!channel) {\n    return /*#__PURE__*/React__default.createElement(InvalidChannel, {\n      onCloseClick: function onCloseClick() {\n        logger.info('OpenChannelSettings: Click close');\n\n        if (_onCloseClick) {\n          _onCloseClick();\n        }\n      }\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-openchannel-settings\",\n    disableUserProfile: disableUserProfile,\n    renderUserProfile: renderUserProfile\n  }, channel.isOperator(user) ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-settings__close-icon\",\n    type: IconTypes.CLOSE,\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      _onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__profile\"\n  }, renderChannelProfile ? renderChannelProfile({\n    channel: channel,\n    user: user\n  }) : /*#__PURE__*/React__default.createElement(ChannelProfile, {\n    disabled: !isOnline,\n    channel: channel,\n    theme: theme,\n    onChannelInfoChange: function onChannelInfoChange(currentImg, currentTitle) {\n      logger.info('ChannelSettings: Channel information being updated');\n\n      if (onBeforeUpdateChannel) {\n        var params = onBeforeUpdateChannel(currentTitle, currentImg, channel.data);\n        logger.info('ChannelSettings: onBeforeUpdateChannel', params);\n        channel.updateChannel(params, function (openChannel) {\n          onChannelModified(openChannel); // setChannel(openChannel) => alone not working\n\n          setChannel(null);\n          setChannel(openChannel);\n        });\n      } else {\n        channel.updateChannel(currentTitle, currentImg, channel.data, function (openChannel) {\n          logger.info('ChannelSettings: Channel information updated', openChannel);\n          onChannelModified(openChannel); // setChannel(openChannel) => alone not working\n\n          setChannel(null);\n          setChannel(openChannel);\n        });\n      }\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__url\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-settings__copy-icon\",\n    type: IconTypes.COPY,\n    height: \"22px\",\n    width: \"22px\",\n    onClick: function onClick() {\n      copyToClipboard(channel.url);\n    }\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-settings__url-label\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-settings__url-value\",\n    type: LabelTypography.SUBTITLE_2\n  }, channel.url)), /*#__PURE__*/React__default.createElement(AccordionGroup, null, /*#__PURE__*/React__default.createElement(ParticipantsAccordion, {\n    channel: channel,\n    currentUser: currentUser\n  })), /*#__PURE__*/React__default.createElement(DeleteChannel, {\n    isOnline: isOnline,\n    onDeleteChannel: function onDeleteChannel() {\n      channel.delete(function (response, error) {\n        if (error) {\n          logger.warning('OpenChannelSettings: Delete channel failed', error);\n          return;\n        }\n\n        logger.info('OpenChannelSettings: Delete channel success', response);\n\n        if (_onDeleteChannel) {\n          _onDeleteChannel(channel);\n        }\n      });\n    }\n  })) : /*#__PURE__*/React__default.createElement(ParticipantsList, {\n    currentUser: currentUser,\n    channel: channel,\n    onCloseClick: function onCloseClick() {\n      _onCloseClick();\n    }\n  }));\n}\n\nvar ChannelSettingsWithSendbird = withSendbirdContext(OpenChannelSettings, function (store) {\n  var logger = store && store.config && store.config.logger;\n  var theme = store && store.config && store.config.theme || 'light';\n  var isOnline = store && store.config && store.config.isOnline;\n  var user = store && store.stores && store.stores.userStore && store.stores.userStore.user;\n  return {\n    sdk: selectors.getSdk(store),\n    logger: logger,\n    theme: theme,\n    isOnline: isOnline,\n    user: user\n  };\n});\nexport { ChannelSettingsWithSendbird as default };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\ChannelAvatar\\OpenChannelAvatar.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\EditDetailsModal.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ChannelProfile.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ParticipantsModal.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ParticipantsAccordion.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\DeleteChannel.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ParticipantsList.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\InvalidChannel.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\index.tsx"],"names":["channel","theme","_b","_c","useContext","memoizedAvatar","useMemo","utils","width","height","stringSet","OPEN_CHANNEL_SETTINGS__NO_TITLE","React","EditDetails","onCancel","props","inputRef","useRef","formRef","hiddenInputRef","currentImg","setCurrentImg","useState","newFile","setNewFile","title","onSubmit","ButtonType","PRIMARY","e","display","URL","LabelTypography","LabelColors","MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER","ChannelProfile","onChannelInfoChange","showModal","setShowModal","disabled","ParticipantsModal","_a","hideModal","participants","setParticipants","participantListQuery","setParticipantListQuery","useEffect","OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE","target","fetchMore","hasNext","fetchedParticipants","p","userId","SHOWN_MEMBER_MAX","UserListItem","member","avatarRef","disableUserProfile","renderUserProfile","toggleDropdown","paddingTop","paddingBottom","user","currentUserId","close","closeDropdown","ONBACKGROUND_1","currentUser","ParticipantsAccordion","showMoreModal","setShowMoreModal","IconTypes","IconColors","ONBACKGROUND_3","ButtonTypes","ButtonSizes","DeleteChannel","isOnline","onDeleteChannel","showDeleteChannelModal","setShowDeleteChannelModal","OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE","ParticipantsList","onCloseClick","InvalidChannel","PlaceHolderTypes","WRONG","emptyLogger","info","error","warning","noop","onBeforeUpdateChannel","renderChannelProfile","_d","sdk","setChannel","logger","params","onChannelModified","copyToClipboard","ONBACKGROUND_2","SUBTITLE_2","ChannelSettingsWithSendbird","withSendbirdContext","store","selectors"],"mappings":"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","sourcesContent":["import React, { useMemo, useContext } from 'react';\n\nimport Avatar from '../Avatar/index';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport * as utils from './utils';\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  theme: string;\n  height?: number;\n  width?: number;\n}\n\nfunction ChannelAvatar({\n  channel,\n  theme,\n  height = 56,\n  width = 56,\n}: Props): JSX.Element{\n  const { stringSet } = useContext(LocalizationContext);\n  const memoizedAvatar = useMemo(() => {\n    return (\n      <Avatar\n        className=\"sendbird-chat-header__avatar--open-channel\"\n        src={utils.getOpenChannelAvatar(channel)}\n        width={`${width}px`}\n        height={`${height}px`}\n        alt={channel.name || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE}\n      />\n    );\n  }, [channel.coverUrl, theme]);\n  return (\n    <>{ memoizedAvatar }</>\n  );\n}\n\nexport default ChannelAvatar;\n","import React, {\n  useState,\n  useRef,\n  useContext,\n  ReactElement,\n} from 'react';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Modal from '../../../ui/Modal';\nimport Input, { InputLabel } from '../../../ui/Input';\nimport Avatar from '../../../ui/Avatar/index';\nimport { Type as ButtonType } from '../../../ui/Button/type';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport TextButton from '../../../ui/TextButton';\nimport OpenChannelAvatar from '../../../ui/ChannelAvatar/OpenChannelAvatar';\n\ninterface Props {\n  onSubmit(newFile: File, newTitle: string): void;\n  onCancel(): void;\n  channel: SendBird.OpenChannel;\n  theme: string;\n}\n\nconst EditDetails = (props: Props): ReactElement => {\n  const {\n    onSubmit,\n    onCancel,\n    channel,\n    theme,\n  } = props;\n  const inputRef = useRef(null);\n  const formRef = useRef(null);\n  const hiddenInputRef = useRef(null);\n  const [currentImg, setCurrentImg] = useState(null);\n  const [newFile, setNewFile] = useState(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const title = channel.name;\n  return (\n    <Modal\n      titleText={stringSet.MODAL__CHANNEL_INFORMATION__TITLE}\n      submitText={stringSet.BUTTON__SAVE}\n      onCancel={onCancel}\n      onSubmit={() => {\n        if (title !== '' && !inputRef.current.value) {\n          if (formRef.current.reportValidity) { // might not work in explorer\n            formRef.current.reportValidity();\n          }\n          return;\n        }\n        onSubmit(newFile, inputRef.current.value);\n        onCancel();\n      }}\n      type={ButtonType.PRIMARY}\n    >\n      <form\n        className=\"channel-profile-form\"\n        ref={formRef}\n        onSubmit={(e) => { e.preventDefault(); }}\n      >\n        <div className=\"channel-profile-form__img-section\">\n          <InputLabel>\n            {stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE}\n          </InputLabel>\n          <div className=\"channel-profile-form__avatar\">\n            {\n              currentImg\n                ? (\n                  <Avatar\n                    height=\"80px\"\n                    width=\"80px\"\n                    src={currentImg}\n                  />\n                ) : (\n                  <OpenChannelAvatar\n                    height={80}\n                    width={80}\n                    channel={channel}\n                    theme={theme}\n                  />\n                )\n              }\n          </div>\n          <input\n            ref={hiddenInputRef}\n            type=\"file\"\n            accept=\"image/gif, image/jpeg, image/png\"\n            style={{ display: 'none' }}\n            onChange={(e) => {\n              setCurrentImg(URL.createObjectURL(e.target.files[0]));\n              setNewFile(e.target.files[0]);\n              hiddenInputRef.current.value = '';\n            }}\n          />\n          <TextButton\n            className=\"channel-profile-form__avatar-button\"\n            onClick={() => hiddenInputRef.current.click()}\n            notUnderline\n          >\n            <Label type={LabelTypography.BUTTON_1} color={LabelColors.PRIMARY}>\n              {stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD}\n            </Label>\n          </TextButton>\n        </div>\n        <div className=\"channel-profile-form__name-section\">\n          <InputLabel>\n            {stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME}\n          </InputLabel>\n          <Input\n            required={title !== ''}\n            name=\"channel-profile-form__name\"\n            ref={inputRef}\n            value={title}\n            placeHolder={stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER}\n          />\n        </div>\n      </form>\n    </Modal>\n  );\n};\n\nexport default EditDetails;\n","import React, {\n  ReactElement,\n  useContext,\n  useState,\n} from 'react';\n\nimport './channel-profile.scss';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport TextButton from '../../../ui/TextButton';\nimport OpenChannelAvatar from '../../../ui/ChannelAvatar/OpenChannelAvatar';\nimport EditDetailsModal from './EditDetailsModal';\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  disabled: boolean;\n  theme: string;\n  onChannelInfoChange(currentImg: File, currentTitle: string): void;\n}\n\nexport default function ChannelProfile(props: Props): ReactElement {\n  const {\n    disabled,\n    channel,\n    theme,\n    onChannelInfoChange,\n  } = props;\n  const title = channel.name;\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div className=\"sendbird-openchannel-profile\">\n      <div className=\"sendbird-openchannel-profile--inner\">\n        <div className=\"sendbird-openchannel-profile__avatar\">\n          <OpenChannelAvatar\n            channel={channel}\n            theme={theme}\n            height={80}\n            width={80}\n          />\n        </div>\n        <Label\n          type={LabelTypography.SUBTITLE_2}\n          color={LabelColors.ONBACKGROUND_1}\n          className=\"sendbird-openchannel-profile__title\"\n        >\n          {title || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE}\n        </Label>\n        <TextButton\n          disabled={disabled}\n          className=\"sendbird-openchannel-profile__edit\"\n          onClick={() => {\n            if (disabled) { return; }\n            setShowModal(true);\n          }}\n          notUnderline\n        >\n          <Label\n            type={LabelTypography.BUTTON_1}\n            color={disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY}\n          >\n            {stringSet.CHANNEL_SETTING__PROFILE__EDIT}\n          </Label>\n        </TextButton>\n        {\n          showModal && (\n            <EditDetailsModal\n              onCancel={() => setShowModal(false)}\n              onSubmit={onChannelInfoChange}\n              channel={channel}\n              theme={theme}\n            />\n          )\n        }\n      </div>\n    </div>\n  );\n}\n","import React, {\n  ReactElement,\n  useEffect,\n  useState,\n  useContext,\n} from 'react';\n\nimport Modal from '../../../ui/Modal';\nimport UserListItem from '../../../ui/UserListItem';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport { noop } from '../../../utils/utils';\n\ninterface Props {\n  currentUser: string;\n  hideModal(): void;\n  channel: SendBird.OpenChannel;\n}\n\nexport default function ParticipantsModal({\n  hideModal,\n  channel,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<SendBird.User>|null>([]);\n  const [participantListQuery, setParticipantListQuery] = useState<SendBird.ParticipantListQuery | null>(null);\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, []);\n  return (\n    <div>\n      <Modal\n        hideFooter\n        onCancel={() => hideModal()}\n        onSubmit={noop}\n        titleText={stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE}\n      >\n        <div\n          className=\"sendbird-more-members__popup-scroll\"\n          onScroll={(e) => {\n            const { hasNext } = participantListQuery;\n            const target = e.target as HTMLTextAreaElement;\n            const fetchMore = (\n              target.clientHeight + target.scrollTop === target.scrollHeight\n            );\n\n            if (hasNext && fetchMore) {\n              participantListQuery.next((fetchedParticipants, error) => {\n                if (error) {\n                  return;\n                }\n                setParticipants([\n                  ...participants,\n                  ...fetchedParticipants,\n                ])\n              });\n            }\n          }}\n        >\n          { participants.map((p) => (\n            <UserListItem\n              user={p}\n              key={p.userId}\n            />\n          ))}\n        </div>\n      </Modal>\n    </div>\n  )\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nimport { UserProfileContext } from '../../../lib/UserProfileContext';\nimport Button, { ButtonTypes, ButtonSizes } from '../../../ui/Button';\nimport Accordion from '../../../ui/Accordion';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport Avatar from '../../../ui/Avatar/index';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport ParticipantsModal from './ParticipantsModal';\nimport UserProfile from '../../../ui/UserProfile';\nimport ContextMenu, { MenuItems } from '../../../ui/ContextMenu';\n\nconst SHOWN_MEMBER_MAX = 10;\n\ninterface UserListItemProps {\n  member: SendBird.User;\n  currentUser?: string;\n}\n\nexport const UserListItem = ({\n  member,\n  currentUser = '',\n}: UserListItemProps): ReactElement => {\n  const avatarRef = useRef(null);\n  const {\n    disableUserProfile,\n    renderUserProfile,\n  } = useContext(UserProfileContext);\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-participants-accordion__member\">\n      <div className=\"sendbird-participants-accordion__member-avatar\">\n        <ContextMenu\n          menuTrigger={(toggleDropdown) => (\n            <Avatar\n              onClick={() => {\n                if (!disableUserProfile) {\n                  toggleDropdown();\n                }\n              }}\n              ref={avatarRef}\n              src={member.profileUrl}\n              width={24}\n              height={24}\n            />\n          )}\n          menuItems={(closeDropdown) => (\n            <MenuItems\n              openLeft\n              parentRef={avatarRef}\n              // for catching location(x, y) of MenuItems\n              parentContainRef={avatarRef}\n              // for toggling more options(menus & reactions)\n              closeDropdown={closeDropdown}\n              style={{ paddingTop: 0, paddingBottom: 0 }}\n            >\n              {\n                renderUserProfile\n                  ? renderUserProfile({\n                    user: member,\n                    currentUserId: currentUser,\n                    close: closeDropdown,\n                  })\n                  : (\n                    <UserProfile\n                      disableMessaging\n                      user={member}\n                      currentUserId={currentUser}\n                      onSuccess={closeDropdown}\n                    />\n                  )\n              }\n            </MenuItems>\n          )}\n        />\n      </div>\n      <Label type={LabelTypography.SUBTITLE_2} color={LabelColors.ONBACKGROUND_1}>\n        {member.nickname || stringSet.NO_NAME}\n        {\n          (currentUser === member.userId) && (\n            stringSet.CHANNEL_SETTING__MEMBERS__YOU\n          )\n        }\n      </Label>\n    </div>\n  );\n};\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  currentUser: string;\n}\n\nexport default function ParticipantsAccordion({ channel, currentUser }: Props): ReactElement {\n  const [participants, setParticipants] = useState([]);\n  const [showMoreModal, setShowMoreModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, [channel]);\n\n  return (\n    <Accordion\n      className=\"sendbird-participants-accordion\"\n      id=\"participants\"\n      renderTitle={() => (\n        <>\n          <Icon\n            type={IconTypes.MEMBERS}\n            fillColor={IconColors.PRIMARY}\n            width={24}\n            height={24}\n            className=\"sendbird-openchannel-settings__accordion-icon\"\n          />\n          <Label\n            type={LabelTypography.SUBTITLE_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE}\n          </Label>\n        </>\n      )}\n      renderContent={() => (\n        <div className=\"\">\n          <div className=\"sendbird-participants-accordion__list\">\n            {\n              participants.slice(0, SHOWN_MEMBER_MAX).map((p) => (\n                <UserListItem\n                  member={p}\n                  currentUser={currentUser}\n                  key={p.userId}\n                />\n              ))\n            }\n            {\n              (participants && participants.length === 0)\n                ? (\n                    <Label\n                      className=\"sendbird-channel-settings__empty-list\"\n                      type={LabelTypography.SUBTITLE_2}\n                      color={LabelColors.ONBACKGROUND_3}\n                    >\n                      {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                    </Label>\n                ): null\n            }\n          </div>\n          {\n            participants.length >= SHOWN_MEMBER_MAX && (\n              <div className=\"sendbird-participants-accordion__footer\">\n                <Button\n                  className=\"sendbird-participants-accordion__footer__all-participants\"\n                  type={ButtonTypes.SECONDARY}\n                  size={ButtonSizes.SMALL}\n                  onClick={() => setShowMoreModal(true)}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL}\n                </Button>\n                {\n                  showMoreModal && (\n                    <ParticipantsModal\n                      currentUser={currentUser}\n                      hideModal={() => {\n                        setShowMoreModal(false);\n                      }}\n                      channel={channel}\n                    />\n                  )\n                }\n              </div>\n            )\n          }\n        </div>\n      )}\n    />\n  );\n}\n","import React, {\n  ReactElement,\n  useState,\n  useContext,\n} from 'react';\n\nimport Modal from '../../../ui/Modal';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes } from '../../../ui/Icon';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  isOnline: boolean;\n  onDeleteChannel(): void;\n}\n\nexport default function DeleteChannel({\n  isOnline,\n  onDeleteChannel,\n}: Props): ReactElement {\n  const [showDeleteChannelModal, setShowDeleteChannelModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <>\n      <div\n        className={\n          `sendbird-openchannel-settings__panel-item\n          sendbird-openchannel-settings__delete-channel\n            ${!isOnline ? 'sendbird-openchannel-settings__panel-item__disabled' : ''}`\n        }\n        role=\"button\"\n        tabIndex={0}\n        onKeyDown={() => {\n          if (!isOnline) { return; }\n          setShowDeleteChannelModal(true);\n        }}\n        onClick={() => {\n          if (!isOnline) { return; }\n          setShowDeleteChannelModal(true);\n        }}\n      >\n        <Icon\n          type={IconTypes.DELETE}\n          className={[\n            'sendbird-openchannel-settings__panel-icon-left',\n            'sendbird-openchannel-settings__panel-icon__delete',\n          ].join(' ')}\n          height=\"24px\"\n          width=\"24px\"\n        />\n        <Label\n          type={LabelTypography.SUBTITLE_1}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL}\n        </Label>\n      </div>\n      {\n        showDeleteChannelModal && (\n          <Modal\n            onCancel={() => {\n              setShowDeleteChannelModal(false);\n            }}\n            onSubmit={() => {\n              onDeleteChannel();\n            }}\n            submitText={stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT}\n            titleText={stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE}\n          />\n        )\n      }\n    </>\n  )\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\n\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes } from '../../../ui/Icon';\n\nimport { UserListItem } from './ParticipantsAccordion';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  onCloseClick(): void;\n  currentUser: string;\n}\n\nexport default function ParticipantsList({\n  channel,\n  onCloseClick,\n  currentUser,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<SendBird.User>|null>([]);\n  const [participantListQuery, setParticipantListQuery] = useState<SendBird.ParticipantListQuery | null>(null);\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return (\n    <div className=\"sendbird-openchannel-settings__participant\">\n      <div className=\"sendbird-openchannel-settings__header\">\n        <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n          {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE}\n        </Label>\n        <Icon\n          type={IconTypes.CLOSE}\n          className=\"sendbird-openchannel-settings__close-icon\"\n          height=\"24px\"\n          width=\"24px\"\n          onClick={() => {\n            onCloseClick();\n          }}\n        />\n      </div>\n      <div\n        className=\"sendbird-openchannel-settings__participants-list\"\n        onScroll={(e) => {\n          const { hasNext } = participantListQuery;\n          const target = e.target as HTMLTextAreaElement;\n          const fetchMore = (\n            target.clientHeight + target.scrollTop === target.scrollHeight\n          );\n\n          if (hasNext && fetchMore) {\n            participantListQuery.next((fetchedParticipants, error) => {\n              if (error) {\n                return;\n              }\n              setParticipants([\n                ...participants,\n                ...fetchedParticipants,\n              ])\n            });\n          }\n        }}\n      >\n        <div>\n          {\n            participants.map((p: SendBird.User) => (\n              <UserListItem\n                member={p}\n                currentUser={currentUser}\n                key={p.userId}\n              />\n            ))\n          }\n          {\n            (participants && participants.length === 0)\n              ? (\n                  <Label\n                    className=\"sendbird-channel-settings__empty-list\"\n                    type={LabelTypography.SUBTITLE_2}\n                    color={LabelColors.ONBACKGROUND_3}\n                  >\n                    {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                  </Label>\n              ): null\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { ReactElement, useContext } from 'react'\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes } from '../../../ui/Icon';\n\nimport PlaceHolder from '../../../ui/PlaceHolder';\nimport PlaceHolderTypes from '../../../ui/PlaceHolder/type';\n\ninterface Props {\n  onCloseClick?(): void;\n}\n\nexport default function InvalidChannel({\n  onCloseClick,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-openchannel-settings\">\n      <div className=\"sendbird-openchannel-settings__header\">\n        <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n          {stringSet.CHANNEL_SETTING__HEADER__TITLE}\n        </Label>\n        <Icon\n          type={IconTypes.CLOSE}\n          className=\"sendbird-openchannel-settings__close-icon\"\n          height=\"24px\"\n          width=\"24px\"\n          onClick={() => {\n            onCloseClick();\n          }}\n        />\n      </div>\n      <div className=\"sendbird-openchannel-settings__placeholder\">\n        <PlaceHolder type={PlaceHolderTypes.WRONG} />\n      </div>\n    </div>\n  )\n}\n","import React, {\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport { OpenChannelSettingsProps } from '../../index';\n\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport selectors from '../../lib/selectors';\n\nimport { copyToClipboard } from '../../utils'\n\nimport './index.scss';\nimport Label, { LabelTypography, LabelColors } from '../../ui/Label';\nimport Icon, { IconTypes } from '../../ui/Icon';\nimport ChannelProfile from './components/ChannelProfile';\nimport ParticipantsAccordion from './components/ParticipantsAccordion';\nimport DeleteChannel from './components/DeleteChannel';\nimport ParticipantsList from './components/ParticipantsList';\nimport InvalidChannel from './components/InvalidChannel';\nimport { AccordionGroup } from '../../ui/Accordion';\nimport { noop } from '../../utils/utils';\n\nconst emptyLogger = () => ({\n  info: noop,\n  error: noop,\n  warning: noop,\n});\n\ninterface Props extends OpenChannelSettingsProps {\n  logger: SendbirdUIKit.Logger;\n  sdk: SendBird.SendBirdInstance;\n  theme: string;\n  user: SendBird.User;\n  isOnline: boolean;\n}\n\nfunction OpenChannelSettings(props: Props) {\n  const {\n    channelUrl,\n    onCloseClick = noop,\n    onBeforeUpdateChannel,\n    onChannelModified = noop,\n    renderChannelProfile,\n    renderUserProfile,\n    onDeleteChannel,\n    disableUserProfile = false,\n    logger = emptyLogger(),\n    sdk,\n    theme,\n    user,\n    isOnline,\n  } = props;\n\n  const currentUser = user.userId;\n  const [channel, setChannel] = useState<SendBird.OpenChannel | null>(null);\n  const { stringSet } = useContext(LocalizationContext);\n  useEffect(() => {\n    if (!channelUrl || !sdk || !sdk.getConnectionState) {\n      setChannel(null);\n      return;\n    }\n\n    sdk.OpenChannel.getChannel(channelUrl, (openChannel, error) => {\n      if (!error) {\n        setChannel(openChannel);\n      } else {\n        setChannel(null);\n      }\n    });\n  }, [channelUrl, sdk])\n  if (!channel) {\n    return (\n      <InvalidChannel\n        onCloseClick={() => {\n          logger.info('OpenChannelSettings: Click close');\n          if (onCloseClick) {\n            onCloseClick();\n          }\n        }}\n      />\n    );\n  }\n  return (\n    <UserProfileProvider\n      className=\"sendbird-openchannel-settings\"\n      disableUserProfile={disableUserProfile}\n      renderUserProfile={renderUserProfile}\n    >\n      {\n        channel.isOperator(user)\n          ? (\n            <>\n              <div className=\"sendbird-openchannel-settings__header\">\n                <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n                  {stringSet.CHANNEL_SETTING__HEADER__TITLE}\n                </Label>\n                <Icon\n                  className=\"sendbird-openchannel-settings__close-icon\"\n                  type={IconTypes.CLOSE}\n                  height=\"24px\"\n                  width=\"24px\"\n                  onClick={() => {\n                    onCloseClick();\n                  }}\n                />\n              </div>\n              <div className=\"sendbird-openchannel-settings__profile\">\n              {\n                renderChannelProfile\n                  ? renderChannelProfile({ channel, user })\n                  : (\n                    <ChannelProfile\n                      disabled={!isOnline}\n                      channel={channel}\n                      theme={theme}\n                      onChannelInfoChange={(currentImg: File, currentTitle: string) => {\n                        logger.info('ChannelSettings: Channel information being updated');\n                        if (onBeforeUpdateChannel) {\n                          const params = onBeforeUpdateChannel(currentTitle, currentImg, channel.data);\n                          logger.info('ChannelSettings: onBeforeUpdateChannel', params);\n                          channel.updateChannel(params, (openChannel) => {\n                            onChannelModified(openChannel);\n                            // setChannel(openChannel) => alone not working\n                            setChannel(null);\n                            setChannel(openChannel);\n                          });\n                        } else {\n                          channel.updateChannel(\n                            currentTitle,\n                            currentImg,\n                            channel.data,\n                            (openChannel) => {\n                              logger.info('ChannelSettings: Channel information updated', openChannel);\n                              onChannelModified(openChannel);\n                              // setChannel(openChannel) => alone not working\n                              setChannel(null);\n                              setChannel(openChannel);\n                            },\n                          );\n                        }\n                      }}\n                    />\n                  )\n                }\n              </div>\n              <div className=\"sendbird-openchannel-settings__url\">\n                <Icon\n                  className=\"sendbird-openchannel-settings__copy-icon\"\n                  type={IconTypes.COPY}\n                  height=\"22px\"\n                  width=\"22px\"\n                  onClick={() => {\n                    copyToClipboard(channel.url);\n                  }}\n                />\n                <Label\n                  className=\"sendbird-openchannel-settings__url-label\"\n                  type={LabelTypography.CAPTION_2}\n                  color={LabelColors.ONBACKGROUND_2}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL}\n                </Label>\n                <Label\n                  className=\"sendbird-openchannel-settings__url-value\"\n                  type={LabelTypography.SUBTITLE_2}\n                >\n                  {channel.url}\n                </Label>\n              </div>\n              <AccordionGroup>\n                <ParticipantsAccordion\n                  channel={channel}\n                  currentUser={currentUser}\n                />\n              </AccordionGroup>\n              <DeleteChannel\n                isOnline={isOnline}\n                onDeleteChannel={() => {\n                  channel.delete((response, error) => {\n                    if (error) {\n                      logger.warning('OpenChannelSettings: Delete channel failed', error);\n                      return;\n                    }\n                    logger.info('OpenChannelSettings: Delete channel success', response);\n                    if (onDeleteChannel) {\n                      onDeleteChannel(channel);\n                    }\n                  });\n                }}\n              />\n            </>\n          ) : (\n            <ParticipantsList\n              currentUser={currentUser}\n              channel={channel}\n              onCloseClick={() => {\n                onCloseClick();\n              }}\n            />\n          )\n      }\n    </UserProfileProvider>\n  )\n}\n\nconst ChannelSettingsWithSendbird = withSendbirdContext(OpenChannelSettings, (store) => {\n  const logger = (store && store.config && store.config.logger);\n  const theme = (store && store.config && store.config.theme) || 'light';\n  const isOnline = (store && store.config && store.config.isOnline);\n  const user = (store && store.stores && store.stores.userStore\n    && store.stores.userStore.user);\n  return {\n    sdk: selectors.getSdk(store),\n    logger,\n    theme,\n    isOnline,\n    user,\n  };\n});\n\nexport default ChannelSettingsWithSendbird;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nimport { FOCUS_SELECTOR, tabbable, focusable } from './tabbable.js';\nimport { scopeTab } from './scope-tab.js';\nimport { createAriaHider } from './create-aria-hider.js';\n\nfunction useFocusTrap() {\n  let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  const ref = useRef();\n  const restoreAria = useRef(null);\n  const setRef = useCallback(node => {\n    if (!active) {\n      return;\n    }\n\n    if (restoreAria.current) {\n      restoreAria.current();\n    }\n\n    if (node) {\n      const processNode = _node => {\n        restoreAria.current = createAriaHider(_node);\n        let focusElement = node.querySelector(\"[data-autofocus]\");\n\n        if (!focusElement) {\n          const children = Array.from(node.querySelectorAll(FOCUS_SELECTOR));\n          focusElement = children.find(tabbable) || children.find(focusable) || null;\n          if (!focusElement && focusable(node)) focusElement = node;\n        }\n\n        if (focusElement) {\n          focusElement.focus();\n        } else if (process.env.NODE_ENV === \"development\") {\n          console.warn(\"[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node\", node);\n        }\n      };\n\n      setTimeout(() => {\n        if (node.ownerDocument) {\n          processNode(node);\n        } else if (process.env.NODE_ENV === \"development\") {\n          console.warn(\"[@mantine/hooks/use-focus-trap] Ref node is not part of the dom\", node);\n        }\n      });\n      ref.current = node;\n    } else {\n      ref.current = null;\n    }\n  }, [active]);\n  useEffect(() => {\n    if (!active) {\n      return void 0;\n    }\n\n    const handleKeyDown = event => {\n      if (event.key === \"Tab\" && ref.current) {\n        scopeTab(ref.current, event);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [active]);\n  return setRef;\n}\n\nexport { useFocusTrap };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-focus-trap\\use-focus-trap.ts"],"names":[],"mappings":";;;;;AAIO,SAAS,YAAT,GAAqC;AAAA,MAAf,MAAe,uEAAN,IAAM;AAC1C,QAAM,GAAG,GAAG,MAAM,EAAlB;AACA,QAAM,WAAW,GAAG,MAAM,CAAC,IAAD,CAA1B;AACA,QAAM,MAAM,GAAG,WAAW,CAAE,IAAD,IAAU;AACnC,QAAI,CAAC,MAAL,EAAa;AACX;AACD;;AACD,QAAI,WAAW,CAAC,OAAhB,EAAyB;AACvB,MAAA,WAAW,CAAC,OAAZ;AACD;;AACD,QAAI,IAAJ,EAAU;AACR,YAAM,WAAW,GAAI,KAAD,IAAW;AAC7B,QAAA,WAAW,CAAC,OAAZ,GAAsB,eAAe,CAAC,KAAD,CAArC;AACA,YAAI,YAAY,GAAG,IAAI,CAAC,aAAL,CAAmB,kBAAnB,CAAnB;;AACA,YAAI,CAAC,YAAL,EAAmB;AACjB,gBAAM,QAAQ,GAAG,KAAK,CAAC,IAAN,CAAW,IAAI,CAAC,gBAAL,CAAsB,cAAtB,CAAX,CAAjB;AACA,UAAA,YAAY,GAAG,QAAQ,CAAC,IAAT,CAAc,QAAd,KAA2B,QAAQ,CAAC,IAAT,CAAc,SAAd,CAA3B,IAAuD,IAAtE;AACA,cAAI,CAAC,YAAD,IAAiB,SAAS,CAAC,IAAD,CAA9B,EACE,YAAY,GAAG,IAAf;AACH;;AACD,YAAI,YAAJ,EAAkB;AAChB,UAAA,YAAY,CAAC,KAAb;AACD,SAFD,MAEO,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,aAA7B,EAA4C;AACjD,UAAA,OAAO,CAAC,IAAR,CAAa,uFAAb,EAAsG,IAAtG;AACD;AACF,OAdD;;AAeA,MAAA,UAAU,CAAC,MAAM;AACf,YAAI,IAAI,CAAC,aAAT,EAAwB;AACtB,UAAA,WAAW,CAAC,IAAD,CAAX;AACD,SAFD,MAEO,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,aAA7B,EAA4C;AACjD,UAAA,OAAO,CAAC,IAAR,CAAa,iEAAb,EAAgF,IAAhF;AACD;AACF,OANS,CAAV;AAOA,MAAA,GAAG,CAAC,OAAJ,GAAc,IAAd;AACD,KAxBD,MAwBO;AACL,MAAA,GAAG,CAAC,OAAJ,GAAc,IAAd;AACD;AACF,GAlCyB,EAkCvB,CAAC,MAAD,CAlCuB,CAA1B;AAmCA,EAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,KAAK,CAAZ;AACD;;AACD,UAAM,aAAa,GAAI,KAAD,IAAW;AAC/B,UAAI,KAAK,CAAC,GAAN,KAAc,KAAd,IAAuB,GAAG,CAAC,OAA/B,EAAwC;AACtC,QAAA,QAAQ,CAAC,GAAG,CAAC,OAAL,EAAc,KAAd,CAAR;AACD;AACF,KAJD;;AAKA,IAAA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,aAArC;AACA,WAAO,MAAM;AACX,MAAA,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,aAAxC;AACD,KAFD;AAGD,GAbQ,EAaN,CAAC,MAAD,CAbM,CAAT;AAcA,SAAO,MAAP;AACF","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { FOCUS_SELECTOR, focusable, tabbable } from './tabbable';\nimport { scopeTab } from './scope-tab';\nimport { createAriaHider } from './create-aria-hider';\n\nexport function useFocusTrap(active = true): (instance: HTMLElement | null) => void {\n  const ref = useRef<HTMLElement | null>();\n  const restoreAria = useRef<Function | null>(null);\n\n  const setRef = useCallback(\n    (node: HTMLElement | null) => {\n      if (!active) {\n        return;\n      }\n\n      if (restoreAria.current) {\n        restoreAria.current();\n      }\n\n      if (node) {\n        const processNode = (_node: HTMLElement) => {\n          restoreAria.current = createAriaHider(_node);\n\n          let focusElement: HTMLElement = node.querySelector('[data-autofocus]');\n\n          if (!focusElement) {\n            const children = Array.from<HTMLElement>(node.querySelectorAll(FOCUS_SELECTOR));\n            focusElement = children.find(tabbable) || children.find(focusable) || null;\n            if (!focusElement && focusable(node)) focusElement = node;\n          }\n\n          if (focusElement) {\n            focusElement.focus();\n          } else if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node',\n              node\n            );\n          }\n        };\n\n        // Delay processing the HTML node by a frame. This ensures focus is assigned correctly.\n        setTimeout(() => {\n          if (node.ownerDocument) {\n            processNode(node);\n          } else if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn('[@mantine/hooks/use-focus-trap] Ref node is not part of the dom', node);\n          }\n        });\n\n        ref.current = node;\n      } else {\n        ref.current = null;\n      }\n    },\n    [active]\n  );\n\n  useEffect(() => {\n    if (!active) {\n      return undefined;\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Tab' && ref.current) {\n        scopeTab(ref.current, event);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [active]);\n\n  return setRef;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { e as _toConsumableArray, a as _objectSpread2, u as uuidv4, b as _slicedToArray, c as LocalizationContext, f as _defineProperty, h as _inherits, i as _createSuper, j as _createClass, k as _classCallCheck, l as _assertThisInitialized, w as withSendbirdContext } from './LocalizationContext-2dd9ebb4.js';\nimport React__default, { useEffect, useCallback, useRef, useMemo, useContext, useState, useLayoutEffect, Component, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { f as format, i as isSameDay } from './index-3b2392ac.js';\nimport { k as SEND_USER_MESSAGE, S as SEND_MESSAGE_START, l as SEND_FILE_MESSAGE, j as UPDATE_USER_MESSAGE, D as DELETE_MESSAGE, E as EmojiListItems, C as ContextMenu, I as IconButton, b as MenuItems, c as MenuItem, a as TextButton, U as UserProfileContext, f as ConnectedUserProfile, M as Modal, d as ButtonTypes, h as UserProfileProvider } from './index-5ffc2e37.js';\nimport { a as getOutgoingMessageStates, b as getSendingMessageStatus, c as filterMessageListParams, d as getOutgoingMessageState, e as isSentStatus, h as isUserMessage, j as isFailedMessage, k as isPendingMessage, l as isSentMessage, m as getClassName, n as copyToClipboard, o as getEmojiListAll, p as getEmojiMapAll, q as isReactedBy, r as getEmojiTooltipString, s as isEditedMessage, u as getUIKitFileType, t as truncateString, v as isVideoMessage, w as isGifMessage, x as isUrl, y as getUIKitFileTypes, z as isThumbnailMessage, A as isVideo, B as isGif, C as isFileMessage, D as isSupportedFileView, E as getUIKitMessageTypes, F as getSenderName, G as isTextMessage, H as isOGMessage, I as getUIKitMessageType, J as isImageMessage, K as isAudioMessage } from './index-2b8da253.js';\nimport { c as compareIds, L as LinkLabel, D as DateSeparator, M as MessageInput, F as FileViewer } from './index-01add60f.js';\nimport { h as ImageRenderer, I as Icon, c as IconTypes, d as IconColors, e as Loader, L as Label, a as LabelTypography, b as LabelColors, A as Avatar, P as PlaceHolder, i as PlaceHolderTypes, g as LabelStringSet } from './index-8f3e6954.js';\nimport { C as ChannelAvatar } from './index-881fbba8.js';\nimport 'react-dom';\nimport './utils-dadb8f4b.js';\nvar RESET_MESSAGES = 'RESET_MESSAGES';\nvar RESET_STATE = 'RESET_STATE';\nvar CLEAR_SENT_MESSAGES = 'CLEAR_SENT_MESSAGES';\nvar GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nvar GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nvar GET_NEXT_MESSAGES_SUCESS = 'GET_NEXT_MESSAGES_SUCESS';\nvar GET_NEXT_MESSAGES_FAILURE = 'GET_NEXT_MESSAGES_FAILURE';\nvar SEND_MESSAGEGE_START = 'SEND_MESSAGEGE_START';\nvar SEND_MESSAGEGE_SUCESS = 'SEND_MESSAGEGE_SUCESS';\nvar SEND_MESSAGEGE_FAILURE = 'SEND_MESSAGEGE_FAILURE';\nvar RESEND_MESSAGEGE_START = 'RESEND_MESSAGEGE_START';\nvar ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nvar UPDATE_UNREAD_COUNT = 'UPDATE_UNREAD_COUNT';\nvar ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nvar ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nvar ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nvar ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nvar MARK_AS_READ = 'MARK_AS_READ';\nvar ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nvar SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\nvar MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\ngetOutgoingMessageStates();\nvar UNDEFINED = 'undefined';\n\nvar _getSendingMessageSta$1 = getSendingMessageStatus(),\n    SUCCEEDED$1 = _getSendingMessageSta$1.SUCCEEDED;\n\n_getSendingMessageSta$1.FAILED;\nvar PENDING$1 = _getSendingMessageSta$1.PENDING;\n\nvar scrollIntoLast = function scrollIntoLast() {\n  var intialTry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var MAX_TRIES = 10;\n  var currentTry = intialTry;\n\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n\n  try {\n    var scrollDOM = document.querySelector('.sendbird-conversation__messages-padding'); // eslint-disable-next-line no-multi-assign\n\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(function () {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nvar pubSubHandleRemover = function pubSubHandleRemover(subscriber) {\n  subscriber.forEach(function (s) {\n    try {\n      s.remove();\n    } catch (_unused) {//\n    }\n  });\n};\n\nvar pubSubHandler = function pubSubHandler(channelUrl, pubSub, dispatcher) {\n  var subscriber = new Map();\n  if (!pubSub || !pubSub.subscribe) return subscriber;\n  subscriber.set(SEND_USER_MESSAGE, pubSub.subscribe(SEND_USER_MESSAGE, function (msg) {\n    var channel = msg.channel,\n        message = msg.message;\n    scrollIntoLast();\n\n    if (channel && channelUrl === channel.url) {\n      dispatcher({\n        type: SEND_MESSAGEGE_SUCESS,\n        payload: message\n      });\n    }\n  }));\n  subscriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n    var channel = msg.channel,\n        message = msg.message;\n\n    if (channel && channelUrl === channel.url) {\n      dispatcher({\n        type: SEND_MESSAGEGE_START,\n        payload: message\n      });\n    }\n  }));\n  subscriber.set(SEND_FILE_MESSAGE, pubSub.subscribe(SEND_FILE_MESSAGE, function (msg) {\n    var channel = msg.channel,\n        message = msg.message;\n    scrollIntoLast();\n\n    if (channel && channelUrl === channel.url) {\n      dispatcher({\n        type: SEND_MESSAGEGE_SUCESS,\n        payload: message\n      });\n    }\n  }));\n  subscriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n    var channel = msg.channel,\n        message = msg.message,\n        fromSelector = msg.fromSelector;\n\n    if (fromSelector && channel && channelUrl === channel.url) {\n      dispatcher({\n        type: ON_MESSAGE_UPDATED,\n        payload: {\n          channel: channel,\n          message: message\n        }\n      });\n    }\n  }));\n  subscriber.set(DELETE_MESSAGE, pubSub.subscribe(DELETE_MESSAGE, function (msg) {\n    var channel = msg.channel,\n        messageId = msg.messageId;\n\n    if (channel && channelUrl === channel.url) {\n      dispatcher({\n        type: ON_MESSAGE_DELETED,\n        payload: messageId\n      });\n    }\n  }));\n  return subscriber;\n};\n\nvar isOperator = function isOperator() {\n  var groupChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var myRole = groupChannel.myRole;\n  return myRole === 'operator';\n};\n\nvar isDisabledBecauseFrozen = function isDisabledBecauseFrozen() {\n  var groupChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var isFrozen = groupChannel.isFrozen;\n  return isFrozen && !isOperator(groupChannel);\n};\n\nvar isDisabledBecauseMuted = function isDisabledBecauseMuted() {\n  var groupChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var myMutedState = groupChannel.myMutedState;\n  return myMutedState === 'muted';\n};\n\nvar getEmojiCategoriesFromEmojiContainer$1 = function getEmojiCategoriesFromEmojiContainer() {\n  var emojiContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return emojiContainer.emojiCategories ? emojiContainer.emojiCategories : [];\n};\n\nvar getAllEmojisFromEmojiContainer$1 = function getAllEmojisFromEmojiContainer() {\n  var emojiContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _emojiContainer$emoji = emojiContainer.emojiCategories,\n      emojiCategories = _emojiContainer$emoji === void 0 ? [] : _emojiContainer$emoji;\n  var allEmojis = [];\n\n  for (var categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    var emojis = emojiCategories[categoryIndex].emojis;\n\n    for (var emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      allEmojis.push(emojis[emojiIndex]);\n    }\n  }\n\n  return allEmojis;\n};\n\nvar getEmojisFromEmojiContainer$1 = function getEmojisFromEmojiContainer() {\n  var emojiContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var emojiCategoryId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return emojiContainer.emojiCategories ? emojiContainer.emojiCategories.filter(function (emojiCategory) {\n    return emojiCategory.id === emojiCategoryId;\n  })[0].emojis : [];\n};\n\nvar getAllEmojisMapFromEmojiContainer = function getAllEmojisMapFromEmojiContainer() {\n  var emojiContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _emojiContainer$emoji2 = emojiContainer.emojiCategories,\n      emojiCategories = _emojiContainer$emoji2 === void 0 ? [] : _emojiContainer$emoji2;\n  var allEmojisMap = new Map();\n\n  for (var categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    var emojis = emojiCategories[categoryIndex].emojis;\n\n    for (var emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      var _emojis$emojiIndex = emojis[emojiIndex],\n          key = _emojis$emojiIndex.key,\n          url = _emojis$emojiIndex.url;\n      allEmojisMap.set(key, url);\n    }\n  }\n\n  return allEmojisMap;\n};\n\nvar getNicknamesMapFromMembers = function getNicknamesMapFromMembers() {\n  var members = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var nicknamesMap = new Map();\n\n  for (var memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    var _members$memberIndex = members[memberIndex],\n        userId = _members$memberIndex.userId,\n        nickname = _members$memberIndex.nickname;\n    nicknamesMap.set(userId, nickname);\n  }\n\n  return nicknamesMap;\n};\n\nvar getMessageCreatedAt = function getMessageCreatedAt(message) {\n  return format(message.createdAt, 'p');\n};\n\nvar isSameGroup = function isSameGroup(message, comparingMessage) {\n  var _message$sender, _comparingMessage$sen, _message$sender2, _comparingMessage$sen2;\n\n  if (!(message && comparingMessage && (message === null || message === void 0 ? void 0 : message.messageType) !== 'admin' && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.messageType) !== 'admin' && message !== null && message !== void 0 && message.sender && comparingMessage !== null && comparingMessage !== void 0 && comparingMessage.sender && message !== null && message !== void 0 && message.createdAt && comparingMessage !== null && comparingMessage !== void 0 && comparingMessage.createdAt && message !== null && message !== void 0 && (_message$sender = message.sender) !== null && _message$sender !== void 0 && _message$sender.userId && comparingMessage !== null && comparingMessage !== void 0 && (_comparingMessage$sen = comparingMessage.sender) !== null && _comparingMessage$sen !== void 0 && _comparingMessage$sen.userId)) {\n    return false;\n  }\n\n  return (message === null || message === void 0 ? void 0 : message.sendingStatus) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sendingStatus) && (message === null || message === void 0 ? void 0 : (_message$sender2 = message.sender) === null || _message$sender2 === void 0 ? void 0 : _message$sender2.userId) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : (_comparingMessage$sen2 = comparingMessage.sender) === null || _comparingMessage$sen2 === void 0 ? void 0 : _comparingMessage$sen2.userId) && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage);\n};\n\nvar compareMessagesForGrouping = function compareMessagesForGrouping(prevMessage, currMessage, nextMessage) {\n  var sendingStatus = (currMessage === null || currMessage === void 0 ? void 0 : currMessage.sendingStatus) || '';\n  var isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [isSameGroup(prevMessage, currMessage) && isAcceptable, isSameGroup(currMessage, nextMessage) && isAcceptable];\n};\n\nvar hasOwnProperty = function hasOwnProperty(property) {\n  return function (payload) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (payload && payload.hasOwnProperty && payload.hasOwnProperty(property)) {\n      return true;\n    }\n\n    return false;\n  };\n};\n\nvar passUnsuccessfullMessages = function passUnsuccessfullMessages(allMessages, newMessage) {\n  var _newMessage$sendingSt = newMessage.sendingStatus,\n      sendingStatus = _newMessage$sendingSt === void 0 ? UNDEFINED : _newMessage$sendingSt;\n\n  if (sendingStatus === SUCCEEDED$1 || sendingStatus === PENDING$1) {\n    var lastIndexOfSucceededMessage = allMessages.map(function (message) {\n      return message.sendingStatus || (message.isAdminMessage && message.isAdminMessage() ? SUCCEEDED$1 : UNDEFINED);\n    }).lastIndexOf(SUCCEEDED$1);\n\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      var messages = _toConsumableArray(allMessages);\n\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n\n  return [].concat(_toConsumableArray(allMessages), [newMessage]);\n};\n\nvar pxToNumber = function pxToNumber(px) {\n  if (typeof px === 'number') {\n    return px;\n  }\n\n  if (typeof px === 'string') {\n    var parsed = Number.parseFloat(px);\n\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n\n  return null;\n};\n\nvar messagesInitialState = {\n  initialized: false,\n  loading: false,\n  allMessages: [],\n  currentGroupChannel: {\n    members: []\n  },\n  // for scrollup\n  hasMore: false,\n  lastMessageTimeStamp: 0,\n  // for scroll down\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMoreToBottom, onScrollDownCallback -> scroll down\n  // hasMore, onScrollCallback -> scroll up(default behavior)\n  hasMoreToBottom: false,\n  latestFetchedMessageTimeStamp: 0,\n  emojiContainer: {},\n  unreadCount: 0,\n  unreadSince: null,\n  isInvalid: false,\n  messageListParams: null\n};\n\nvar _getSendingMessageSta = getSendingMessageStatus(),\n    SUCCEEDED = _getSendingMessageSta.SUCCEEDED,\n    FAILED = _getSendingMessageSta.FAILED,\n    PENDING = _getSendingMessageSta.PENDING;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case RESET_STATE:\n      return messagesInitialState;\n\n    case RESET_MESSAGES:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        // when user switches channel, if the previous channel `hasMore`\n        // the onScroll gets called twice, setting hasMore false prevents this\n        hasMore: false,\n        allMessages: []\n      });\n\n    case GET_PREV_MESSAGES_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        loading: true\n      });\n\n    case CLEAR_SENT_MESSAGES:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: _toConsumableArray(state.allMessages.filter(function (m) {\n          return m.sendingStatus !== SUCCEEDED;\n        }))\n      });\n\n    case GET_PREV_MESSAGES_SUCESS:\n      {\n        var receivedMessages = action.payload.messages || [];\n        var _action$payload$curre = action.payload.currentGroupChannel,\n            currentGroupChannel = _action$payload$curre === void 0 ? {} : _action$payload$curre;\n        var stateChannel = state.currentGroupChannel || {};\n        var stateChannelUrl = stateChannel.url;\n        var actionChannelUrl = currentGroupChannel.url;\n\n        if (actionChannelUrl !== stateChannelUrl) {\n          return state;\n        } // remove duplicate messages\n\n\n        var duplicatedMessageIds = [];\n        var updatedAllMessages = state.allMessages.map(function (msg) {\n          var duplicatedMessage = receivedMessages.find(function (_ref) {\n            var messageId = _ref.messageId;\n            return compareIds(messageId, msg.messageId);\n          });\n\n          if (!duplicatedMessage) {\n            return msg;\n          }\n\n          duplicatedMessageIds.push(duplicatedMessage.messageId);\n          return duplicatedMessage.updatedAt > msg.updatedAt ? duplicatedMessage : msg;\n        });\n        var filteredNewMessages = duplicatedMessageIds.length > 0 ? receivedMessages.filter(function (msg) {\n          return !duplicatedMessageIds.find(function (messageId) {\n            return compareIds(messageId, msg.messageId);\n          });\n        }) : receivedMessages;\n        var hasHasMoreToBottom = hasOwnProperty('hasMoreToBottom')(action.payload);\n        var hasLatestFetchedMessageTimeStamp = hasOwnProperty('latestFetchedMessageTimeStamp')(action.payload);\n        return _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, state), {}, {\n          loading: false,\n          initialized: true,\n          hasMore: action.payload.hasMore,\n          lastMessageTimeStamp: action.payload.lastMessageTimeStamp\n        }, hasHasMoreToBottom && {\n          hasMoreToBottom: action.payload.hasMoreToBottom\n        }), hasLatestFetchedMessageTimeStamp && {\n          latestFetchedMessageTimeStamp: action.payload.latestFetchedMessageTimeStamp\n        }), {}, {\n          allMessages: [].concat(_toConsumableArray(filteredNewMessages), _toConsumableArray(updatedAllMessages))\n        });\n      }\n\n    case GET_NEXT_MESSAGES_SUCESS:\n      {\n        var _receivedMessages = action.payload.messages || [];\n\n        var _action$payload$curre2 = action.payload.currentGroupChannel,\n            _currentGroupChannel = _action$payload$curre2 === void 0 ? {} : _action$payload$curre2;\n\n        var _stateChannel = state.currentGroupChannel || {};\n\n        var _stateChannelUrl = _stateChannel.url;\n        var _actionChannelUrl = _currentGroupChannel.url;\n\n        if (_actionChannelUrl !== _stateChannelUrl) {\n          return state;\n        } // remove duplicate messages\n\n\n        var _duplicatedMessageIds = [];\n\n        var _updatedAllMessages = state.allMessages.map(function (msg) {\n          var duplicatedMessage = _receivedMessages.find(function (_ref2) {\n            var messageId = _ref2.messageId;\n            return compareIds(messageId, msg.messageId);\n          });\n\n          if (!duplicatedMessage) {\n            return msg;\n          }\n\n          _duplicatedMessageIds.push(duplicatedMessage.messageId);\n\n          return duplicatedMessage.updatedAt > msg.updatedAt ? duplicatedMessage : msg;\n        });\n\n        var _filteredNewMessages = _duplicatedMessageIds.length > 0 ? _receivedMessages.filter(function (msg) {\n          return !_duplicatedMessageIds.find(function (messageId) {\n            return compareIds(messageId, msg.messageId);\n          });\n        }) : _receivedMessages;\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          loading: false,\n          initialized: true,\n          hasMore: action.payload.hasMore,\n          lastMessageTimeStamp: action.payload.lastMessageTimeStamp,\n          hasMoreToBottom: action.payload.hasMoreToBottom,\n          latestFetchedMessageTimeStamp: action.payload.latestFetchedMessageTimeStamp,\n          allMessages: [].concat(_toConsumableArray(_updatedAllMessages), _toConsumableArray(_filteredNewMessages))\n        });\n      }\n\n    case GET_NEXT_MESSAGES_FAILURE:\n      {\n        return _objectSpread2({}, state);\n      }\n\n    case SEND_MESSAGEGE_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: [].concat(_toConsumableArray(state.allMessages), [_objectSpread2({}, action.payload)])\n      });\n\n    case SEND_MESSAGEGE_SUCESS:\n      {\n        var newMessages = state.allMessages.map(function (m) {\n          return compareIds(m.reqId, action.payload.reqId) ? action.payload : m;\n        });\n\n        _toConsumableArray(newMessages).sort(function (a, b) {\n          return a.sendingStatus && b.sendingStatus && a.sendingStatus === SUCCEEDED && (b.sendingStatus === PENDING || b.sendingStatus === FAILED) ? -1 : 1;\n        });\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: newMessages\n        });\n      }\n\n    case SEND_MESSAGEGE_FAILURE:\n      {\n        // eslint-disable-next-line no-param-reassign\n        action.payload.failed = true;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, action.payload.reqId) ? action.payload : m;\n          })\n        });\n      }\n\n    case SET_CURRENT_CHANNEL:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentGroupChannel: action.payload,\n          isInvalid: false\n        });\n      }\n\n    case SET_CHANNEL_INVALID:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          isInvalid: true\n        });\n      }\n\n    case UPDATE_UNREAD_COUNT:\n      {\n        var channel = action.payload.channel;\n\n        var _state$currentGroupCh = state.currentGroupChannel,\n            _currentGroupChannel2 = _state$currentGroupCh === void 0 ? {} : _state$currentGroupCh,\n            unreadCount = state.unreadCount;\n\n        var currentGroupChannelUrl = _currentGroupChannel2.url;\n\n        if (!compareIds(channel.url, currentGroupChannelUrl)) {\n          return state;\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          unreadSince: unreadCount + 1\n        });\n      }\n\n    case ON_MESSAGE_RECEIVED:\n      {\n        var _action$payload = action.payload,\n            _channel = _action$payload.channel,\n            message = _action$payload.message,\n            scrollToEnd = _action$payload.scrollToEnd;\n        var _unreadCount = 0;\n\n        var _state$currentGroupCh2 = state.currentGroupChannel,\n            _currentGroupChannel3 = _state$currentGroupCh2 === void 0 ? {} : _state$currentGroupCh2,\n            unreadSince = state.unreadSince;\n\n        var _currentGroupChannelUrl = _currentGroupChannel3.url;\n\n        if (!compareIds(_channel.url, _currentGroupChannelUrl)) {\n          return state;\n        } // Excluded overlapping messages\n\n\n        if (state.allMessages.some(function (msg) {\n          return msg.messageId === message.messageId;\n        })) {\n          return state;\n        } // Filter by userFilledQuery\n\n\n        if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n          return state;\n        }\n\n        _unreadCount = state.unreadCount + 1; // reset unreadCount if have to scrollToEnd\n\n        if (scrollToEnd) {\n          _unreadCount = 0;\n        }\n\n        if (message.isAdminMessage && message.isAdminMessage()) {\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            allMessages: passUnsuccessfullMessages(state.allMessages, message)\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          unreadCount: _unreadCount,\n          unreadSince: _unreadCount === 1 ? format(new Date(), 'p MMM dd') : unreadSince,\n          allMessages: passUnsuccessfullMessages(state.allMessages, message)\n        });\n      }\n\n    case ON_MESSAGE_UPDATED:\n      {\n        var _action$payload2 = action.payload,\n            _channel2 = _action$payload2.channel,\n            _message = _action$payload2.message;\n\n        var _currentGroupChannelUrl2 = state.currentGroupChannel && state.currentGroupChannel.url || '';\n\n        if (!compareIds(_channel2.url, _currentGroupChannelUrl2)) {\n          return state; // Ignore event when it is not for the current channel\n        }\n\n        if (state.messageListParams && !filterMessageListParams(state.messageListParams, _message)) {\n          // Delete the message if it doesn't match to the params anymore\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            allMessages: state.allMessages.filter(function (m) {\n              return !compareIds(m.messageId, _message === null || _message === void 0 ? void 0 : _message.messageId);\n            })\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.messageId, action.payload.message.messageId) ? action.payload.message : m;\n          })\n        });\n      }\n\n    case ON_MESSAGE_THREAD_INFO_UPDATED:\n      {\n        var _action$payload3 = action.payload,\n            _channel3 = _action$payload3.channel,\n            event = _action$payload3.event;\n        var channelUrl = event.channelUrl,\n            threadInfo = event.threadInfo,\n            targetMessageId = event.targetMessageId;\n\n        var _currentGroupChannelUrl3 = state.currentGroupChannel && state.currentGroupChannel.url || '';\n\n        if (!compareIds(_channel3.url, _currentGroupChannelUrl3) || !compareIds(_channel3.url, channelUrl)) {\n          return state; // Ignore event when it is not for the current channel\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            if (compareIds(m.messageId, targetMessageId)) {\n              // eslint-disable-next-line no-param-reassign\n              m.threadInfo = threadInfo; // Upsert threadInfo to the target message\n            }\n\n            return m;\n          })\n        });\n      }\n\n    case RESEND_MESSAGEGE_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: state.allMessages.map(function (m) {\n          return compareIds(m.reqId, action.payload.reqId) ? action.payload : m;\n        })\n      });\n\n    case MARK_AS_READ:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        unreadCount: 0,\n        unreadSince: null\n      });\n\n    case ON_MESSAGE_DELETED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: state.allMessages.filter(function (m) {\n          return !compareIds(m.messageId, action.payload);\n        })\n      });\n\n    case ON_MESSAGE_DELETED_BY_REQ_ID:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: state.allMessages.filter(function (m) {\n          return !compareIds(m.reqId, action.payload);\n        })\n      });\n\n    case SET_EMOJI_CONTAINER:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          emojiContainer: action.payload\n        });\n      }\n\n    case ON_REACTION_UPDATED:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            if (compareIds(m.messageId, action.payload.messageId)) {\n              if (m.applyReactionEvent && typeof m.applyReactionEvent === 'function') {\n                m.applyReactionEvent(action.payload);\n              }\n\n              return m;\n            }\n\n            return m;\n          })\n        });\n      }\n\n    case MESSAGE_LIST_PARAMS_CHANGED:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          messageListParams: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n/**\n * Handles ChannelEvents and send values to dispatcher using messagesDispatcher\n * messagesDispatcher: Dispatcher\n * sdk: sdkInstance\n * logger: loggerInstance\n * channelUrl: string\n * sdkInit: bool\n */\n\n\nfunction useHandleChannelEvents(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      sdkInit = _ref.sdkInit,\n      hasMoreToBottom = _ref.hasMoreToBottom;\n  var messagesDispatcher = _ref2.messagesDispatcher,\n      sdk = _ref2.sdk,\n      logger = _ref2.logger,\n      scrollRef = _ref2.scrollRef,\n      setQuoteMessage = _ref2.setQuoteMessage;\n  var channelUrl = currentGroupChannel && (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url);\n  useEffect(function () {\n    var messageReceiverId = uuidv4();\n\n    if (channelUrl && sdk && sdk.ChannelHandler) {\n      var ChannelHandler = new sdk.ChannelHandler();\n      logger.info('Channel | useHandleChannelEvents: Setup event handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = function (channel, message) {\n        // donot update if hasMoreToBottom\n        if (compareIds(channel.url, channelUrl) && !hasMoreToBottom) {\n          var scrollToEnd = false;\n\n          try {\n            var current = scrollRef.current;\n            scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight;\n          } catch (error) {//\n          }\n\n          logger.info('Channel | useHandleChannelEvents: onMessageReceived', message);\n          messagesDispatcher({\n            type: ON_MESSAGE_RECEIVED,\n            payload: {\n              channel: channel,\n              message: message,\n              scrollToEnd: scrollToEnd\n            }\n          });\n\n          if (scrollToEnd) {\n            try {\n              setTimeout(function () {\n                try {\n                  currentGroupChannel.markAsRead();\n                } catch (_unused) {//\n                }\n\n                scrollIntoLast();\n              });\n            } catch (error) {\n              logger.warning('Channel | onMessageReceived | scroll to end failed');\n            }\n          }\n        }\n\n        if (compareIds(channel.url, channelUrl) && hasMoreToBottom) {\n          messagesDispatcher({\n            type: UPDATE_UNREAD_COUNT,\n            payload: {\n              channel: channel\n            }\n          });\n        }\n      };\n      /**\n       * We need to update current channel with the channel,\n       * when onReadReceiptUpdated or onDeliveryReceiptUpdated are called,\n       * because cachedReadReceiptStatus and cachedDeliveryReceiptStatus properties were changed\n       */\n\n\n      ChannelHandler.onReadReceiptUpdated = function (channel) {\n        if (compareIds(channel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onReadReceiptUpdated', channel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: channel\n          });\n        }\n      };\n\n      ChannelHandler.onDeliveryReceiptUpdated = function (channel) {\n        if (compareIds(channel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onDeliveryReceiptUpdated', channel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: channel\n          });\n        }\n      };\n\n      ChannelHandler.onMessageUpdated = function (channel, message) {\n        logger.info('Channel | useHandleChannelEvents: onMessageUpdated', message);\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      };\n\n      ChannelHandler.onThreadInfoUpdated = function (channel, event) {\n        logger.info('Channel | useHandleChannelEvents: onThreadInfoUpdated', event);\n        messagesDispatcher({\n          type: ON_MESSAGE_THREAD_INFO_UPDATED,\n          payload: {\n            channel: channel,\n            event: event\n          }\n        });\n      };\n\n      ChannelHandler.onMessageDeleted = function (_, messageId) {\n        logger.info('Channel | useHandleChannelEvents: onMessageDeleted', messageId);\n        setQuoteMessage(null);\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: messageId\n        });\n      };\n\n      ChannelHandler.onReactionUpdated = function (_, reactionEvent) {\n        logger.info('Channel | useHandleChannelEvents: onReactionUpdated', reactionEvent);\n        messagesDispatcher({\n          type: ON_REACTION_UPDATED,\n          payload: reactionEvent\n        });\n      };\n\n      ChannelHandler.onChannelChanged = function (groupChannel) {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelChanged', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onChannelFrozen = function (groupChannel) {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelFrozen', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onChannelUnfrozen = function (groupChannel) {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelUnFrozen', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onUserMuted = function (groupChannel) {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onUserMuted', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onUserUnmuted = function (groupChannel) {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onUserUnmuted', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onUserBanned = function (groupChannel) {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onUserBanned', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      };\n\n      ChannelHandler.onOperatorUpdated = function (groupChannel) {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onOperatorUpdated', groupChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        }\n      }; // Add this channel event handler to the SendBird object.\n\n\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return function () {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('Channel | useHandleChannelEvents: Removing message reciver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    };\n  }, [channelUrl, sdkInit]);\n}\n\nfunction useSetChannel(_ref, _ref2) {\n  var channelUrl = _ref.channelUrl,\n      sdkInit = _ref.sdkInit;\n  var messagesDispatcher = _ref2.messagesDispatcher,\n      sdk = _ref2.sdk,\n      logger = _ref2.logger;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && sdk.GroupChannel) {\n      logger.info('Channel | useSetChannel fetching channel', channelUrl);\n      sdk.GroupChannel.getChannel(channelUrl).then(function (groupChannel) {\n        logger.info('Channel | useSetChannel fetched channel', groupChannel);\n        messagesDispatcher({\n          type: SET_CURRENT_CHANNEL,\n          payload: groupChannel\n        });\n        logger.info('Channel: Mark as read', groupChannel); // this order is important - this mark as read should update the event handler up above\n\n        try {\n          groupChannel.markAsRead();\n        } catch (_unused) {//\n        }\n      }).catch(function (e) {\n        logger.warning('Channel | useSetChannel fetch channel failed', {\n          channelUrl: channelUrl,\n          e: e\n        });\n        messagesDispatcher({\n          type: SET_CHANNEL_INVALID\n        });\n      });\n      sdk.getAllEmoji(function (emojiContainer_, err) {\n        if (err) {\n          logger.error('Channel: Getting emojis failed', err);\n          return;\n        }\n\n        logger.info('Channel: Getting emojis success', emojiContainer_);\n        messagesDispatcher({\n          type: SET_EMOJI_CONTAINER,\n          payload: emojiContainer_\n        });\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nvar PREV_RESULT_SIZE = 30;\nvar NEXT_RESULT_SIZE = 10;\n\nvar getLatestMessageTimeStamp = function getLatestMessageTimeStamp() {\n  var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var latestMessage = messages[messages.length - 1];\n  return latestMessage && latestMessage.createdAt || null;\n};\n\nfunction useInitialMessagesFetch(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      userFilledMessageListQuery = _ref.userFilledMessageListQuery,\n      intialTimeStamp = _ref.intialTimeStamp,\n      replyType = _ref.replyType;\n  var sdk = _ref2.sdk,\n      logger = _ref2.logger,\n      messagesDispatcher = _ref2.messagesDispatcher;\n  var channelUrl = currentGroupChannel && currentGroupChannel.url;\n  useEffect(function () {\n    logger.info('Channel useInitialMessagesFetch: Setup started', currentGroupChannel);\n    messagesDispatcher({\n      type: RESET_MESSAGES\n    });\n\n    if (sdk && sdk.MessageListParams && currentGroupChannel && currentGroupChannel.getMessagesByTimestamp) {\n      var messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = PREV_RESULT_SIZE;\n      messageListParams.isInclusive = true;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReaction = true;\n\n      if (replyType && replyType === 'QUOTE_REPLY') {\n        messageListParams.includeThreadInfo = true;\n        messageListParams.includeParentMessageInfo = true;\n        messageListParams.replyType = 'only_reply_to_channel';\n      }\n\n      if (userFilledMessageListQuery) {\n        Object.keys(userFilledMessageListQuery).forEach(function (key) {\n          messageListParams[key] = userFilledMessageListQuery[key];\n        });\n      }\n\n      if (replyType && replyType === 'QUOTE_REPLY' || userFilledMessageListQuery) {\n        logger.info('Channel useInitialMessagesFetch: Setup messageListParams', messageListParams);\n        messagesDispatcher({\n          type: MESSAGE_LIST_PARAMS_CHANGED,\n          payload: messageListParams\n        });\n      }\n\n      logger.info('Channel: Fetching messages', {\n        currentGroupChannel: currentGroupChannel,\n        userFilledMessageListQuery: userFilledMessageListQuery\n      });\n      messagesDispatcher({\n        type: GET_PREV_MESSAGES_START\n      });\n\n      if (intialTimeStamp) {\n        messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n        currentGroupChannel.getMessagesByTimestamp(intialTimeStamp, messageListParams).then(function (messages) {\n          var hasMore = messages && messages.length > 0;\n          var lastMessageTimeStamp = hasMore ? messages[0].createdAt : null;\n          var latestFetchedMessageTimeStamp = getLatestMessageTimeStamp(messages); // to make sure there are no more messages below\n\n          var nextMessageListParams = new sdk.MessageListParams();\n          nextMessageListParams.nextResultSize = NEXT_RESULT_SIZE;\n          nextMessageListParams.isInclusive = true;\n          nextMessageListParams.includeReplies = false;\n          nextMessageListParams.includeReaction = true;\n\n          if (replyType && replyType === 'QUOTE_REPLY') {\n            nextMessageListParams.includeThreadInfo = true;\n            nextMessageListParams.includeParentMessageInfo = true;\n            nextMessageListParams.replyType = 'only_reply_to_channel';\n          }\n\n          if (userFilledMessageListQuery) {\n            Object.keys(userFilledMessageListQuery).forEach(function (key) {\n              nextMessageListParams[key] = userFilledMessageListQuery[key];\n            });\n          }\n\n          currentGroupChannel.getMessagesByTimestamp(latestFetchedMessageTimeStamp || new Date().getTime(), nextMessageListParams).then(function (nextMessages) {\n            messagesDispatcher({\n              type: GET_PREV_MESSAGES_SUCESS,\n              payload: {\n                messages: messages,\n                hasMore: hasMore,\n                lastMessageTimeStamp: lastMessageTimeStamp,\n                currentGroupChannel: currentGroupChannel,\n                latestFetchedMessageTimeStamp: latestFetchedMessageTimeStamp,\n                hasMoreToBottom: nextMessages && nextMessages.length > 0\n              }\n            });\n          });\n        }).catch(function (error) {\n          logger.error('Channel: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              messages: [],\n              hasMore: false,\n              lastMessageTimeStamp: 0,\n              currentGroupChannel: currentGroupChannel\n            }\n          });\n        }).finally(function () {\n          if (!intialTimeStamp) {\n            setTimeout(function () {\n              return scrollIntoLast();\n            });\n          }\n\n          try {\n            currentGroupChannel.markAsRead();\n          } catch (_unused) {//\n          }\n        });\n      } else {\n        currentGroupChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams).then(function (messages) {\n          var hasMore = messages && messages.length > 0;\n          var lastMessageTimeStamp = hasMore ? messages[0].createdAt : null;\n          var latestFetchedMessageTimeStamp = getLatestMessageTimeStamp(messages);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              messages: messages,\n              hasMore: hasMore,\n              lastMessageTimeStamp: lastMessageTimeStamp,\n              currentGroupChannel: currentGroupChannel,\n              latestFetchedMessageTimeStamp: latestFetchedMessageTimeStamp,\n              hasMoreToBottom: false\n            }\n          });\n        }).catch(function (error) {\n          logger.error('Channel: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              messages: [],\n              hasMore: false,\n              lastMessageTimeStamp: 0,\n              currentGroupChannel: currentGroupChannel\n            }\n          });\n        }).finally(function () {\n          if (!intialTimeStamp) {\n            setTimeout(function () {\n              return scrollIntoLast();\n            });\n          }\n\n          try {\n            currentGroupChannel.markAsRead();\n          } catch (_unused2) {//\n          }\n        });\n      }\n    }\n  }, [channelUrl, userFilledMessageListQuery, intialTimeStamp]);\n  /**\n   * Note - useEffect(() => {}, [currentGroupChannel])\n   * was buggy, that is why we did\n   * const channelUrl = currentGroupChannel && currentGroupChannel.url;\n   * useEffect(() => {}, [channelUrl])\n   * Again, this hook is supposed to execute when currentGroupChannel changes\n   * The 'channelUrl' here is not the same memory reference from Conversation.props\n   */\n}\n\nfunction useHandleReconnect(_a, _b) {\n  var isOnline = _a.isOnline,\n      replyType = _a.replyType;\n  var logger = _b.logger,\n      sdk = _b.sdk,\n      currentGroupChannel = _b.currentGroupChannel,\n      messagesDispatcher = _b.messagesDispatcher,\n      userFilledMessageListQuery = _b.userFilledMessageListQuery;\n  useEffect(function () {\n    var wasOffline = !isOnline;\n    return function () {\n      var _a; // state changed from offline to online\n\n\n      if (wasOffline && (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url)) {\n        logger.info('Refreshing conversation state');\n        var useReaction = ((_a = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a === void 0 ? void 0 : _a.isUsingReaction) || false;\n        var messageListParams_1 = new sdk.MessageListParams();\n        messageListParams_1.prevResultSize = 30;\n        messageListParams_1.isInclusive = true;\n        messageListParams_1.includeReplies = false;\n        messageListParams_1.includeReaction = useReaction;\n\n        if (replyType && replyType === 'QUOTE_REPLY') {\n          messageListParams_1.includeThreadInfo = true;\n          messageListParams_1.includeParentMessageInfo = true;\n          messageListParams_1.replyType = 'only_reply_to_channel';\n        }\n\n        if (userFilledMessageListQuery) {\n          Object.keys(userFilledMessageListQuery).forEach(function (key) {\n            messageListParams_1[key] = userFilledMessageListQuery[key];\n          });\n        }\n\n        logger.info('Channel: Fetching messages', {\n          currentGroupChannel: currentGroupChannel,\n          userFilledMessageListQuery: userFilledMessageListQuery\n        });\n        messagesDispatcher({\n          type: GET_PREV_MESSAGES_START,\n          payload: null\n        });\n        sdk.GroupChannel.getChannel(currentGroupChannel.url).then(function (groupChannel) {\n          var lastMessageTime = new Date().getTime();\n          groupChannel.getMessagesByTimestamp(lastMessageTime, messageListParams_1).then(function (messages) {\n            messagesDispatcher({\n              type: CLEAR_SENT_MESSAGES,\n              payload: null\n            });\n            var hasMore = (messages === null || messages === void 0 ? void 0 : messages.length) > 0;\n            var lastMessageTimeStamp = hasMore ? messages[0].createdAt : null;\n            messagesDispatcher({\n              type: GET_PREV_MESSAGES_SUCESS,\n              payload: {\n                messages: messages,\n                hasMore: hasMore,\n                lastMessageTimeStamp: lastMessageTimeStamp,\n                currentGroupChannel: currentGroupChannel\n              }\n            });\n            setTimeout(function () {\n              return scrollIntoLast();\n            });\n          }).catch(function (error) {\n            logger.error('Channel: Fetching messages failed', error);\n          }).finally(function () {\n            var _a;\n\n            try {\n              (_a = currentGroupChannel.markAsRead) === null || _a === void 0 ? void 0 : _a.call(currentGroupChannel);\n            } catch (_b) {//\n            }\n          });\n        });\n      }\n    };\n  }, [isOnline, replyType]);\n}\n\nfunction useScrollCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      lastMessageTimeStamp = _ref.lastMessageTimeStamp,\n      userFilledMessageListQuery = _ref.userFilledMessageListQuery,\n      replyType = _ref.replyType;\n  var hasMore = _ref2.hasMore,\n      logger = _ref2.logger,\n      messagesDispatcher = _ref2.messagesDispatcher,\n      sdk = _ref2.sdk;\n  return useCallback(function (cb) {\n    if (!hasMore) {\n      return;\n    }\n\n    var _sdk$appInfo = sdk.appInfo,\n        appInfo = _sdk$appInfo === void 0 ? {} : _sdk$appInfo;\n    var useReaction = appInfo.isUsingReaction || false;\n    var messageListParams = new sdk.MessageListParams();\n    messageListParams.prevResultSize = 30;\n    messageListParams.isInclusive = true;\n    messageListParams.includeReplies = false;\n    messageListParams.includeReaction = useReaction;\n\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = 'only_reply_to_channel';\n    }\n\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach(function (key) {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n\n    logger.info('Channel: Fetching messages', {\n      currentGroupChannel: currentGroupChannel,\n      userFilledMessageListQuery: userFilledMessageListQuery\n    });\n    currentGroupChannel.getMessagesByTimestamp(lastMessageTimeStamp || new Date().getTime(), messageListParams).then(function (messages) {\n      var hasMoreMessages = messages && messages.length > 0;\n      var lastMessageTs = hasMoreMessages ? messages[0].createdAt : null;\n      messagesDispatcher({\n        type: GET_PREV_MESSAGES_SUCESS,\n        payload: {\n          messages: messages,\n          hasMore: hasMoreMessages,\n          lastMessageTimeStamp: lastMessageTs,\n          currentGroupChannel: currentGroupChannel\n        }\n      });\n      cb([messages, null]);\n    }).catch(function (error) {\n      logger.error('Channel: Fetching messages failed', error);\n      messagesDispatcher({\n        type: GET_PREV_MESSAGES_SUCESS,\n        payload: {\n          messages: [],\n          hasMore: false,\n          lastMessageTimeStamp: 0,\n          currentGroupChannel: currentGroupChannel\n        }\n      });\n      cb([null, error]);\n    }).finally(function () {\n      try {\n        currentGroupChannel.markAsRead();\n      } catch (_unused) {//\n      }\n    });\n  }, [currentGroupChannel, lastMessageTimeStamp, replyType]);\n}\n\nvar RESULT_SIZE = 30;\n\nfunction useScrollDownCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      latestFetchedMessageTimeStamp = _ref.latestFetchedMessageTimeStamp,\n      userFilledMessageListQuery = _ref.userFilledMessageListQuery,\n      hasMoreToBottom = _ref.hasMoreToBottom,\n      replyType = _ref.replyType;\n  var logger = _ref2.logger,\n      messagesDispatcher = _ref2.messagesDispatcher,\n      sdk = _ref2.sdk;\n  return useCallback(function (cb) {\n    if (!hasMoreToBottom) {\n      return;\n    }\n\n    var _sdk$appInfo = sdk.appInfo,\n        appInfo = _sdk$appInfo === void 0 ? {} : _sdk$appInfo;\n    var useReaction = appInfo.isUsingReaction || false;\n    var messageListParams = new sdk.MessageListParams();\n    messageListParams.nextResultSize = RESULT_SIZE;\n    messageListParams.isInclusive = true;\n    messageListParams.includeReplies = false;\n    messageListParams.includeReaction = useReaction;\n\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = 'only_reply_to_channel';\n    }\n\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach(function (key) {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n\n    logger.info('Channel: Fetching later messages', {\n      currentGroupChannel: currentGroupChannel,\n      userFilledMessageListQuery: userFilledMessageListQuery\n    });\n    currentGroupChannel.getMessagesByTimestamp(latestFetchedMessageTimeStamp || new Date().getTime(), messageListParams).then(function (messages) {\n      var messagesLength = messages && messages.length || 0;\n      var hasMoreMessages = messagesLength > 0 && messageListParams.nextResultSize === messagesLength;\n      var lastMessageTs = hasMoreMessages ? messages[messages.length - 1].createdAt : null;\n      messagesDispatcher({\n        type: GET_NEXT_MESSAGES_SUCESS,\n        payload: {\n          messages: messages,\n          hasMoreToBottom: hasMoreMessages,\n          latestFetchedMessageTimeStamp: lastMessageTs,\n          currentGroupChannel: currentGroupChannel\n        }\n      });\n      cb([messages, null]);\n    }).catch(function (error) {\n      logger.error('Channel: Fetching later messages failed', error);\n      messagesDispatcher({\n        type: GET_NEXT_MESSAGES_FAILURE,\n        payload: {\n          messages: [],\n          hasMoreToBottom: false,\n          latestFetchedMessageTimeStamp: 0,\n          currentGroupChannel: currentGroupChannel\n        }\n      });\n      cb([null, error]);\n    }).finally(function () {\n      try {\n        currentGroupChannel.markAsRead();\n      } catch (_unused) {//\n      }\n    });\n  }, [currentGroupChannel, latestFetchedMessageTimeStamp, hasMoreToBottom, replyType]);\n}\n\nfunction useDeleteMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      messagesDispatcher = _ref.messagesDispatcher;\n  var logger = _ref2.logger;\n  return useCallback(function (message, cb) {\n    logger.info('Channel | useDeleteMessageCallback: Deleting message', message);\n    var requestState = message.requestState;\n    logger.info('Channel | useDeleteMessageCallback: Deleting message requestState:', requestState); // Message is only on local\n\n    if (requestState === 'failed' || requestState === 'pending') {\n      logger.info('Channel | useDeleteMessageCallback: Deleted message from local:', message);\n      messagesDispatcher({\n        type: ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId\n      });\n\n      if (cb) {\n        cb();\n      }\n\n      return;\n    } // Message is on server\n\n\n    currentGroupChannel.deleteMessage(message, function (err) {\n      logger.info('Channel | useDeleteMessageCallback: Deleting message from remote:', requestState);\n\n      if (cb) {\n        cb(err);\n      }\n\n      if (!err) {\n        logger.info('Channel | useDeleteMessageCallback: Deleting message success!', message);\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: message.messageId\n        });\n      } else {\n        logger.warning('Channel | useDeleteMessageCallback: Deleting message failed!', err);\n      }\n    });\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nfunction useUpdateMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      messagesDispatcher = _ref.messagesDispatcher,\n      onBeforeUpdateUserMessage = _ref.onBeforeUpdateUserMessage;\n  var logger = _ref2.logger,\n      pubSub = _ref2.pubSub,\n      sdk = _ref2.sdk;\n  return useCallback(function (messageId, text, cb) {\n    var createParamsDefault = function createParamsDefault(txt) {\n      var params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    var createCustomPrams = onBeforeUpdateUserMessage && typeof onBeforeUpdateUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeUpdateUserMessage', onBeforeUpdateUserMessage);\n    }\n\n    var params = onBeforeUpdateUserMessage ? onBeforeUpdateUserMessage(text) : createParamsDefault(text);\n    currentGroupChannel.updateUserMessage(messageId, params, function (r, e) {\n      logger.info('Channel: Updating message!', params);\n      var swapParams = sdk.getErrorFirstCallback();\n      var message = r;\n      var err = e;\n\n      if (swapParams) {\n        message = e;\n        err = r;\n      }\n\n      if (cb) {\n        cb(err, message);\n      }\n\n      if (!err) {\n        logger.info('Channel: Updating message success!', message);\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentGroupChannel,\n            message: message\n          }\n        });\n        pubSub.publish(UPDATE_USER_MESSAGE, {\n          message: message,\n          channel: currentGroupChannel\n        });\n      } else {\n        logger.warning('Channel: Updating message failed!', err);\n      }\n    });\n  }, [currentGroupChannel.url, messagesDispatcher, onBeforeUpdateUserMessage]);\n}\n\nfunction useResendMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      messagesDispatcher = _ref.messagesDispatcher;\n  var logger = _ref2.logger;\n  return useCallback(function (failedMessage) {\n    logger.info('Channel: Resending message has started', failedMessage);\n    var messageType = failedMessage.messageType,\n        file = failedMessage.file;\n\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable()) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: RESEND_MESSAGEGE_START,\n        payload: failedMessage\n      }); // userMessage\n\n      if (messageType === 'user') {\n        currentGroupChannel.resendUserMessage(failedMessage).then(function (message) {\n          logger.info('Channel: Resending message success!', {\n            message: message\n          });\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_SUCESS,\n            payload: message\n          });\n        }).catch(function (e) {\n          logger.warning('Channel: Resending message failed!', {\n            e: e\n          }); // eslint-disable-next-line no-param-reassign\n\n          failedMessage.requestState = 'failed';\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_FAILURE,\n            payload: failedMessage\n          });\n        }); // eslint-disable-next-line no-param-reassign\n\n        failedMessage.requestState = 'pending';\n        messagesDispatcher({\n          type: RESEND_MESSAGEGE_START,\n          payload: failedMessage\n        });\n        return;\n      }\n\n      if (messageType === 'file') {\n        currentGroupChannel.resendFileMessage(failedMessage, file).then(function (message) {\n          logger.info('Channel: Resending file message success!', {\n            message: message\n          });\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_SUCESS,\n            payload: message\n          });\n        }).catch(function (e) {\n          logger.warning('Channel: Resending file message failed!', {\n            e: e\n          }); // eslint-disable-next-line no-param-reassign\n\n          failedMessage.requestState = 'failed';\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_FAILURE,\n            payload: failedMessage\n          });\n        }); // eslint-disable-next-line no-param-reassign\n\n        failedMessage.requestState = 'pending';\n        messagesDispatcher({\n          type: RESEND_MESSAGEGE_START,\n          payload: failedMessage\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('Message is not resendable');\n      logger.warning('Message is not resendable', failedMessage);\n    }\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nfunction useSendMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      onBeforeSendUserMessage = _ref.onBeforeSendUserMessage;\n  var sdk = _ref2.sdk,\n      logger = _ref2.logger,\n      pubSub = _ref2.pubSub,\n      messagesDispatcher = _ref2.messagesDispatcher;\n  var messageInputRef = useRef(null);\n  var sendMessage = useCallback(function () {\n    var quoteMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var text = messageInputRef.current.value;\n\n    var createParamsDefault = function createParamsDefault(txt) {\n      var message = typeof txt === 'string' ? txt.trim() : txt;\n      var params = new sdk.UserMessageParams();\n      params.message = message;\n\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n\n      return params;\n    };\n\n    var createCustomPrams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n    }\n\n    var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text, quoteMessage) : createParamsDefault(text);\n    logger.info('Channel: Sending message has started', params);\n    var pendingMsg = currentGroupChannel.sendUserMessage(params, function (res, err) {\n      var swapParams = sdk.getErrorFirstCallback();\n      var message = res;\n      var error = err;\n\n      if (swapParams) {\n        message = err;\n        error = res;\n      } // sending params instead of pending message\n      // to make sure that we can resend the message once it fails\n\n\n      if (error) {\n        logger.warning('Channel: Sending message failed!', {\n          message: message\n        });\n        messagesDispatcher({\n          type: SEND_MESSAGEGE_FAILURE,\n          payload: message\n        });\n        return;\n      }\n\n      logger.info('Channel: Sending message success!', message);\n      messagesDispatcher({\n        type: SEND_MESSAGEGE_SUCESS,\n        payload: message\n      });\n    });\n    pubSub.publish(SEND_MESSAGE_START, {\n      /* pubSub is used instead of messagesDispatcher\n        to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n      message: pendingMsg,\n      channel: currentGroupChannel\n    });\n    setTimeout(function () {\n      return scrollIntoLast();\n    });\n  }, [currentGroupChannel, onBeforeSendUserMessage]);\n  return [messageInputRef, sendMessage];\n}\n\nfunction useSendFileMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n      onBeforeSendFileMessage = _ref.onBeforeSendFileMessage,\n      _ref$imageCompression = _ref.imageCompression,\n      imageCompression = _ref$imageCompression === void 0 ? {} : _ref$imageCompression;\n  var sdk = _ref2.sdk,\n      logger = _ref2.logger,\n      pubSub = _ref2.pubSub,\n      messagesDispatcher = _ref2.messagesDispatcher;\n  var sendMessage = useCallback(function (file) {\n    var quoteMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var compressionRate = imageCompression.compressionRate,\n        resizingWidth = imageCompression.resizingWidth,\n        resizingHeight = imageCompression.resizingHeight;\n    var createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n    var compressibleFileType = file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg';\n    var compressibleRatio = compressionRate > 0 && compressionRate < 1; // pxToNumber returns null if values are invalid\n\n    var compressibleDiamensions = pxToNumber(resizingWidth) || pxToNumber(resizingHeight);\n    var canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n    var createParamsDefault = function createParamsDefault(file_) {\n      var params = new sdk.FileMessageParams();\n      params.file = file_;\n\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n\n      return params;\n    };\n\n    if (canCompressImage) {\n      // Using image compression\n      try {\n        var image = document.createElement('img');\n        image.src = URL.createObjectURL(file);\n\n        image.onload = function () {\n          URL.revokeObjectURL(image.src);\n          var canvas = document.createElement('canvas');\n          var imageWdith = image.naturalWidth || image.width;\n          var imageHeight = image.naturalHeight || image.height;\n          var targetWidth = pxToNumber(resizingWidth) || imageWdith;\n          var targetHeight = pxToNumber(resizingHeight) || imageHeight; // In canvas.toBlob(callback, mimeType, qualityArgument)\n          // qualityArgument doesnt work\n          // so in case compressibleDiamensions are not present, we use ratio\n\n          if (file.type === 'image/png' && !compressibleDiamensions) {\n            targetWidth *= compressionRate;\n            targetHeight *= compressionRate;\n          }\n\n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          var context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, targetWidth, targetHeight);\n          context.canvas.toBlob(function (newImageBlob) {\n            var compressedFile = new File([newImageBlob], file.name, {\n              type: file.type\n            });\n\n            if (createCustomParams) {\n              logger.info('Channel: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n            }\n\n            var params = createCustomParams ? onBeforeSendFileMessage(compressedFile, quoteMessage) : createParamsDefault(compressedFile);\n            logger.info('Channel: Uploading file message start!', params);\n            var pendingMessage = currentGroupChannel.sendFileMessage(params, function (response, err) {\n              var swapParams = sdk.getErrorFirstCallback();\n\n              var _ref3 = swapParams ? [err, response] : [response, err],\n                  _ref4 = _slicedToArray(_ref3, 2),\n                  message = _ref4[0],\n                  error = _ref4[1];\n\n              if (error) {\n                // sending params instead of pending message\n                // to make sure that we can resend the message once it fails\n                logger.error('Channel: Sending file message failed!', {\n                  message: message,\n                  error: error\n                });\n                message.localUrl = URL.createObjectURL(compressedFile);\n                message.file = compressedFile;\n                messagesDispatcher({\n                  type: SEND_MESSAGEGE_FAILURE,\n                  payload: message\n                });\n                return;\n              }\n\n              logger.info('Channel: Sending file message success!', message);\n              messagesDispatcher({\n                type: SEND_MESSAGEGE_SUCESS,\n                payload: message\n              });\n            });\n            pubSub.publish(SEND_MESSAGE_START, {\n              /* pubSub is used instead of messagesDispatcher\n                to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n              message: _objectSpread2(_objectSpread2({}, pendingMessage), {}, {\n                url: URL.createObjectURL(compressedFile),\n                // pending thumbnail message seems to be failed\n                requestState: 'pending'\n              }),\n              channel: currentGroupChannel\n            });\n            setTimeout(function () {\n              return scrollIntoLast();\n            }, 1000);\n          }, file.type, compressionRate);\n        };\n      } catch (error) {\n        logger.error('Channel: Sending file message failed!', error);\n      }\n    } else {\n      // Not using image compression\n      if (createCustomParams) {\n        logger.info('Channel: creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n      }\n\n      var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file, quoteMessage) : createParamsDefault(file);\n      logger.info('Channel: Uploading file message start!', params);\n      var pendingMsg = currentGroupChannel.sendFileMessage(params, function (response, err) {\n        var swapParams = sdk.getErrorFirstCallback();\n\n        var _ref5 = swapParams ? [err, response] : [response, err],\n            _ref6 = _slicedToArray(_ref5, 2),\n            message = _ref6[0],\n            error = _ref6[1];\n\n        if (error) {\n          // sending params instead of pending message\n          // to make sure that we can resend the message once it fails\n          logger.error('Channel: Sending file message failed!', {\n            message: message,\n            error: error\n          });\n          message.localUrl = URL.createObjectURL(file);\n          message.file = file;\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_FAILURE,\n            payload: message\n          });\n          return;\n        }\n\n        logger.info('Channel: Sending message success!', message);\n        messagesDispatcher({\n          type: SEND_MESSAGEGE_SUCESS,\n          payload: message\n        });\n      });\n      pubSub.publish(SEND_MESSAGE_START, {\n        /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n        message: _objectSpread2(_objectSpread2({}, pendingMsg), {}, {\n          url: URL.createObjectURL(file),\n          // pending thumbnail message seems to be failed\n          requestState: 'pending'\n        }),\n        channel: currentGroupChannel\n      });\n      setTimeout(function () {\n        return scrollIntoLast();\n      }, 1000);\n    }\n  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);\n  return [sendMessage];\n}\n\nvar ReactionButton = /*#__PURE__*/React__default.forwardRef(function (props, ref) {\n  var className = props.className,\n      width = props.width,\n      height = props.height,\n      selected = props.selected,\n      _onClick = props.onClick,\n      children = props.children;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), [\"sendbird-reaction-button\".concat(selected ? '--selected' : '')]).join(' '),\n    ref: ref,\n    role: \"button\",\n    style: {\n      width: typeof width === 'string' ? \"\".concat(width.slice(0, -2) - 2, \"px\") : \"\".concat(width - 2, \"px\"),\n      height: typeof height === 'string' ? \"\".concat(height.slice(0, -2) - 2, \"px\") : \"\".concat(height - 2, \"px\")\n    },\n    onClick: function onClick(e) {\n      return _onClick(e);\n    },\n    onKeyDown: function onKeyDown(e) {\n      return _onClick(e);\n    },\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-reaction-button__inner\"\n  }, children));\n});\nReactionButton.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  selected: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.element.isRequired\n};\nReactionButton.defaultProps = {\n  className: '',\n  width: '36px',\n  height: '36px',\n  selected: false,\n  onClick: function onClick() {}\n};\n\nfunction useMemoizedEmojiListItems(_ref, _ref2) {\n  var emojiContainer = _ref.emojiContainer,\n      toggleReaction = _ref.toggleReaction;\n  var useReaction = _ref2.useReaction,\n      logger = _ref2.logger,\n      userId = _ref2.userId,\n      emojiAllList = _ref2.emojiAllList;\n  /* eslint-disable react/prop-types */\n\n  return useMemo(function () {\n    return function (_ref3) {\n      var parentRef = _ref3.parentRef,\n          parentContainRef = _ref3.parentContainRef,\n          message = _ref3.message,\n          closeDropdown = _ref3.closeDropdown,\n          _ref3$spaceFromTrigge = _ref3.spaceFromTrigger,\n          spaceFromTrigger = _ref3$spaceFromTrigge === void 0 ? {} : _ref3$spaceFromTrigge;\n\n      if (!useReaction || !(parentRef || parentContainRef || message || closeDropdown)) {\n        logger.warning('Channel: Invalid Params in memoizedEmojiListItems');\n        return null;\n      }\n\n      return /*#__PURE__*/React__default.createElement(EmojiListItems, {\n        parentRef: parentRef,\n        parentContainRef: parentContainRef,\n        closeDropdown: closeDropdown,\n        spaceFromTrigger: spaceFromTrigger\n      }, emojiAllList.map(function (emoji) {\n        var reactedReaction = message.reactions.filter(function (reaction) {\n          return reaction.key === emoji.key;\n        })[0];\n        var isReacted = reactedReaction ? !(reactedReaction.userIds.indexOf(userId) < 0) : false;\n        return /*#__PURE__*/React__default.createElement(ReactionButton, {\n          key: emoji.key,\n          width: \"36px\",\n          height: \"36px\",\n          selected: isReacted,\n          onClick: function onClick() {\n            closeDropdown();\n            toggleReaction(message, emoji.key, isReacted);\n          }\n        }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n          url: emoji.url,\n          width: \"28px\",\n          height: \"28px\",\n          defaultComponent: /*#__PURE__*/React__default.createElement(Icon, {\n            width: \"28px\",\n            height: \"28px\",\n            type: IconTypes.QUESTION\n          })\n        }));\n      }));\n    };\n  }, [emojiContainer, toggleReaction]);\n}\n\nfunction useToggleReactionCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel;\n  var logger = _ref2.logger;\n  return useCallback(function (message, key, isReacted) {\n    if (isReacted) {\n      currentGroupChannel.deleteReaction(message, key).then(function (res) {\n        logger.info('Delete reaction success', res);\n      }).catch(function (err) {\n        logger.warning('Delete reaction failed', err);\n      });\n      return;\n    }\n\n    currentGroupChannel.addReaction(message, key).then(function (res) {\n      logger.info('Add reaction success', res);\n    }).catch(function (err) {\n      logger.warning('Add reaction failed', err);\n    });\n  }, [currentGroupChannel]);\n}\n\nfunction useScrollToMessage(_a, _b) {\n  var setIntialTimeStamp = _a.setIntialTimeStamp,\n      setAnimatedMessageId = _a.setAnimatedMessageId,\n      allMessages = _a.allMessages;\n  var logger = _b.logger;\n  return useCallback(function (createdAt, messageId) {\n    var isPresent = allMessages.find(function (m) {\n      return m.messageId === messageId;\n    });\n    setAnimatedMessageId(null);\n    setTimeout(function () {\n      if (isPresent) {\n        logger.info('Channel: scroll to message - message is present');\n        setAnimatedMessageId(messageId);\n      } else {\n        logger.info('Channel: scroll to message - fetching older messages');\n        setIntialTimeStamp(null);\n        setIntialTimeStamp(createdAt);\n        setAnimatedMessageId(messageId);\n      }\n    });\n  }, [setIntialTimeStamp, setAnimatedMessageId, allMessages]);\n}\n\nvar MessageStatusTypes = getOutgoingMessageStates();\n\nfunction MessageStatus(_ref) {\n  var _iconType, _iconColor, _channel$getUnreadMem, _channel$getUndeliver;\n\n  var className = _ref.className,\n      message = _ref.message,\n      channel = _ref.channel;\n\n  var _useContext = useContext(LocalizationContext),\n      dateLocale = _useContext.dateLocale;\n\n  var showMessageStatusIcon = (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel !== null && channel !== void 0 && channel.isSuper) && !(channel !== null && channel !== void 0 && channel.isPublic) && !(channel !== null && channel !== void 0 && channel.isBroadcast);\n  var iconType = (_iconType = {}, _defineProperty(_iconType, MessageStatusTypes.SENT, IconTypes.DONE), _defineProperty(_iconType, MessageStatusTypes.DELIVERED, IconTypes.DONE_ALL), _defineProperty(_iconType, MessageStatusTypes.READ, IconTypes.DONE_ALL), _defineProperty(_iconType, MessageStatusTypes.FAILED, IconTypes.ERROR), _iconType);\n  var iconColor = (_iconColor = {}, _defineProperty(_iconColor, MessageStatusTypes.SENT, IconColors.SENT), _defineProperty(_iconColor, MessageStatusTypes.DELIVERED, IconColors.SENT), _defineProperty(_iconColor, MessageStatusTypes.READ, IconColors.READ), _defineProperty(_iconColor, MessageStatusTypes.FAILED, IconColors.ERROR), _iconColor);\n  var messageStatus = useMemo(function () {\n    return getOutgoingMessageState(channel, message);\n  }, [channel === null || channel === void 0 ? void 0 : (_channel$getUnreadMem = channel.getUnreadMemberCount) === null || _channel$getUnreadMem === void 0 ? void 0 : _channel$getUnreadMem.call(channel, message), channel === null || channel === void 0 ? void 0 : (_channel$getUndeliver = channel.getUndeliveredMemberCount) === null || _channel$getUndeliver === void 0 ? void 0 : _channel$getUndeliver.call(channel, message)]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-message-status']).join(' ')\n  }, showMessageStatusIcon && (messageStatus === MessageStatusTypes.PENDING ? /*#__PURE__*/React__default.createElement(Loader, {\n    className: \"sendbird-message-status__icon\",\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-message-status__icon\",\n    type: iconType[messageStatus] || IconTypes.ERROR,\n    fillColor: iconColor[messageStatus],\n    width: \"16px\",\n    height: \"16px\"\n  })), isSentStatus(messageStatus) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-status__text\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message === null || message === void 0 ? void 0 : message.createdAt, 'p', {\n    locale: dateLocale\n  })));\n}\n\nMessageStatus.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  message: PropTypes.shape({\n    createdAt: PropTypes.number,\n    sender: PropTypes.shape({\n      friendName: PropTypes.string,\n      nickname: PropTypes.string,\n      userId: PropTypes.string,\n      profileUrl: PropTypes.string\n    }),\n    sendingStatus: PropTypes.string\n  }),\n  channel: PropTypes.shape({\n    isGroupChannel: PropTypes.func,\n    isSuper: PropTypes.bool,\n    isBroadcast: PropTypes.bool,\n    isPublic: PropTypes.bool,\n    getUnreadMemberCount: PropTypes.func,\n    getUndeliveredMemberCount: PropTypes.func\n  })\n};\nMessageStatus.defaultProps = {\n  className: '',\n  message: null,\n  channel: null\n};\n\nfunction MessageItemMenu(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      channel = _a.channel,\n      _c = _a.isByMe,\n      isByMe = _c === void 0 ? false : _c,\n      _d = _a.disabled,\n      disabled = _d === void 0 ? false : _d,\n      replyType = _a.replyType,\n      showEdit = _a.showEdit,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage,\n      setQuoteMessage = _a.setQuoteMessage,\n      setSupposedHover = _a.setSupposedHover;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var triggerRef = useRef(null);\n  var containerRef = useRef(null);\n  var showMenuItemCopy = isUserMessage(message);\n  var showMenuItemReply = replyType === 'QUOTE_REPLY' && !isFailedMessage(channel, message) && !isPendingMessage(channel, message);\n  var showMenuItemEdit = isUserMessage(message) && isSentMessage(channel, message) && isByMe;\n  var showMenuItemResend = isFailedMessage(channel, message) && ((_b = message === null || message === void 0 ? void 0 : message.isResendable) === null || _b === void 0 ? void 0 : _b.call(message)) && isByMe;\n  var showMenuItemDelete = !isPendingMessage(channel, message) && isByMe;\n\n  if (!(showMenuItemCopy || showMenuItemReply || showMenuItemEdit || showMenuItemResend || showMenuItemDelete)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-message-item-menu']),\n    ref: containerRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-message-item-menu__trigger\",\n        ref: triggerRef,\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n          setSupposedHover(true);\n        },\n        onBlur: function onBlur() {\n          setSupposedHover(false);\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        className: \"sendbird-message-item-menu__trigger__icon\",\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(close) {\n      var _a;\n\n      var closeDropdown = function closeDropdown() {\n        close();\n        setSupposedHover(false);\n      };\n\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        className: \"sendbird-message-item-menu__list\",\n        parentRef: triggerRef,\n        parentContainRef: containerRef,\n        closeDropdown: closeDropdown,\n        openLeft: isByMe\n      }, showMenuItemCopy && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-copy\",\n        onClick: function onClick() {\n          var _a;\n\n          copyToClipboard((_a = message) === null || _a === void 0 ? void 0 : _a.message);\n          closeDropdown();\n        }\n      }, stringSet.MESSAGE_MENU__COPY), showMenuItemReply && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-reply\",\n        onClick: function onClick() {\n          setQuoteMessage(message);\n          closeDropdown();\n        },\n        disable: (message === null || message === void 0 ? void 0 : message.parentMessageId) > 0\n      }, stringSet.MESSAGE_MENU__REPLY), showMenuItemEdit && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-edit\",\n        onClick: function onClick() {\n          if (!disabled) {\n            showEdit(true);\n            closeDropdown();\n          }\n        }\n      }, stringSet.MESSAGE_MENU__EDIT), showMenuItemResend && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-resend\",\n        onClick: function onClick() {\n          if (!disabled) {\n            resendMessage(message);\n            closeDropdown();\n          }\n        }\n      }, stringSet.MESSAGE_MENU__RESEND), showMenuItemDelete && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-delete\",\n        onClick: function onClick() {\n          if (!disabled) {\n            showRemove(true);\n            closeDropdown();\n          }\n        },\n        disable: ((_a = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) > 0\n      }, stringSet.MESSAGE_MENU__DELETE));\n    }\n  }));\n}\n\nfunction MessageItemReactionMenu(_a) {\n  var className = _a.className,\n      message = _a.message,\n      channel = _a.channel,\n      userId = _a.userId,\n      _b = _a.spaceFromTrigger,\n      spaceFromTrigger = _b === void 0 ? {} : _b,\n      emojiContainer = _a.emojiContainer,\n      toggleReaction = _a.toggleReaction,\n      setSupposedHover = _a.setSupposedHover;\n  var triggerRef = useRef(null);\n  var containerRef = useRef(null);\n\n  if (isPendingMessage(channel, message) || isFailedMessage(channel, message)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-message-item-reaction-menu']),\n    ref: containerRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-message-item-reaction-menu__trigger\",\n        ref: triggerRef,\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n          setSupposedHover(true);\n        },\n        onBlur: function onBlur() {\n          setSupposedHover(false);\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        className: \"sendbird-message-item-reaction-menu__trigger__icon\",\n        type: IconTypes.EMOJI_MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(close) {\n      var closeDropdown = function closeDropdown() {\n        close();\n        setSupposedHover(false);\n      };\n\n      return /*#__PURE__*/React__default.createElement(EmojiListItems, {\n        parentRef: triggerRef,\n        parentContainRef: containerRef,\n        closeDropdown: closeDropdown,\n        spaceFromTrigger: spaceFromTrigger\n      }, getEmojiListAll(emojiContainer).map(function (emoji) {\n        var _a, _b, _c;\n\n        var isReacted = (_c = (_b = (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.filter(function (reaction) {\n          return reaction.key === emoji.key;\n        })[0]) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function (reactorId) {\n          return reactorId === userId;\n        });\n        return /*#__PURE__*/React__default.createElement(ReactionButton, {\n          key: emoji.key,\n          width: \"36px\",\n          height: \"36px\",\n          selected: isReacted,\n          onClick: function onClick() {\n            closeDropdown();\n            toggleReaction(message, emoji.key, isReacted);\n          }\n        }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n          url: emoji.url,\n          width: \"28px\",\n          height: \"28px\",\n          placeHolder: function placeHolder(style) {\n            return /*#__PURE__*/React__default.createElement(\"div\", {\n              style: style\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              type: IconTypes.QUESTION,\n              fillColor: IconColors.ON_BACKGROUND_3,\n              width: \"28px\",\n              height: \"28px\"\n            }));\n          }\n        }));\n      }));\n    }\n  }));\n}\n\nfunction Tooltip(_ref) {\n  var className = _ref.className,\n      children = _ref.children;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-tooltip']).join(' ')\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-tooltip__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONCONTENT_1\n  }, children));\n}\n\nTooltip.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.string), PropTypes.string])\n};\nTooltip.defaultProps = {\n  className: '',\n  children: ''\n};\nvar SPACE_FROM_TRIGGER = 8;\n\nfunction TooltipWrapper(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      hoverTooltip = _ref.hoverTooltip;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showHoverTooltip = _useState2[0],\n      setShowHoverTooltip = _useState2[1];\n\n  var childrenRef = useRef(null);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-tooltip-wrapper']).join(' '),\n    onMouseOver: function onMouseOver() {\n      setShowHoverTooltip(true);\n    },\n    onFocus: function onFocus() {\n      setShowHoverTooltip(true);\n    },\n    onMouseOut: function onMouseOut() {\n      setShowHoverTooltip(false);\n    },\n    onBlur: function onBlur() {\n      setShowHoverTooltip(false);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-tooltip-wrapper__children\",\n    ref: childrenRef\n  }, children), showHoverTooltip && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-tooltip-wrapper__hover-tooltip\",\n    style: {\n      bottom: \"calc(100% + \".concat(SPACE_FROM_TRIGGER, \"px)\")\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-tooltip-wrapper__hover-tooltip__inner\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-tooltip-wrapper__hover-tooltip__inner__tooltip-container\",\n    style: {\n      left: childrenRef.current && \"calc(\".concat(childrenRef.current.offsetWidth / 2, \"px - 50%)\")\n    }\n  }, hoverTooltip))));\n}\n\nTooltipWrapper.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  children: PropTypes.element.isRequired,\n  hoverTooltip: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\nTooltipWrapper.defaultProps = {\n  className: ''\n};\nvar ReactionBadge = /*#__PURE__*/React__default.forwardRef(function (props, ref) {\n  var className = props.className,\n      children = props.children,\n      count = props.count,\n      selected = props.selected,\n      isAdd = props.isAdd,\n      onClick = props.onClick;\n\n  var getClassNameTail = function getClassNameTail() {\n    if (selected && !isAdd) {\n      return '--selected';\n    }\n\n    if (isAdd) {\n      return '--is-add';\n    }\n\n    return '';\n  };\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), [\"sendbird-reaction-badge\".concat(getClassNameTail())]).join(' '),\n    role: \"button\",\n    ref: ref,\n    onClick: onClick,\n    onKeyDown: onClick,\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-reaction-badge__inner\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-reaction-badge__inner__icon\"\n  }, children), /*#__PURE__*/React__default.createElement(Label, {\n    className: children && count && 'sendbird-reaction-badge__inner__count',\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_1\n  }, count)));\n});\nReactionBadge.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  children: PropTypes.element.isRequired,\n  count: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  selected: PropTypes.bool,\n  isAdd: PropTypes.bool,\n  onClick: PropTypes.func\n};\nReactionBadge.defaultProps = {\n  className: '',\n  count: '',\n  selected: false,\n  isAdd: false,\n  onClick: function onClick() {}\n};\n\nfunction EmojiReactions2(_a) {\n  var _b, _c;\n\n  var className = _a.className,\n      userId = _a.userId,\n      message = _a.message,\n      emojiContainer = _a.emojiContainer,\n      memberNicknamesMap = _a.memberNicknamesMap,\n      _d = _a.spaceFromTrigger,\n      spaceFromTrigger = _d === void 0 ? {} : _d,\n      _e = _a.isByMe,\n      isByMe = _e === void 0 ? false : _e,\n      toggleReaction = _a.toggleReaction;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var emojisMap = getEmojiMapAll(emojiContainer);\n  var addReactionRef = useRef(null);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-emoji-reactions', isByMe ? 'outgoing' : 'incoming'])\n  }, ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 && message.reactions.map(function (reaction) {\n    var _a, _b;\n\n    var reactedByMe = isReactedBy(userId, reaction);\n    return /*#__PURE__*/React__default.createElement(TooltipWrapper, {\n      className: \"sendbird-emoji-reactions__reaction-badge\",\n      key: reaction === null || reaction === void 0 ? void 0 : reaction.key,\n      hoverTooltip: ((_a = reaction === null || reaction === void 0 ? void 0 : reaction.userIds) === null || _a === void 0 ? void 0 : _a.length) > 0 && /*#__PURE__*/React__default.createElement(Tooltip, null, getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet))\n    }, /*#__PURE__*/React__default.createElement(ReactionBadge, {\n      count: reaction.userIds.length,\n      selected: reactedByMe,\n      onClick: function onClick() {\n        return toggleReaction(message, reaction.key, reactedByMe);\n      }\n    }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n      circle: true,\n      url: ((_b = emojisMap.get(reaction === null || reaction === void 0 ? void 0 : reaction.key)) === null || _b === void 0 ? void 0 : _b.url) || '',\n      width: \"20px\",\n      height: \"20px\",\n      defaultComponent: /*#__PURE__*/React__default.createElement(Icon, {\n        width: \"20px\",\n        height: \"20px\",\n        type: IconTypes.QUESTION\n      })\n    })));\n  }), ((_c = message === null || message === void 0 ? void 0 : message.reactions) === null || _c === void 0 ? void 0 : _c.length) < emojisMap.size && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(ReactionBadge, {\n        className: \"sendbird-emoji-reactions__add-reaction-badge\",\n        ref: addReactionRef,\n        isAdd: true,\n        onClick: toggleDropdown\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.EMOJI_MORE,\n        fillColor: IconColors.ON_BACKGROUND_3,\n        width: \"20px\",\n        height: \"20px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(EmojiListItems, {\n        parentRef: addReactionRef,\n        parentContainRef: addReactionRef,\n        closeDropdown: closeDropdown,\n        spacefromTrigger: spaceFromTrigger\n      }, getEmojiListAll(emojiContainer).map(function (emoji) {\n        var _a, _b, _c;\n\n        var isReacted = (_c = (_b = (_a = message === null || message === void 0 ? void 0 : message.reactions) === null || _a === void 0 ? void 0 : _a.filter(function (reaction) {\n          return reaction.key === emoji.key;\n        })[0]) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function (reactorId) {\n          return reactorId === userId;\n        });\n        return /*#__PURE__*/React__default.createElement(ReactionButton, {\n          key: emoji.key,\n          width: \"36px\",\n          height: \"36px\",\n          selected: isReacted,\n          onClick: function onClick() {\n            closeDropdown();\n            toggleReaction(message, emoji.key, isReacted);\n          }\n        }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n          url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || '',\n          width: \"28px\",\n          height: \"28px\",\n          placeHolder: function placeHolder(style) {\n            return /*#__PURE__*/React__default.createElement(\"div\", {\n              style: style\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              type: IconTypes.QUESTION,\n              fillColor: IconColors.ON_BACKGROUND_3,\n              width: \"28px\",\n              height: \"28px\"\n            }));\n          }\n        }));\n      }));\n    }\n  }));\n}\n\nfunction AdminMessage(_ref) {\n  var className = _ref.className,\n      message = _ref.message;\n\n  if (!(message.isAdminMessage || message.messageType) || !message.isAdminMessage() || message.messageType !== 'admin') {\n    return null;\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-admin-message']).join(' ')\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-admin-message__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, message.message));\n}\n\nAdminMessage.propTypes = {\n  message: PropTypes.shape({\n    message: PropTypes.string,\n    messageType: PropTypes.string,\n    isAdminMessage: PropTypes.func\n  }),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n};\nAdminMessage.defaultProps = {\n  message: {},\n  className: ''\n};\n\nfunction TextMessageItemBody(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      _c = _a.isByMe,\n      isByMe = _c === void 0 ? false : _c,\n      _d = _a.mouseHover,\n      mouseHover = _d === void 0 ? false : _d;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }, /*#__PURE__*/React__default.createElement(\"p\", {\n    className: getClassName([className, 'sendbird-text-message-item-body', isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? 'reactions' : ''])\n  }, message === null || message === void 0 ? void 0 : message.message, isEditedMessage(message) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-text-message-item-body__message edited\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2\n  }, \" \" + stringSet.MESSAGE_EDITED + \" \")));\n}\n\nfunction FileMessageItemBody(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      _c = _a.isByMe,\n      isByMe = _c === void 0 ? false : _c,\n      _d = _a.mouseHover,\n      mouseHover = _d === void 0 ? false : _d;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-file-message-item-body', isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? 'reactions' : ''])\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-file-message-item-body__file-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: 'sendbird-file-message-item-body__file-icon__icon',\n    type: {\n      IMAGE: IconTypes.PHOTO,\n      VIDEO: IconTypes.PLAY,\n      AUDIO: IconTypes.FILE_AUDIO,\n      GIF: IconTypes.GIF,\n      OTHERS: IconTypes.FILE_DOCUMENT\n    }[getUIKitFileType(message === null || message === void 0 ? void 0 : message.type)],\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-file-message-item-body__file-name\",\n    onClick: function onClick() {\n      window.open(message === null || message === void 0 ? void 0 : message.url);\n    },\n    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-file-message-item-body__file-name__text\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }, truncateString((message === null || message === void 0 ? void 0 : message.name) || (message === null || message === void 0 ? void 0 : message.url)))));\n}\n\nfunction ThumbnailMessageItemBody(_a) {\n  var _b, _c;\n\n  var className = _a.className,\n      message = _a.message,\n      _d = _a.isByMe,\n      isByMe = _d === void 0 ? false : _d,\n      _e = _a.mouseHover,\n      mouseHover = _e === void 0 ? false : _e,\n      showFileViewer = _a.showFileViewer;\n  var _f = message.thumbnails,\n      thumbnails = _f === void 0 ? [] : _f;\n  var thumbnailUrl = thumbnails.length > 0 ? (_b = thumbnails[0]) === null || _b === void 0 ? void 0 : _b.url : '';\n\n  var _g = useState(false),\n      imageRendered = _g[0],\n      setImageRendered = _g[1];\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-thumbnail-message-item-body', isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', ((_c = message === null || message === void 0 ? void 0 : message.reactions) === null || _c === void 0 ? void 0 : _c.length) > 0 ? 'reactions' : '']),\n    onClick: function onClick() {\n      return showFileViewer(true);\n    }\n  }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-thumbnail-message-item-body__thumbnail\",\n    url: thumbnailUrl || (message === null || message === void 0 ? void 0 : message.url),\n    alt: message === null || message === void 0 ? void 0 : message.type,\n    width: \"360px\",\n    height: \"270px\",\n    onLoad: function onLoad() {\n      setImageRendered(true);\n    },\n    placeHolder: function placeHolder(style) {\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-thumbnail-message-item-body__placeholder\",\n        style: style\n      }, /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-thumbnail-message-item-body__placeholder__icon\"\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.PHOTO,\n        fillColor: IconColors.ON_BACKGROUND_2,\n        width: \"34px\",\n        height: \"34px\"\n      })));\n    }\n  }), isVideoMessage(message) && !thumbnailUrl && !imageRendered && /*#__PURE__*/React__default.createElement(\"video\", {\n    className: \"sendbird-thumbnail-message-item-body__video\"\n  }, /*#__PURE__*/React__default.createElement(\"source\", {\n    src: message === null || message === void 0 ? void 0 : message.url,\n    type: message === null || message === void 0 ? void 0 : message.type\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-thumbnail-message-item-body__image-cover\"\n  }), (isVideoMessage(message) || isGifMessage(message)) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-thumbnail-message-item-body__icon-wrapper\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-thumbnail-message-item-body__icon-wrapper__icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF,\n    fillColor: IconColors.GRAY,\n    width: \"34px\",\n    height: \"34px\"\n  }))));\n}\n\nfunction OGMessageItemBody(_a) {\n  var _b, _c, _d, _e, _f, _g, _h, _j;\n\n  var className = _a.className,\n      message = _a.message,\n      _k = _a.isByMe,\n      isByMe = _k === void 0 ? false : _k,\n      _l = _a.mouseHover,\n      mouseHover = _l === void 0 ? false : _l;\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var openOGUrl = function openOGUrl() {\n    var _a, _b;\n\n    if ((_a = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _a === void 0 ? void 0 : _a.url) window.open((_b = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _b === void 0 ? void 0 : _b.url);\n  };\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-og-message-item-body', isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? 'reactions' : ''])\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    key: uuidv4(),\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }, /*#__PURE__*/React__default.createElement(\"p\", {\n    className: \"sendbird-og-message-item-body__text-bubble\"\n  }, message === null || message === void 0 ? void 0 : message.message.split(' ').map(function (word) {\n    return isUrl(word) ? /*#__PURE__*/React__default.createElement(LinkLabel, {\n      className: \"sendbird-og-message-item-body__text-bubble__message\",\n      key: uuidv4(),\n      src: word,\n      type: LabelTypography.BODY_1,\n      color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n    }, word) : word + \" \";\n  }), isEditedMessage(message) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-og-message-item-body__text-bubble__message\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2\n  }, \" \" + stringSet.MESSAGE_EDITED + \" \"))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-og-message-item-body__og-thumbnail\",\n    onClick: openOGUrl\n  }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-og-message-item-body__og-thumbnail__image\",\n    url: ((_d = (_c = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _c === void 0 ? void 0 : _c.defaultImage) === null || _d === void 0 ? void 0 : _d.url) || '',\n    alt: (_f = (_e = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _e === void 0 ? void 0 : _e.defaultImage) === null || _f === void 0 ? void 0 : _f.alt // TODO: Change fixing width and height lengths\n    ,\n    width: \"320px\",\n    height: \"180px\",\n    defaultComponent: /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-og-message-item-body__og-thumbnail__place-holder\"\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      className: \"sendbird-og-message-item-body__og-thumbnail__place-holder__icon\",\n      type: IconTypes.THUMBNAIL_NONE,\n      width: \"56px\",\n      height: \"56px\"\n    }))\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-og-message-item-body__description\",\n    onClick: openOGUrl\n  }, ((_g = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _g === void 0 ? void 0 : _g.title) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-og-message-item-body__description__title\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, message.ogMetaData.title), ((_h = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _h === void 0 ? void 0 : _h.description) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-og-message-item-body__description__description\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, message.ogMetaData.description), ((_j = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _j === void 0 ? void 0 : _j.url) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-og-message-item-body__description__url\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, message.ogMetaData.url)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-og-message-item-body__cover\"\n  }));\n}\n\nfunction UnknownMessageItemBody(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      _c = _a.isByMe,\n      isByMe = _c === void 0 ? false : _c,\n      _d = _a.mouseHover,\n      mouseHover = _d === void 0 ? false : _d;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-unknown-message-item-body', isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? 'reactions' : ''])\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-unknown-message-item-body__header\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }, stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-unknown-message-item-body__description\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2\n  }, stringSet.UNKNOWN__CANNOT_READ_MESSAGE));\n}\n\nfunction QuoteMessage(_a) {\n  var _b;\n\n  var _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n\n  var message = _a.message,\n      _p = _a.userId,\n      userId = _p === void 0 ? '' : _p,\n      _q = _a.isByMe,\n      isByMe = _q === void 0 ? false : _q,\n      className = _a.className,\n      _onClick = _a.onClick;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var parentMessage = message.parentMessage;\n  var parentMessageSender = (_c = parentMessage) === null || _c === void 0 ? void 0 : _c.sender;\n  var parentMessageSenderNickname = userId === (parentMessageSender === null || parentMessageSender === void 0 ? void 0 : parentMessageSender.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : parentMessageSender === null || parentMessageSender === void 0 ? void 0 : parentMessageSender.nickname;\n  var parentMessageUrl = ((_d = parentMessage) === null || _d === void 0 ? void 0 : _d.url) || '';\n  var parentMessageType = (_e = parentMessage) === null || _e === void 0 ? void 0 : _e.type;\n  var currentMessageSenderNickname = userId === ((_f = message === null || message === void 0 ? void 0 : message.sender) === null || _f === void 0 ? void 0 : _f.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : (_g = message === null || message === void 0 ? void 0 : message.sender) === null || _g === void 0 ? void 0 : _g.nickname;\n\n  var _r = useState(false),\n      isThumbnailLoaded = _r[0],\n      setThumbnailLoaded = _r[1];\n\n  var uikitFileTypes = getUIKitFileTypes();\n  var splitFileName = ((_h = parentMessage) === null || _h === void 0 ? void 0 : _h.name) ? parentMessage.name.split('/') : parentMessageUrl.split('/');\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-quote-message', isByMe ? 'outgoing' : 'incoming']),\n    key: parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId,\n    onClick: function onClick() {\n      if (_onClick) _onClick();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-to\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-quote-message__replied-to__icon\",\n    type: IconTypes.REPLY,\n    fillColor: IconColors.ON_BACKGROUND_3,\n    width: \"12px\",\n    height: \"12px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-quote-message__replied-to__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, currentMessageSenderNickname + \" \" + stringSet.QUOTED_MESSAGE__REPLIED_TO + \" \" + parentMessageSenderNickname)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message\"\n  }, isUserMessage(parentMessage) && ((_k = (_j = parentMessage) === null || _j === void 0 ? void 0 : _j.message) === null || _k === void 0 ? void 0 : _k.length) > 0 && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__text-message\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-quote-message__replied-message__text-message__word\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, (_l = parentMessage) === null || _l === void 0 ? void 0 : _l.message)), isThumbnailMessage(parentMessage) && parentMessageUrl && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message\"\n  }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__image\",\n    url: parentMessageUrl,\n    alt: parentMessageType,\n    width: \"144px\",\n    height: \"108px\",\n    onLoad: function onLoad() {\n      return setThumbnailLoaded(true);\n    },\n    defaultComponent: /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-quote-message__replied-message__thumbnail-message__placeholder\"\n    }, /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-quote-message__replied-message__thumbnail-message__placeholder__icon\"\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: isVideo(parentMessageType) ? IconTypes.PLAY : IconTypes.PHOTO,\n      fillColor: IconColors.ON_BACKGROUND_2,\n      width: \"22px\",\n      height: \"22px\"\n    })))\n  }), isVideo(parentMessageType) && !(((_o = (_m = parentMessage) === null || _m === void 0 ? void 0 : _m.thumbnails) === null || _o === void 0 ? void 0 : _o.length) > 0) && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"video\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__video\"\n  }, /*#__PURE__*/React__default.createElement(\"source\", {\n    src: parentMessageUrl,\n    type: parentMessageType\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__cover\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__cover__icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.PLAY,\n    fillColor: IconColors.GRAY,\n    width: \"14px\",\n    height: \"14px\"\n  })))), isThumbnailLoaded && isGif(parentMessageType) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__cover\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__thumbnail-message__cover__icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.GIF,\n    fillColor: IconColors.GRAY,\n    width: \"14px\",\n    height: \"14px\"\n  })))), isFileMessage(parentMessage) && !isSupportedFileView(parentMessage.type) && parentMessageUrl && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote-message__replied-message__file-message\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-quote-message__replied-message__file-message__type-icon\",\n    type: (_b = {}, _b[uikitFileTypes.IMAGE] = IconTypes.PHOTO, _b[uikitFileTypes.VIDEO] = IconTypes.PLAY, _b[uikitFileTypes.AUDIO] = IconTypes.FILE_AUDIO, _b[uikitFileTypes.GIF] = IconTypes.GIF, _b[uikitFileTypes.OTHERS] = IconTypes.FILE_DOCUMENT, _b)[getUIKitFileType(parentMessageType)],\n    fillColor: IconColors.ON_BACKGROUND_3,\n    width: \"16px\",\n    height: \"16px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-quote-message__replied-message__file-message__file-name\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, truncateString(splitFileName[splitFileName.length - 1])))));\n}\n\nfunction MessageContent(_a) {\n  var _b, _c, _d, _e;\n\n  var className = _a.className,\n      userId = _a.userId,\n      channel = _a.channel,\n      message = _a.message,\n      _f = _a.disabled,\n      disabled = _f === void 0 ? false : _f,\n      _g = _a.chainTop,\n      chainTop = _g === void 0 ? false : _g,\n      _h = _a.chainBottom,\n      chainBottom = _h === void 0 ? false : _h,\n      _j = _a.useReaction,\n      useReaction = _j === void 0 ? false : _j,\n      replyType = _a.replyType,\n      nicknamesMap = _a.nicknamesMap,\n      emojiContainer = _a.emojiContainer,\n      scrollToMessage = _a.scrollToMessage,\n      showEdit = _a.showEdit,\n      showRemove = _a.showRemove,\n      showFileViewer = _a.showFileViewer,\n      resendMessage = _a.resendMessage,\n      toggleReaction = _a.toggleReaction,\n      setQuoteMessage = _a.setQuoteMessage;\n  var messageTypes = getUIKitMessageTypes();\n\n  var _k = useContext(UserProfileContext),\n      disableUserProfile = _k.disableUserProfile,\n      renderUserProfile = _k.renderUserProfile;\n\n  var dateLocale = useContext(LocalizationContext).dateLocale;\n  var avatarRef = useRef(null);\n\n  var _l = useState(false),\n      mouseHover = _l[0],\n      setMouseHover = _l[1];\n\n  var _m = useState(false),\n      supposedHover = _m[0],\n      setSupposedHover = _m[1];\n\n  var isByMe = userId === ((_c = (_b = message) === null || _b === void 0 ? void 0 : _b.sender) === null || _c === void 0 ? void 0 : _c.userId) || message.sendingStatus === 'pending' || message.sendingStatus === 'failed';\n  var isByMeClassName = isByMe ? 'outgoing' : 'incoming';\n  var chainTopClassName = chainTop ? 'chain-top' : '';\n  var useReactionClassName = useReaction ? 'use-reactions' : '';\n  var supposedHoverClassName = supposedHover ? 'supposed-hover' : '';\n  var useReplying = !!(replyType === 'QUOTE_REPLY' && (message === null || message === void 0 ? void 0 : message.parentMessageId) && (message === null || message === void 0 ? void 0 : message.parentMessage));\n  var useReplyingClassName = useReplying ? 'use-quote' : '';\n\n  if (((_d = message === null || message === void 0 ? void 0 : message.isAdminMessage) === null || _d === void 0 ? void 0 : _d.call(message)) || (message === null || message === void 0 ? void 0 : message.messageType) === 'admin') {\n    return /*#__PURE__*/React__default.createElement(AdminMessage, {\n      message: message\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-message-content', isByMeClassName]),\n    onMouseOver: function onMouseOver() {\n      return setMouseHover(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setMouseHover(false);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__left', useReactionClassName, isByMeClassName, useReplyingClassName])\n  }, !isByMe && !chainBottom &&\n  /*#__PURE__*/\n\n  /** user profile */\n  React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      var _a;\n\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-message-content__left__avatar\",\n        src: ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.profileUrl) || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) toggleDropdown();\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems\n      /**\n      * parentRef: For catching location(x, y) of MenuItems\n      * parentContainRef: For toggling more options(menus & reactions)\n      */\n      , {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: message === null || message === void 0 ? void 0 : message.sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: message.sender,\n        onSuccess: closeDropdown\n      }));\n    }\n  }), isByMe && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content-menu', useReactionClassName, supposedHoverClassName, isByMeClassName])\n  }, /*#__PURE__*/React__default.createElement(MessageItemMenu, {\n    className: \"sendbird-message-content-menu__normal-menu\",\n    channel: channel,\n    message: message,\n    isByMe: isByMe,\n    replyType: replyType,\n    disabled: disabled,\n    showEdit: showEdit,\n    showRemove: showRemove,\n    resendMessage: resendMessage,\n    setQuoteMessage: setQuoteMessage,\n    setSupposedHover: setSupposedHover\n  }), useReaction && /*#__PURE__*/React__default.createElement(MessageItemReactionMenu, {\n    className: \"sendbird-message-content-menu__reaction-menu\",\n    message: message,\n    channel: channel,\n    userId: userId,\n    spaceFromTrigger: {},\n    emojiContainer: emojiContainer,\n    toggleReaction: toggleReaction,\n    setSupposedHover: setSupposedHover\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-content__middle\"\n  }, !isByMe && !chainTop && !useReplying && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-content__middle__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, getSenderName(message)), useReplying ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__middle__quote-message', isByMe ? 'outgoing' : 'incoming', useReplyingClassName])\n  }, /*#__PURE__*/React__default.createElement(QuoteMessage, {\n    message: message,\n    userId: userId,\n    isByMe: isByMe,\n    onClick: function onClick() {\n      var _a;\n\n      if (((_a = message === null || message === void 0 ? void 0 : message.parentMessage) === null || _a === void 0 ? void 0 : _a.createdAt) && (message === null || message === void 0 ? void 0 : message.parentMessageId)) {\n        scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n      }\n    }\n  })) : null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__middle__body-container'])\n  }, isByMe && !chainBottom && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__middle__body-container__created-at', 'left', supposedHoverClassName])\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-content__middle__body-container__created-at__component-container\"\n  }, /*#__PURE__*/React__default.createElement(MessageStatus, {\n    message: message,\n    channel: channel\n  }))), isTextMessage(message) && /*#__PURE__*/React__default.createElement(TextMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover\n  }), isOGMessage(message) && /*#__PURE__*/React__default.createElement(OGMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover\n  }), getUIKitMessageType(message) === messageTypes.FILE && /*#__PURE__*/React__default.createElement(FileMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover\n  }), isThumbnailMessage(message) && /*#__PURE__*/React__default.createElement(ThumbnailMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover,\n    showFileViewer: showFileViewer\n  }), getUIKitMessageType(message) === messageTypes.UNKNOWN && /*#__PURE__*/React__default.createElement(UnknownMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover\n  }), useReaction && ((_e = message === null || message === void 0 ? void 0 : message.reactions) === null || _e === void 0 ? void 0 : _e.length) > 0 && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content-reactions', !isByMe || isThumbnailMessage(message) || isOGMessage(message) ? '' : 'primary', mouseHover ? 'mouse-hover' : ''])\n  }, /*#__PURE__*/React__default.createElement(EmojiReactions2, {\n    userId: userId,\n    message: message,\n    isByMe: isByMe,\n    emojiContainer: emojiContainer,\n    memberNicknamesMap: nicknamesMap,\n    toggleReaction: toggleReaction\n  })), !isByMe && !chainBottom && /*#__PURE__*/React__default.createElement(Label, {\n    className: getClassName(['sendbird-message-content__middle__body-container__created-at', 'right', supposedHoverClassName]),\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  })))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__right', chainTopClassName, useReactionClassName, useReplyingClassName])\n  }, !isByMe && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content-menu', chainTopClassName, supposedHoverClassName, isByMeClassName])\n  }, useReaction && /*#__PURE__*/React__default.createElement(MessageItemReactionMenu, {\n    className: \"sendbird-message-content-menu__reaction-menu\",\n    message: message,\n    channel: channel,\n    userId: userId,\n    spaceFromTrigger: {},\n    emojiContainer: emojiContainer,\n    toggleReaction: toggleReaction,\n    setSupposedHover: setSupposedHover\n  }), /*#__PURE__*/React__default.createElement(MessageItemMenu, {\n    className: \"sendbird-message-content-menu__normal-menu\",\n    channel: channel,\n    message: message,\n    isByMe: isByMe,\n    replyType: replyType,\n    disabled: disabled,\n    showEdit: showEdit,\n    showRemove: showRemove,\n    resendMessage: resendMessage,\n    setQuoteMessage: setQuoteMessage,\n    setSupposedHover: setSupposedHover\n  }))));\n}\n\nvar RemoveMessage = function RemoveMessage(props) {\n  var _message$threadInfo;\n\n  var onCloseModal = props.onCloseModal,\n      onDeleteMessage = props.onDeleteMessage,\n      message = props.message;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    type: ButtonTypes.DANGER,\n    disabled: (message === null || message === void 0 ? void 0 : (_message$threadInfo = message.threadInfo) === null || _message$threadInfo === void 0 ? void 0 : _message$threadInfo.replyCount) > 0,\n    onCancel: onCloseModal,\n    onSubmit: onDeleteMessage,\n    submitText: \"Delete\",\n    titleText: stringSet.MODAL__DELETE_MESSAGE__TITLE\n  });\n};\n\nRemoveMessage.propTypes = {\n  onCloseModal: PropTypes.func.isRequired,\n  onDeleteMessage: PropTypes.func.isRequired,\n  message: PropTypes.shape({\n    threadInfo: PropTypes.shape({\n      replyCount: PropTypes.number\n    })\n  }).isRequired\n};\n\nfunction MessageHoc(_ref) {\n  var _message$reactions;\n\n  var message = _ref.message,\n      userId = _ref.userId,\n      disabled = _ref.disabled,\n      editDisabled = _ref.editDisabled,\n      hasSeparator = _ref.hasSeparator,\n      deleteMessage = _ref.deleteMessage,\n      updateMessage = _ref.updateMessage,\n      scrollToMessage = _ref.scrollToMessage,\n      resendMessage = _ref.resendMessage,\n      useReaction = _ref.useReaction,\n      replyType = _ref.replyType,\n      chainTop = _ref.chainTop,\n      chainBottom = _ref.chainBottom,\n      membersMap = _ref.membersMap,\n      emojiContainer = _ref.emojiContainer,\n      animatedMessageId = _ref.animatedMessageId,\n      highLightedMessageId = _ref.highLightedMessageId,\n      toggleReaction = _ref.toggleReaction,\n      quoteMessage = _ref.quoteMessage,\n      setQuoteMessage = _ref.setQuoteMessage,\n      renderCustomMessage = _ref.renderCustomMessage,\n      currentGroupChannel = _ref.currentGroupChannel,\n      handleScroll = _ref.handleScroll;\n  var _message$sender = message.sender,\n      sender = _message$sender === void 0 ? {} : _message$sender;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showEdit = _useState2[0],\n      setShowEdit = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showRemove = _useState4[0],\n      setShowRemove = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showFileViewer = _useState6[0],\n      setShowFileViewer = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isAnimated = _useState8[0],\n      setIsAnimated = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isHighlighted = _useState10[0],\n      setIsHighlighted = _useState10[1];\n\n  var editMessageInputRef = useRef(null);\n  var useMessageScrollRef = useRef(null);\n\n  var _useContext = useContext(LocalizationContext),\n      dateLocale = _useContext.dateLocale;\n\n  useLayoutEffect(function () {\n    handleScroll();\n  }, [showEdit, message === null || message === void 0 ? void 0 : (_message$reactions = message.reactions) === null || _message$reactions === void 0 ? void 0 : _message$reactions.length]);\n  useLayoutEffect(function () {\n    if (highLightedMessageId === message.messageId) {\n      if (useMessageScrollRef && useMessageScrollRef.current) {\n        useMessageScrollRef.current.scrollIntoView({\n          block: 'center',\n          inline: 'center'\n        });\n        setIsAnimated(false);\n        setTimeout(function () {\n          setIsHighlighted(true);\n        }, 500);\n      }\n    } else {\n      setIsHighlighted(false);\n    }\n  }, [highLightedMessageId, useMessageScrollRef.current, message.messageId]);\n  useLayoutEffect(function () {\n    if (animatedMessageId === message.messageId) {\n      if (useMessageScrollRef && useMessageScrollRef.current) {\n        useMessageScrollRef.current.scrollIntoView({\n          block: 'center',\n          inline: 'center'\n        });\n        setIsHighlighted(false);\n        setTimeout(function () {\n          setIsAnimated(true);\n        }, 500);\n      }\n    } else {\n      setIsAnimated(false);\n    }\n  }, [animatedMessageId, useMessageScrollRef.current, message.messageId]);\n  var RenderedMessage = useMemo(function () {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, currentGroupChannel, chainTop, chainBottom); // TODO: Let's change this to object type on next major version up\n      // and add params 'hasSeparator' and 'menuDisabled', scrollToMessage\n    }\n\n    return null;\n  }, [message, message.message, renderCustomMessage]);\n  var isByMe = userId === (sender === null || sender === void 0 ? void 0 : sender.userId) || message.requestState === 'pending' || message.requestState === 'failed';\n\n  if (RenderedMessage) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      ref: useMessageScrollRef,\n      className: getClassName(['sendbird-msg-hoc sendbird-msg--scroll-ref', isAnimated ? 'sendbird-msg-hoc__animated' : '', isHighlighted ? 'sendbird-msg-hoc__highlighted' : ''])\n    }, hasSeparator && /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {\n      type: LabelTypography.CAPTION_2,\n      color: LabelColors.ONBACKGROUND_2\n    }, format(message === null || message === void 0 ? void 0 : message.createdAt, 'MMMM dd, yyyy', {\n      locale: dateLocale\n    }))), /*#__PURE__*/React__default.createElement(RenderedMessage, {\n      message: message\n    }));\n  }\n\n  if (showEdit) {\n    return /*#__PURE__*/React__default.createElement(MessageInput, {\n      isEdit: true,\n      disabled: editDisabled,\n      ref: editMessageInputRef,\n      name: message.messageId,\n      onSendMessage: updateMessage,\n      onCancelEdit: function onCancelEdit() {\n        setShowEdit(false);\n      },\n      value: message.message\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: useMessageScrollRef,\n    className: getClassName(['sendbird-msg-hoc sendbird-msg--scroll-ref', isAnimated ? 'sendbird-msg-hoc__animated' : '', isHighlighted ? 'sendbird-msg-hoc__highlighted' : '']),\n    style: {\n      marginBottom: '2px'\n    }\n  }, hasSeparator && /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message === null || message === void 0 ? void 0 : message.createdAt, 'MMMM dd, yyyy', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(MessageContent, {\n    className: \"sendbird-message-hoc__message-content\",\n    userId: userId,\n    scrollToMessage: scrollToMessage,\n    channel: currentGroupChannel,\n    message: message,\n    disabled: disabled,\n    chainTop: chainTop,\n    chainBottom: chainBottom,\n    useReaction: useReaction,\n    replyType: replyType,\n    nicknamesMap: membersMap,\n    emojiContainer: emojiContainer,\n    showEdit: setShowEdit,\n    showRemove: setShowRemove,\n    showFileViewer: setShowFileViewer,\n    resendMessage: resendMessage,\n    toggleReaction: toggleReaction,\n    quoteMessage: quoteMessage,\n    setQuoteMessage: setQuoteMessage\n  }), showRemove && /*#__PURE__*/React__default.createElement(RemoveMessage, {\n    message: message,\n    onCloseModal: function onCloseModal() {\n      return setShowRemove(false);\n    },\n    onDeleteMessage: function onDeleteMessage() {\n      deleteMessage(message);\n\n      if ((message === null || message === void 0 ? void 0 : message.messageId) === (quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId)) {\n        setQuoteMessage(null);\n      }\n    }\n  }), showFileViewer && /*#__PURE__*/React__default.createElement(FileViewer, {\n    onClose: function onClose() {\n      return setShowFileViewer(false);\n    },\n    message: message,\n    onDelete: function onDelete() {\n      deleteMessage(message, function () {\n        setShowFileViewer(false);\n      });\n    },\n    isByMe: isByMe\n  }));\n}\n\nMessageHoc.propTypes = {\n  userId: PropTypes.string,\n  message: PropTypes.shape({\n    isFileMessage: PropTypes.func,\n    isAdminMessage: PropTypes.func,\n    isUserMessage: PropTypes.func,\n    isDateseparator: PropTypes.func,\n    // should be a number, but there's a bug in SDK shich returns string\n    messageId: PropTypes.number,\n    type: PropTypes.string,\n    createdAt: PropTypes.number,\n    message: PropTypes.string,\n    requestState: PropTypes.string,\n    messageType: PropTypes.string,\n    sender: PropTypes.shape({\n      userId: PropTypes.string\n    }),\n    ogMetaData: PropTypes.shape({}),\n    parentMessageId: PropTypes.number,\n    reactions: PropTypes.arrayOf(PropTypes.number)\n  }),\n  animatedMessageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  highLightedMessageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  renderCustomMessage: PropTypes.func,\n  currentGroupChannel: PropTypes.shape({}),\n  hasSeparator: PropTypes.bool,\n  disabled: PropTypes.bool,\n  editDisabled: PropTypes.bool,\n  deleteMessage: PropTypes.func.isRequired,\n  scrollToMessage: PropTypes.func,\n  updateMessage: PropTypes.func.isRequired,\n  resendMessage: PropTypes.func.isRequired,\n  useReaction: PropTypes.bool.isRequired,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']).isRequired,\n  chainTop: PropTypes.bool.isRequired,\n  chainBottom: PropTypes.bool.isRequired,\n  membersMap: PropTypes.instanceOf(Map).isRequired,\n  emojiContainer: PropTypes.shape({\n    emojiCategories: PropTypes.arrayOf(PropTypes.shape({\n      emojis: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        url: PropTypes.string\n      }))\n    }))\n  }),\n  toggleReaction: PropTypes.func,\n  quoteMessage: PropTypes.shape({\n    messageId: PropTypes.string\n  }),\n  setQuoteMessage: PropTypes.func.isRequired,\n  handleScroll: PropTypes.func.isRequired\n};\nMessageHoc.defaultProps = {\n  userId: '',\n  editDisabled: false,\n  renderCustomMessage: null,\n  currentGroupChannel: {},\n  message: {},\n  hasSeparator: false,\n  disabled: false,\n  animatedMessageId: null,\n  highLightedMessageId: null,\n  toggleReaction: function toggleReaction() {},\n  scrollToMessage: function scrollToMessage() {},\n  emojiContainer: {},\n  quoteMessage: null\n};\nvar SCROLL_REF_CLASS_NAME = '.sendbird-msg--scroll-ref';\n\nvar ConversationScroll = /*#__PURE__*/function (_Component) {\n  _inherits(ConversationScroll, _Component);\n\n  var _super = _createSuper(ConversationScroll);\n\n  function ConversationScroll(props) {\n    var _this;\n\n    _classCallCheck(this, ConversationScroll);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScroll\", function () {\n      var _assertThisInitialize2;\n\n      var _assertThisInitialize = (_assertThisInitialize2 = _assertThisInitialized(_this)) === null || _assertThisInitialize2 === void 0 ? void 0 : _assertThisInitialize2.props,\n          scrollRef = _assertThisInitialize.scrollRef;\n\n      var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n\n      if (current) {\n        var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n        var _this$state$scrollBot = _this.state.scrollBottom,\n            scrollBottom = _this$state$scrollBot === void 0 ? 0 : _this$state$scrollBot;\n\n        if (scrollBottom < bottom) {\n          current.scrollTop += bottom - scrollBottom;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onScroll\", function (e) {\n      var _this$props = _this.props,\n          scrollRef = _this$props.scrollRef,\n          hasMore = _this$props.hasMore,\n          messagesDispatcher = _this$props.messagesDispatcher,\n          onScroll = _this$props.onScroll,\n          onScrollDown = _this$props.onScrollDown,\n          currentGroupChannel = _this$props.currentGroupChannel;\n      var element = e.target;\n      var scrollTop = element.scrollTop,\n          clientHeight = element.clientHeight,\n          scrollHeight = element.scrollHeight;\n\n      if (scrollTop === 0) {\n        if (!hasMore) {\n          return;\n        }\n\n        var nodes = scrollRef.current.querySelectorAll(SCROLL_REF_CLASS_NAME);\n        var first = nodes && nodes[0];\n        onScroll(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n              messages = _ref2[0];\n\n          if (messages) {\n            // https://github.com/scabbiaza/react-scroll-position-on-updating-dom\n            // Set block to nearest to prevent unexpected scrolling from outer components\n            try {\n              first.scrollIntoView({\n                block: 'nearest'\n              });\n            } catch (error) {//\n            }\n          }\n        });\n      }\n\n      if (clientHeight + scrollTop === scrollHeight) {\n        var _nodes = scrollRef.current.querySelectorAll(SCROLL_REF_CLASS_NAME);\n\n        var last = _nodes && _nodes[_nodes.length - 1];\n        onScrollDown(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n              messages = _ref4[0];\n\n          if (messages) {\n            // https://github.com/scabbiaza/react-scroll-position-on-updating-dom\n            try {\n              last.scrollIntoView({\n                block: 'nearest'\n              });\n            } catch (error) {//\n            }\n          }\n        });\n      } // do this later\n\n\n      setTimeout(function () {\n        // mark as read if scroll is at end\n        if (clientHeight + scrollTop === scrollHeight) {\n          messagesDispatcher({\n            type: MARK_AS_READ\n          });\n          currentGroupChannel.markAsRead();\n        } // save the lastest scroll bottom value\n\n\n        if (scrollRef !== null && scrollRef !== void 0 && scrollRef.current) {\n          var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n\n          _this.setState(function (state) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              scrollBottom: current.scrollHeight - current.scrollTop - current.offsetHeight\n            });\n          }, function () {});\n        }\n      }, 500);\n    });\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(ConversationScroll, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          userId = _this$props2.userId,\n          disabled = _this$props2.disabled,\n          scrollRef = _this$props2.scrollRef,\n          membersMap = _this$props2.membersMap,\n          allMessages = _this$props2.allMessages,\n          scrollToMessage = _this$props2.scrollToMessage,\n          useReaction = _this$props2.useReaction,\n          replyType = _this$props2.replyType,\n          emojiAllMap = _this$props2.emojiAllMap,\n          editDisabled = _this$props2.editDisabled,\n          deleteMessage = _this$props2.deleteMessage,\n          updateMessage = _this$props2.updateMessage,\n          resendMessage = _this$props2.resendMessage,\n          renderCustomMessage = _this$props2.renderCustomMessage,\n          renderChatItem = _this$props2.renderChatItem,\n          animatedMessageId = _this$props2.animatedMessageId,\n          highLightedMessageId = _this$props2.highLightedMessageId,\n          emojiContainer = _this$props2.emojiContainer,\n          toggleReaction = _this$props2.toggleReaction,\n          useMessageGrouping = _this$props2.useMessageGrouping,\n          currentGroupChannel = _this$props2.currentGroupChannel,\n          memoizedEmojiListItems = _this$props2.memoizedEmojiListItems,\n          showScrollBot = _this$props2.showScrollBot,\n          onClickScrollBot = _this$props2.onClickScrollBot,\n          quoteMessage = _this$props2.quoteMessage,\n          setQuoteMessage = _this$props2.setQuoteMessage;\n\n      if (allMessages.length < 1) {\n        return /*#__PURE__*/React__default.createElement(PlaceHolder, {\n          className: \"sendbird-conversation__no-messages\",\n          type: PlaceHolderTypes.NO_MESSAGES\n        });\n      }\n\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-conversation__messages\"\n      }, /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-conversation__scroll-container\"\n      }, /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-conversation__padding\"\n      }), /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-conversation__messages-padding\",\n        ref: scrollRef,\n        onScroll: this.onScroll\n      }, allMessages.map(function (m, idx) {\n        var previousMessage = allMessages[idx - 1];\n        var nextMessage = allMessages[idx + 1];\n\n        var _ref5 = useMessageGrouping ? compareMessagesForGrouping(previousMessage, m, nextMessage) : [false, false],\n            _ref6 = _slicedToArray(_ref5, 2),\n            chainTop = _ref6[0],\n            chainBottom = _ref6[1];\n\n        var previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n        var currentCreatedAt = m.createdAt; // https://stackoverflow.com/a/41855608\n\n        var hasSeparator = !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));\n\n        if (renderChatItem) {\n          return /*#__PURE__*/React__default.createElement(\"div\", {\n            key: m.messageId || m.reqId,\n            className: \"sendbird-msg--scroll-ref\"\n          }, renderChatItem({\n            message: m,\n            animatedMessageId: animatedMessageId,\n            highLightedMessageId: highLightedMessageId,\n            channel: currentGroupChannel,\n            onDeleteMessage: deleteMessage,\n            onUpdateMessage: updateMessage,\n            onResendMessage: resendMessage,\n            onScrollToMessage: scrollToMessage,\n            onReplyMessage: setQuoteMessage,\n            emojiContainer: emojiContainer,\n            chainTop: chainTop,\n            chainBottom: chainBottom,\n            hasSeparator: hasSeparator,\n            menuDisabled: disabled\n          }));\n        }\n\n        return /*#__PURE__*/React__default.createElement(MessageHoc, {\n          animatedMessageId: animatedMessageId,\n          highLightedMessageId: highLightedMessageId,\n          renderCustomMessage: renderCustomMessage,\n          key: m.messageId || m.reqId,\n          userId: userId,\n          handleScroll: _this2.handleScroll,\n          message: m,\n          quoteMessage: quoteMessage,\n          scrollToMessage: scrollToMessage,\n          currentGroupChannel: currentGroupChannel,\n          disabled: disabled,\n          membersMap: membersMap,\n          chainTop: chainTop,\n          useReaction: useReaction,\n          replyType: replyType,\n          emojiAllMap: emojiAllMap,\n          emojiContainer: emojiContainer,\n          editDisabled: editDisabled,\n          hasSeparator: hasSeparator,\n          chainBottom: chainBottom,\n          updateMessage: updateMessage,\n          deleteMessage: deleteMessage,\n          resendMessage: resendMessage,\n          toggleReaction: toggleReaction,\n          setQuoteMessage: setQuoteMessage,\n          memoizedEmojiListItems: memoizedEmojiListItems\n        });\n      }))), showScrollBot && /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-conversation__scroll-bottom-button\",\n        onClick: onClickScrollBot,\n        onKeyDown: onClickScrollBot,\n        tabIndex: 0,\n        role: \"button\"\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        width: \"24px\",\n        height: \"24px\",\n        type: IconTypes.CHEVRON_DOWN,\n        fillColor: IconColors.PRIMARY\n      })));\n    }\n  }]);\n\n  return ConversationScroll;\n}(Component);\n\nConversationScroll.propTypes = {\n  // https://stackoverflow.com/a/52646941\n  scrollRef: PropTypes.shape({\n    current: PropTypes.oneOfType([PropTypes.element, PropTypes.shape({})])\n  }).isRequired,\n  hasMore: PropTypes.bool,\n  messagesDispatcher: PropTypes.func.isRequired,\n  onScroll: PropTypes.func,\n  onScrollDown: PropTypes.func,\n  editDisabled: PropTypes.bool,\n  disabled: PropTypes.bool,\n  userId: PropTypes.string,\n  allMessages: PropTypes.arrayOf(PropTypes.shape({\n    createdAt: PropTypes.number\n  })).isRequired,\n  deleteMessage: PropTypes.func.isRequired,\n  resendMessage: PropTypes.func.isRequired,\n  updateMessage: PropTypes.func.isRequired,\n  currentGroupChannel: PropTypes.shape({\n    markAsRead: PropTypes.func,\n    members: PropTypes.arrayOf(PropTypes.shape({}))\n  }).isRequired,\n  animatedMessageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  highLightedMessageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  renderChatItem: PropTypes.func,\n  renderCustomMessage: PropTypes.func,\n  scrollToMessage: PropTypes.func,\n  useReaction: PropTypes.bool,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']),\n  showScrollBot: PropTypes.bool,\n  onClickScrollBot: PropTypes.func,\n  emojiContainer: PropTypes.shape({}),\n  emojiAllMap: PropTypes.instanceOf(Map),\n  membersMap: PropTypes.instanceOf(Map),\n  useMessageGrouping: PropTypes.bool,\n  toggleReaction: PropTypes.func,\n  memoizedEmojiListItems: PropTypes.func,\n  quoteMessage: PropTypes.shape({}),\n  setQuoteMessage: PropTypes.func.isRequired\n};\nConversationScroll.defaultProps = {\n  hasMore: false,\n  editDisabled: false,\n  disabled: false,\n  userId: '',\n  renderCustomMessage: null,\n  renderChatItem: null,\n  animatedMessageId: null,\n  highLightedMessageId: null,\n  onScroll: null,\n  onScrollDown: null,\n  useReaction: true,\n  replyType: 'NONE',\n  emojiContainer: {},\n  showScrollBot: false,\n  onClickScrollBot: function onClickScrollBot() {},\n  scrollToMessage: function scrollToMessage() {},\n  emojiAllMap: new Map(),\n  membersMap: new Map(),\n  useMessageGrouping: true,\n  toggleReaction: function toggleReaction() {},\n  memoizedEmojiListItems: function memoizedEmojiListItems() {\n    return '';\n  },\n  quoteMessage: null\n};\n\nfunction Notification(_ref) {\n  var count = _ref.count,\n      time = _ref.time,\n      onClick = _ref.onClick;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  var timeArray = time.split(' ');\n  timeArray.splice(-2, 0, stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__ON);\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line\n    React__default.createElement(\"div\", {\n      className: \"sendbird-notification\",\n      onClick: onClick\n    }, /*#__PURE__*/React__default.createElement(Label, {\n      className: \"sendbird-notification__text\",\n      color: LabelColors.ONCONTENT_1,\n      type: LabelTypography.CAPTION_2\n    }, \"\".concat(count, \" \"), stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__NEW_MESSAGE, \" \".concat(timeArray.join(' '))), /*#__PURE__*/React__default.createElement(Icon, {\n      width: \"24px\",\n      height: \"24px\",\n      type: IconTypes.CHEVRON_DOWN,\n      fillColor: IconColors.CONTENT\n    }))\n  );\n}\n\nNotification.propTypes = {\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  time: PropTypes.string,\n  onClick: PropTypes.func.isRequired\n};\nNotification.defaultProps = {\n  count: 0,\n  time: ''\n};\n\nvar FrozenNotification = function FrozenNotification() {\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-notification sendbird-notification--frozen\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-notification__text\",\n    type: LabelTypography.CAPTION_2\n  }, stringSet.CHANNEL_FROZEN));\n};\n\nvar TypingIndicatorText = function TypingIndicatorText(_ref) {\n  var members = _ref.members;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  if (!members || members.length === 0) {\n    return '';\n  }\n\n  if (members && members.length === 1) {\n    return \"\".concat(members[0].nickname, \" \").concat(stringSet.TYPING_INDICATOR__IS_TYPING);\n  }\n\n  if (members && members.length === 2) {\n    return \"\".concat(members[0].nickname, \" \").concat(stringSet.TYPING_INDICATOR__AND, \" \").concat(members[1].nickname, \" \").concat(stringSet.TYPING_INDICATOR__ARE_TYPING);\n  }\n\n  return stringSet.TYPING_INDICATOR__MULTIPLE_TYPING;\n};\n\nfunction TypingIndicator(props) {\n  var className = props.className,\n      channelUrl = props.channelUrl,\n      sb = props.sb,\n      logger = props.logger;\n\n  var _useState = useState(uuidv4()),\n      _useState2 = _slicedToArray(_useState, 2),\n      handlerId = _useState2[0],\n      setHandlerId = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      typingMembers = _useState4[0],\n      setTypingMembers = _useState4[1];\n\n  useEffect(function () {\n    if (sb && sb.ChannelHandler) {\n      sb.removeChannelHandler(handlerId);\n      var newHandlerId = uuidv4();\n      var handler = new sb.ChannelHandler(); // there is a possible warning in here - setState called after unmount\n\n      handler.onTypingStatusUpdated = function (groupChannel) {\n        logger.info('Channel > Typing Indicator: onTypingStatusUpdated', groupChannel);\n        var members = groupChannel.getTypingMembers();\n\n        if (groupChannel.url === channelUrl) {\n          setTypingMembers(members);\n        }\n      };\n\n      sb.addChannelHandler(newHandlerId, handler);\n      setHandlerId(newHandlerId);\n    }\n\n    return function () {\n      setTypingMembers([]);\n\n      if (sb && sb.removeChannelHandler) {\n        sb.removeChannelHandler(handlerId);\n      }\n    };\n  }, [channelUrl]);\n  return /*#__PURE__*/React__default.createElement(Label, {\n    className: className,\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, /*#__PURE__*/React__default.createElement(TypingIndicatorText, {\n    members: typingMembers\n  }));\n}\n\nTypingIndicator.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  channelUrl: PropTypes.string.isRequired,\n  sb: PropTypes.shape({\n    ChannelHandler: PropTypes.func,\n    removeChannelHandler: PropTypes.func,\n    addChannelHandler: PropTypes.func\n  }).isRequired,\n  logger: PropTypes.shape({\n    info: PropTypes.func\n  }).isRequired\n};\nTypingIndicator.defaultProps = {\n  className: ''\n};\nvar componentClassname = 'sendbird-quote_message_input__avatar';\n\nfunction QuoteMessageThumbnail(_a) {\n  var message = _a.message;\n\n  if (!isFileMessage(message)) {\n    return null;\n  }\n\n  var thumbnailUrl = message.thumbnails && message.thumbnails.length > 0 && message.thumbnails[0].url || isImageMessage(message) && message.url;\n\n  if (isThumbnailMessage(message) && thumbnailUrl) {\n    return /*#__PURE__*/React__default.createElement(ImageRenderer, {\n      className: componentClassname,\n      url: thumbnailUrl,\n      alt: message.type,\n      width: \"44px\",\n      height: \"44px\",\n      fixedSize: true\n    });\n  } else if (isAudioMessage(message)) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: componentClassname\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: IconTypes.FILE_AUDIO,\n      fillColor: IconColors.ON_BACKGROUND_2,\n      width: \"24px\",\n      height: \"24px\"\n    }));\n  } else {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: componentClassname\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: IconTypes.FILE_DOCUMENT,\n      fillColor: IconColors.ON_BACKGROUND_2,\n      width: \"24px\",\n      height: \"24px\"\n    }));\n  }\n}\n\nfunction QuoteMessageInput(_a) {\n  var _b;\n\n  var className = _a.className,\n      replyingMessage = _a.replyingMessage,\n      onClose = _a.onClose;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var fileMessage = replyingMessage;\n  var sender = (_b = replyingMessage) === null || _b === void 0 ? void 0 : _b.sender;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-quote_message_input', className])\n  }, /*#__PURE__*/React__default.createElement(QuoteMessageThumbnail, {\n    message: fileMessage\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-quote_message_input__body\",\n    style: {\n      width: \"calc(100% - \" + (fileMessage.isFileMessage() ? '164px' : '120px') + \")\",\n      left: fileMessage.isFileMessage() ? '92px' : '40px'\n    }\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-quote_message_input__body__sender-name\",\n    type: LabelTypography.CAPTION_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.QUOTE_MESSAGE_INPUT__REPLY_TO + \" \" + (sender && sender.nickname ? sender.nickname : stringSet.NO_NAME)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-quote_message_input__body__message-content\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, isImageMessage(fileMessage) && !isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_IMAGE, isVideoMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE__VIDEO, isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_GIF, isUserMessage(replyingMessage) && replyingMessage.message, isFileMessage(fileMessage) && !isThumbnailMessage(fileMessage) && fileMessage.name)), /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-quote_message_input__close-button\",\n    type: IconTypes.CLOSE,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"24px\",\n    height: \"24px\",\n    onClick: function onClick() {\n      return onClose(replyingMessage);\n    }\n  }));\n} // Logic required to handle message input rendering\n\n\nvar MessageInputWrapper = function MessageInputWrapper(_a, ref) {\n  var channel = _a.channel,\n      user = _a.user,\n      isOnline = _a.isOnline,\n      initialized = _a.initialized,\n      quoteMessage = _a.quoteMessage,\n      _onSendMessage = _a.onSendMessage,\n      _onFileUpload = _a.onFileUpload,\n      setQuoteMessage = _a.setQuoteMessage,\n      renderMessageInput = _a.renderMessageInput;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var disabled = !initialized || isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel) || !isOnline;\n  var isOperator$1 = isOperator(channel);\n  var isBroadcast = channel.isBroadcast; // custom message\n\n  if (renderMessageInput) {\n    return renderMessageInput({\n      channel: channel,\n      user: user,\n      disabled: disabled,\n      quoteMessage: quoteMessage\n    });\n  } // broadcast channel + not operator\n\n\n  if (isBroadcast && !isOperator$1) {\n    return null;\n  } // other conditions\n\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-input-wrapper\"\n  }, quoteMessage && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-input-wrapper__quote-message-input\"\n  }, /*#__PURE__*/React__default.createElement(QuoteMessageInput, {\n    replyingMessage: quoteMessage,\n    onClose: function onClose() {\n      return setQuoteMessage(null);\n    }\n  })), /*#__PURE__*/React__default.createElement(MessageInput, {\n    className: \"sendbird-message-input-wrapper__message-input\",\n    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,\n    placeholder: quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER || isDisabledBecauseFrozen(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || isDisabledBecauseMuted(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED,\n    ref: ref,\n    disabled: disabled,\n    onStartTyping: function onStartTyping() {\n      channel.startTyping();\n    },\n    onSendMessage: function onSendMessage() {\n      _onSendMessage(quoteMessage);\n\n      setQuoteMessage(null);\n    },\n    onFileUpload: function onFileUpload(file) {\n      _onFileUpload(file, quoteMessage);\n\n      setQuoteMessage(null);\n    }\n  }));\n};\n\nvar MessageInputWrapper$1 = /*#__PURE__*/React__default.forwardRef(MessageInputWrapper);\n\nfunction ConnectionStatus() {\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-connection-status\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.TRYING_TO_CONNECT), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.DISCONNECTED,\n    fillColor: IconColors.SENT,\n    width: \"14px\",\n    height: \"14px\"\n  }));\n}\n\nvar getChannelTitle = function getChannelTitle() {\n  var channel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var currentUserId = arguments.length > 1 ? arguments[1] : undefined;\n  var stringSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : LabelStringSet;\n\n  if (!channel || !channel.name && !channel.members) {\n    return stringSet.NO_TITLE;\n  }\n\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members.filter(function (_ref) {\n    var userId = _ref.userId;\n    return userId !== currentUserId;\n  }).map(function (_ref2) {\n    var nickname = _ref2.nickname;\n    return nickname || stringSet.NO_NAME;\n  }).join(', ');\n};\n\nvar noop$1 = function noop() {};\n\nfunction ChatHeader(props) {\n  var currentGroupChannel = props.currentGroupChannel,\n      currentUser = props.currentUser,\n      title = props.title,\n      subTitle = props.subTitle,\n      isMuted = props.isMuted,\n      theme = props.theme,\n      showSearchIcon = props.showSearchIcon,\n      onSearchClick = props.onSearchClick,\n      onActionClick = props.onActionClick;\n  var userId = currentUser.userId;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-chat-header\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-chat-header__left\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    theme: theme,\n    channel: currentGroupChannel,\n    userId: userId,\n    height: 32,\n    width: 32\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-chat-header__left__title\",\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, title || getChannelTitle(currentGroupChannel, userId, stringSet)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-chat-header__left__subtitle\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_2\n  }, subTitle)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-chat-header__right\"\n  }, (typeof isMuted === 'string' && isMuted === 'true' || typeof isMuted === 'boolean' && isMuted) && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-chat-header__right__mute\",\n    type: IconTypes.NOTIFICATIONS_OFF_FILLED,\n    width: \"24px\",\n    height: \"24px\"\n  }), showSearchIcon && /*#__PURE__*/React__default.createElement(IconButton, {\n    className: \"sendbird-chat-header__right__search\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onSearchClick\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.SEARCH,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })), /*#__PURE__*/React__default.createElement(IconButton, {\n    className: \"sendbird-chat-header__right__info\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onActionClick\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.INFO,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }))));\n}\n\nChatHeader.propTypes = {\n  currentGroupChannel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string\n  }),\n  title: PropTypes.string,\n  subTitle: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  isMuted: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  theme: PropTypes.string,\n  showSearchIcon: PropTypes.bool,\n  onSearchClick: PropTypes.func,\n  onActionClick: PropTypes.func\n};\nChatHeader.defaultProps = {\n  currentGroupChannel: {},\n  currentUser: {},\n  title: '',\n  subTitle: '',\n  isMuted: false,\n  theme: 'light',\n  showSearchIcon: false,\n  onSearchClick: noop$1,\n  onActionClick: noop$1\n};\n\nvar noop = function noop() {};\n\nvar ConversationPanel = function ConversationPanel(props) {\n  var channelUrl = props.channelUrl,\n      _props$stores = props.stores,\n      sdkStore = _props$stores.sdkStore,\n      userStore = _props$stores.userStore,\n      _props$config = props.config,\n      userId = _props$config.userId,\n      logger = _props$config.logger,\n      pubSub = _props$config.pubSub,\n      isOnline = _props$config.isOnline,\n      theme = _props$config.theme,\n      imageCompression = _props$config.imageCompression,\n      reconnect = props.dispatchers.reconnect,\n      _props$queries = props.queries,\n      queries = _props$queries === void 0 ? {} : _props$queries,\n      startingPoint = props.startingPoint,\n      highlightedMessage = props.highlightedMessage,\n      useReaction = props.useReaction,\n      replyType = props.replyType,\n      showSearchIcon = props.showSearchIcon,\n      onSearchClick = props.onSearchClick,\n      renderChatItem = props.renderChatItem,\n      renderChatHeader = props.renderChatHeader,\n      renderCustomMessage = props.renderCustomMessage,\n      renderUserProfile = props.renderUserProfile,\n      disableUserProfile = props.disableUserProfile,\n      renderMessageInput = props.renderMessageInput,\n      useMessageGrouping = props.useMessageGrouping,\n      onChatHeaderActionClick = props.onChatHeaderActionClick,\n      onBeforeSendUserMessage = props.onBeforeSendUserMessage,\n      onBeforeSendFileMessage = props.onBeforeSendFileMessage,\n      onBeforeUpdateUserMessage = props.onBeforeUpdateUserMessage;\n  var sdk = sdkStore.sdk;\n  var config = props.config;\n  var sdkError = sdkStore.error;\n  var sdkInit = sdkStore.initialized;\n  var user = userStore.user;\n\n  if (queries.messageListQuery) {\n    // eslint-disable-next-line no-console\n    console.warn('messageListQuery has been deprecated, please use messageListParams instead');\n  }\n\n  useEffect(function () {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n\n  var _useState = useState(startingPoint),\n      _useState2 = _slicedToArray(_useState, 2),\n      intialTimeStamp = _useState2[0],\n      setIntialTimeStamp = _useState2[1];\n\n  useEffect(function () {\n    setIntialTimeStamp(startingPoint);\n  }, [startingPoint, channelUrl]);\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      animatedMessageId = _useState4[0],\n      setAnimatedMessageId = _useState4[1];\n\n  var _useState5 = useState(highlightedMessage),\n      _useState6 = _slicedToArray(_useState5, 2),\n      highLightedMessageId = _useState6[0],\n      setHighLightedMessageId = _useState6[1];\n\n  useEffect(function () {\n    setHighLightedMessageId(highlightedMessage);\n  }, [highlightedMessage]);\n  var userFilledMessageListQuery = queries.messageListParams;\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      quoteMessage = _useState8[0],\n      setQuoteMessage = _useState8[1];\n\n  var _useReducer = useReducer(reducer, messagesInitialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      messagesStore = _useReducer2[0],\n      messagesDispatcher = _useReducer2[1];\n\n  var scrollRef = useRef(null);\n  var allMessages = messagesStore.allMessages,\n      loading = messagesStore.loading,\n      initialized = messagesStore.initialized,\n      unreadCount = messagesStore.unreadCount,\n      unreadSince = messagesStore.unreadSince,\n      isInvalid = messagesStore.isInvalid,\n      _messagesStore$curren = messagesStore.currentGroupChannel,\n      currentGroupChannel = _messagesStore$curren === void 0 ? {} : _messagesStore$curren,\n      hasMore = messagesStore.hasMore,\n      lastMessageTimeStamp = messagesStore.lastMessageTimeStamp,\n      hasMoreToBottom = messagesStore.hasMoreToBottom,\n      latestFetchedMessageTimeStamp = messagesStore.latestFetchedMessageTimeStamp,\n      emojiContainer = messagesStore.emojiContainer,\n      readStatus = messagesStore.readStatus;\n  var isFrozen = currentGroupChannel.isFrozen,\n      isBroadcast = currentGroupChannel.isBroadcast,\n      isSuper = currentGroupChannel.isSuper;\n  var _sdk$appInfo = sdk.appInfo,\n      appInfo = _sdk$appInfo === void 0 ? {} : _sdk$appInfo;\n  var usingReaction = appInfo.isUsingReaction && !isBroadcast && !isSuper && useReaction // TODO: Make useReaction independent from appInfo.isUsingReaction\n  ;\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  var showScrollBot = hasMoreToBottom; // TODO: emojiAllMap, emoijAllList, nicknamesMap => should be moved to messagesStore\n\n  var emojiAllMap = useMemo(function () {\n    return usingReaction ? getAllEmojisMapFromEmojiContainer(emojiContainer) : new Map();\n  }, [emojiContainer]);\n  var emojiAllList = useMemo(function () {\n    return usingReaction ? getAllEmojisFromEmojiContainer$1(emojiContainer) : [];\n  }, [emojiContainer]);\n  var nicknamesMap = useMemo(function () {\n    return usingReaction ? getNicknamesMapFromMembers(currentGroupChannel.members) : new Map();\n  }, [currentGroupChannel.members]); // Scrollup is default scroll for channel\n\n  var onScrollCallback = useScrollCallback({\n    currentGroupChannel: currentGroupChannel,\n    lastMessageTimeStamp: lastMessageTimeStamp,\n    userFilledMessageListQuery: userFilledMessageListQuery,\n    replyType: replyType\n  }, {\n    hasMore: hasMore,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk\n  });\n  var scrollToMessage = useScrollToMessage({\n    setIntialTimeStamp: setIntialTimeStamp,\n    setAnimatedMessageId: setAnimatedMessageId,\n    allMessages: allMessages\n  }, {\n    logger: logger\n  }); // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMoreToBottom, onScrollDownCallback -> scroll down\n  // hasMore, onScrollCallback -> scroll up(default behavior)\n\n  var onScrollDownCallback = useScrollDownCallback({\n    currentGroupChannel: currentGroupChannel,\n    latestFetchedMessageTimeStamp: latestFetchedMessageTimeStamp,\n    userFilledMessageListQuery: userFilledMessageListQuery,\n    hasMoreToBottom: hasMoreToBottom,\n    replyType: replyType\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk\n  });\n  var toggleReaction = useToggleReactionCallback({\n    currentGroupChannel: currentGroupChannel\n  }, {\n    logger: logger\n  });\n  var memoizedEmojiListItems = useMemoizedEmojiListItems({\n    emojiContainer: emojiContainer,\n    toggleReaction: toggleReaction\n  }, {\n    useReaction: usingReaction,\n    logger: logger,\n    userId: userId,\n    emojiAllList: emojiAllList\n  }); // to create message-datasource\n  // this hook sets currentGroupChannel asynchronously\n\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit\n  }, {\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk,\n    logger: logger\n  });\n  useEffect(function () {\n    setQuoteMessage(null);\n  }, [channelUrl]); // Hook to handle ChannelEvents and send values to useReducer using messagesDispatcher\n\n  useHandleChannelEvents({\n    currentGroupChannel: currentGroupChannel,\n    sdkInit: sdkInit,\n    hasMoreToBottom: hasMoreToBottom\n  }, {\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk,\n    logger: logger,\n    scrollRef: scrollRef,\n    setQuoteMessage: setQuoteMessage\n  }); // hook that fetches messages when channel changes\n  // to be clear here useGetChannel sets currentGroupChannel\n  // and useInitialMessagesFetch executes when currentGroupChannel changes\n  // p.s This one executes on intialTimeStamp change too\n\n  useInitialMessagesFetch({\n    currentGroupChannel: currentGroupChannel,\n    userFilledMessageListQuery: userFilledMessageListQuery,\n    intialTimeStamp: intialTimeStamp,\n    replyType: replyType\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  }); // handles API calls from withSendbird\n\n  useEffect(function () {\n    var subScriber = pubSubHandler(channelUrl, pubSub, messagesDispatcher);\n    return function () {\n      pubSubHandleRemover(subScriber);\n    };\n  }, [channelUrl, sdkInit]); // handling connection breaks\n\n  useHandleReconnect({\n    isOnline: isOnline,\n    replyType: replyType\n  }, {\n    logger: logger,\n    sdk: sdk,\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher,\n    userFilledMessageListQuery: userFilledMessageListQuery\n  }); // callbacks for Message CURD actions\n\n  var deleteMessage = useDeleteMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher\n  }, {\n    logger: logger\n  });\n  var updateMessage = useUpdateMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher,\n    onBeforeUpdateUserMessage: onBeforeUpdateUserMessage\n  }, {\n    logger: logger,\n    sdk: sdk,\n    pubSub: pubSub\n  });\n  var resendMessage = useResendMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher\n  }, {\n    logger: logger\n  });\n\n  var _useSendMessageCallba = useSendMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    onBeforeSendUserMessage: onBeforeSendUserMessage\n  }, {\n    sdk: sdk,\n    logger: logger,\n    pubSub: pubSub,\n    messagesDispatcher: messagesDispatcher\n  }),\n      _useSendMessageCallba2 = _slicedToArray(_useSendMessageCallba, 2),\n      messageInputRef = _useSendMessageCallba2[0],\n      onSendMessage = _useSendMessageCallba2[1];\n\n  var _useSendFileMessageCa = useSendFileMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    onBeforeSendFileMessage: onBeforeSendFileMessage,\n    imageCompression: imageCompression\n  }, {\n    sdk: sdk,\n    logger: logger,\n    pubSub: pubSub,\n    messagesDispatcher: messagesDispatcher\n  }),\n      _useSendFileMessageCa2 = _slicedToArray(_useSendFileMessageCa, 1),\n      onSendFileMessage = _useSendFileMessageCa2[0];\n\n  if (!channelUrl) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-conversation\"\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.NO_CHANNELS\n    }));\n  }\n\n  if (isInvalid) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-conversation\"\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG\n    }));\n  }\n\n  if (sdkError) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-conversation\"\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG,\n      retryToConnect: function retryToConnect() {\n        logger.info('Channel: reconnecting');\n        reconnect();\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-conversation\",\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, renderChatHeader ? renderChatHeader({\n    channel: currentGroupChannel,\n    user: user\n  }) : /*#__PURE__*/React__default.createElement(ChatHeader, {\n    theme: theme,\n    currentGroupChannel: currentGroupChannel,\n    currentUser: user,\n    showSearchIcon: showSearchIcon,\n    onSearchClick: onSearchClick,\n    onActionClick: onChatHeaderActionClick,\n    subTitle: currentGroupChannel.members && currentGroupChannel.members.length !== 2,\n    isMuted: false\n  }), isFrozen && /*#__PURE__*/React__default.createElement(FrozenNotification, null), unreadCount > 0 && /*#__PURE__*/React__default.createElement(Notification, {\n    count: unreadCount,\n    onClick: function onClick() {\n      if (intialTimeStamp) {\n        setIntialTimeStamp(null);\n        setAnimatedMessageId(null);\n        setHighLightedMessageId(null);\n      } else {\n        scrollIntoLast(); // there is no scroll\n\n        if (scrollRef.current.scrollTop === 0) {\n          try {\n            currentGroupChannel.markAsRead();\n          } catch (_unused) {//\n          }\n\n          messagesDispatcher({\n            type: MARK_AS_READ\n          });\n        }\n      }\n    },\n    time: unreadSince\n  }), loading ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.LOADING\n  })) : /*#__PURE__*/React__default.createElement(ConversationScroll, {\n    swapParams: sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback(),\n    animatedMessageId: animatedMessageId,\n    highLightedMessageId: highLightedMessageId,\n    userId: userId,\n    hasMore: hasMore,\n    disabled: !isOnline,\n    onScroll: onScrollCallback,\n    onScrollDown: onScrollDownCallback,\n    scrollRef: scrollRef,\n    readStatus: readStatus,\n    useReaction: usingReaction,\n    replyType: replyType,\n    allMessages: allMessages,\n    scrollToMessage: scrollToMessage,\n    emojiAllMap: emojiAllMap,\n    membersMap: nicknamesMap,\n    editDisabled: isDisabledBecauseFrozen(currentGroupChannel),\n    deleteMessage: deleteMessage,\n    updateMessage: updateMessage,\n    resendMessage: resendMessage,\n    toggleReaction: toggleReaction,\n    emojiContainer: emojiContainer,\n    renderChatItem: renderChatItem,\n    quoteMessage: quoteMessage,\n    setQuoteMessage: setQuoteMessage,\n    showScrollBot: showScrollBot,\n    onClickScrollBot: function onClickScrollBot() {\n      setIntialTimeStamp(null);\n      setAnimatedMessageId(null);\n      setHighLightedMessageId(null);\n    },\n    renderCustomMessage: renderCustomMessage,\n    useMessageGrouping: useMessageGrouping,\n    messagesDispatcher: messagesDispatcher,\n    currentGroupChannel: currentGroupChannel,\n    memoizedEmojiListItems: memoizedEmojiListItems\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__footer\"\n  }, /*#__PURE__*/React__default.createElement(MessageInputWrapper$1, {\n    channel: currentGroupChannel,\n    user: user,\n    ref: messageInputRef,\n    isOnline: isOnline,\n    initialized: initialized,\n    onSendMessage: onSendMessage,\n    onFileUpload: onSendFileMessage,\n    quoteMessage: quoteMessage,\n    setQuoteMessage: setQuoteMessage,\n    renderMessageInput: renderMessageInput\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__footer__typing-indicator\"\n  }, /*#__PURE__*/React__default.createElement(TypingIndicator, {\n    className: \"sendbird-conversation__footer__typing-indicator__text\",\n    channelUrl: channelUrl,\n    sb: sdk,\n    logger: logger\n  }), !isOnline && /*#__PURE__*/React__default.createElement(ConnectionStatus, {\n    sdkInit: sdkInit,\n    sb: sdk,\n    logger: logger\n  }))));\n};\n\nConversationPanel.propTypes = {\n  channelUrl: PropTypes.string,\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool,\n      sdk: PropTypes.shape({\n        getErrorFirstCallback: PropTypes.func,\n        removeChannelHandler: PropTypes.func,\n        GroupChannel: PropTypes.any,\n        ChannelHandler: PropTypes.any,\n        addChannelHandler: PropTypes.func,\n        UserMessageParams: PropTypes.any,\n        FileMessageParams: PropTypes.any,\n        getAllEmoji: PropTypes.func,\n        appInfo: PropTypes.shape({})\n      }),\n      error: PropTypes.bool\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({})\n    })\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    reconnect: PropTypes.func\n  }).isRequired,\n  config: PropTypes.shape({\n    disableUserProfile: PropTypes.bool,\n    renderUserProfile: PropTypes.func,\n    userId: PropTypes.string.isRequired,\n    isOnline: PropTypes.bool.isRequired,\n    theme: PropTypes.string,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func\n    }),\n    imageCompression: PropTypes.shape({\n      compressionRate: PropTypes.number,\n      resizingWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      resizingHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n    })\n  }).isRequired,\n  queries: PropTypes.shape({\n    messageListParams: PropTypes.shape({\n      includeMetaArray: PropTypes.bool,\n      includeParentMessageText: PropTypes.bool,\n      includeReaction: PropTypes.bool,\n      includeReplies: PropTypes.bool,\n      includeThreadInfo: PropTypes.bool,\n      limit: PropTypes.number,\n      reverse: PropTypes.bool,\n      senderUserIdsFilter: PropTypes.arrayOf(PropTypes.string)\n    })\n  }),\n  startingPoint: PropTypes.number,\n  highlightedMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onBeforeSendUserMessage: PropTypes.func,\n  // onBeforeSendUserMessage(text)\n  onBeforeSendFileMessage: PropTypes.func,\n  // onBeforeSendFileMessage(File)\n  onBeforeUpdateUserMessage: PropTypes.func,\n  renderChatItem: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  renderCustomMessage: PropTypes.func,\n  renderMessageInput: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  renderChatHeader: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  showSearchIcon: PropTypes.bool,\n  onSearchClick: PropTypes.func,\n  onChatHeaderActionClick: PropTypes.func,\n  useReaction: PropTypes.bool,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  useMessageGrouping: PropTypes.bool\n};\nConversationPanel.defaultProps = {\n  channelUrl: null,\n  queries: {},\n  onBeforeSendUserMessage: null,\n  onBeforeSendFileMessage: null,\n  onBeforeUpdateUserMessage: null,\n  startingPoint: null,\n  highlightedMessage: null,\n  renderChatItem: null,\n  renderCustomMessage: null,\n  renderMessageInput: null,\n  renderChatHeader: null,\n  useReaction: true,\n  replyType: 'NONE',\n  showSearchIcon: false,\n  onSearchClick: noop,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  useMessageGrouping: true,\n  onChatHeaderActionClick: noop\n};\nvar getEmojiCategoriesFromEmojiContainer = getEmojiCategoriesFromEmojiContainer$1,\n    getAllEmojisFromEmojiContainer = getAllEmojisFromEmojiContainer$1,\n    getEmojisFromEmojiContainer = getEmojisFromEmojiContainer$1;\nvar Conversation = withSendbirdContext(ConversationPanel);\nexport { ConversationPanel, Conversation as default, getAllEmojisFromEmojiContainer, getEmojiCategoriesFromEmojiContainer, getEmojisFromEmojiContainer };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\dux\\actionTypes.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\utils.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\dux\\initialState.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\dux\\reducers.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useHandleChannelEvents.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useGetChannel.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useInitialMessagesFetch.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useHandleReconnect.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useScrollCallback.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useScrollDownCallback.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useDeleteMessageCallback.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useUpdateMessageCallback.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useResendMessageCallback.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useSendMessageCallback.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useSendFileMessageCallback.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\ReactionButton\\index.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useMemoizedEmojiListItems.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useToggleReactionCallback.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\hooks\\useScrollToMessage.ts","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\MessageStatus\\index.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\MessageItemMenu\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\MessageItemReactionMenu\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\Tooltip\\index.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\TooltipWrapper\\index.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\ReactionBadge\\index.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\EmojiReactions\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\AdminMessage\\index.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\TextMessageItemBody\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\FileMessageItemBody\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\ThumbnailMessageItemBody\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\OGMessageItemBody\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\UnknownMessageItemBody\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\QuoteMessage\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\MessageContent\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\components\\RemoveMessage.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\components\\MessageHOC.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\components\\ConversationScroll.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\components\\Notification.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\components\\FrozenNotification.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\components\\TypingIndicator.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\QuoteMessageInput\\QuoteMessageThumbnail.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\QuoteMessageInput\\index.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\components\\MessageInputWrapper.tsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\ConnectionStatus\\index.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\ChatHeader\\utils.js","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\ui\\ChatHeader\\index.jsx","D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\client\\node_modules\\sendbird-uikit\\src\\smart-components\\Conversation\\index.jsx"],"names":["RESET_MESSAGES","RESET_STATE","CLEAR_SENT_MESSAGES","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_NEXT_MESSAGES_SUCESS","GET_NEXT_MESSAGES_FAILURE","SEND_MESSAGEGE_START","SEND_MESSAGEGE_SUCESS","SEND_MESSAGEGE_FAILURE","RESEND_MESSAGEGE_START","ON_MESSAGE_RECEIVED","UPDATE_UNREAD_COUNT","ON_MESSAGE_UPDATED","ON_MESSAGE_THREAD_INFO_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","MARK_AS_READ","ON_REACTION_UPDATED","SET_EMOJI_CONTAINER","MESSAGE_LIST_PARAMS_CHANGED","getOutgoingMessageStates","UNDEFINED","SUCCEEDED","PENDING","getSendingMessageStatus","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","setTimeout","pubSubHandleRemover","subscriber","s","pubSubHandler","pubSub","channel","message","msg","channelUrl","dispatcher","type","payload","fromSelector","messageId","isOperator","groupChannel","myRole","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","myMutedState","getEmojiCategoriesFromEmojiContainer","emojiContainer","getAllEmojisFromEmojiContainer","emojiCategories","allEmojis","categoryIndex","emojis","emojiIndex","getEmojisFromEmojiContainer","emojiCategoryId","emojiCategory","getAllEmojisMapFromEmojiContainer","allEmojisMap","key","url","getNicknamesMapFromMembers","members","nicknamesMap","memberIndex","userId","nickname","getMessageCreatedAt","format","isSameGroup","comparingMessage","compareMessagesForGrouping","sendingStatus","isAcceptable","hasOwnProperty","passUnsuccessfullMessages","newMessage","lastIndexOfSucceededMessage","allMessages","messages","pxToNumber","parsed","Number","initialized","loading","currentGroupChannel","hasMore","lastMessageTimeStamp","hasMoreToBottom","latestFetchedMessageTimeStamp","unreadCount","unreadSince","isInvalid","messageListParams","FAILED","action","m","receivedMessages","stateChannel","state","stateChannelUrl","actionChannelUrl","duplicatedMessageIds","updatedAllMessages","duplicatedMessage","compareIds","filteredNewMessages","hasHasMoreToBottom","hasLatestFetchedMessageTimeStamp","newMessages","a","b","currentGroupChannelUrl","scrollToEnd","filterMessageListParams","event","threadInfo","targetMessageId","sdkInit","messagesDispatcher","sdk","logger","scrollRef","setQuoteMessage","useEffect","messageReceiverId","uuidv4","ChannelHandler","current","reactionEvent","e","messageActionTypes","emojiContainer_","PREV_RESULT_SIZE","NEXT_RESULT_SIZE","getLatestMessageTimeStamp","latestMessage","userFilledMessageListQuery","intialTimeStamp","replyType","Object","nextMessageListParams","nextMessages","utils","isOnline","wasOffline","useReaction","messageListParams_1","lastMessageTime","useCallback","appInfo","hasMoreMessages","lastMessageTs","cb","RESULT_SIZE","messagesLength","requestState","reqId","onBeforeUpdateUserMessage","createParamsDefault","params","createCustomPrams","swapParams","err","messageType","file","failedMessage","console","onBeforeSendUserMessage","messageInputRef","useRef","sendMessage","quoteMessage","text","txt","pendingMsg","error","onBeforeSendFileMessage","imageCompression","compressionRate","resizingWidth","resizingHeight","createCustomParams","compressibleFileType","compressibleRatio","compressibleDiamensions","canCompressImage","image","URL","canvas","imageWdith","imageHeight","targetWidth","targetHeight","context","compressedFile","pendingMessage","ReactionButton","className","width","height","selected","onClick","children","props","Array","PropTypes","isRequired","toggleReaction","emojiAllList","useMemo","parentRef","parentContainRef","closeDropdown","spaceFromTrigger","reactedReaction","reaction","emoji","isReacted","IconTypes","QUESTION","setIntialTimeStamp","setAnimatedMessageId","isPresent","MessageStatusTypes","dateLocale","useContext","showMessageStatusIcon","iconType","iconColor","IconColors","messageStatus","getOutgoingMessageState","isSentStatus","LabelTypography","LabelColors","ONBACKGROUND_2","locale","MessageStatus","createdAt","sender","friendName","profileUrl","string","isGroupChannel","isSuper","isBroadcast","isPublic","getUnreadMemberCount","getUndeliveredMemberCount","func","MessageItemMenu","_a","_c","_d","showEdit","showRemove","resendMessage","setSupposedHover","triggerRef","containerRef","showMenuItemCopy","isUserMessage","showMenuItemReply","isFailedMessage","isPendingMessage","showMenuItemEdit","isSentMessage","showMenuItemResend","showMenuItemDelete","getClassName","toggleDropdown","close","isByMe","copyToClipboard","stringSet","MessageItemReactionMenu","_b","filter","some","style","ONCONTENT_1","Tooltip","SPACE_FROM_TRIGGER","hoverTooltip","showHoverTooltip","setShowHoverTooltip","useState","childrenRef","bottom","left","TooltipWrapper","ReactionBadge","count","isAdd","getClassNameTail","ONBACKGROUND_1","EmojiReactions2","memberNicknamesMap","_e","emojisMap","getEmojiMapAll","addReactionRef","reactedByMe","isReactedBy","React","getEmojiTooltipString","AdminMessage","isAdminMessage","TextMessageItemBody","mouseHover","isEditedMessage","FileMessageItemBody","IMAGE","VIDEO","AUDIO","GIF","OTHERS","FILE_DOCUMENT","getUIKitFileType","window","truncateString","ThumbnailMessageItemBody","showFileViewer","thumbnailUrl","thumbnails","imageRendered","setImageRendered","isVideoMessage","isGifMessage","OGMessageItemBody","_k","_l","openOGUrl","isUrl","word","UnknownMessageItemBody","QuoteMessage","_p","_q","parentMessageSender","parentMessageSenderNickname","parentMessageUrl","parentMessageType","currentMessageSenderNickname","isThumbnailLoaded","setThumbnailLoaded","uikitFileTypes","getUIKitFileTypes","splitFileName","parentMessage","ONBACKGROUND_3","isThumbnailMessage","isVideo","isGif","isFileMessage","isSupportedFileView","PHOTO","PLAY","FILE_AUDIO","MessageContent","_f","_g","_h","_j","scrollToMessage","messageTypes","getUIKitMessageTypes","disableUserProfile","renderUserProfile","avatarRef","setMouseHover","supposedHover","isByMeClassName","chainTopClassName","chainTop","useReactionClassName","supposedHoverClassName","useReplying","useReplyingClassName","paddingTop","paddingBottom","user","getSenderName","isTextMessage","isOGMessage","getUIKitMessageType","RemoveMessage","onCloseModal","onDeleteMessage","ButtonTypes","MODAL__DELETE_MESSAGE__TITLE","replyCount","number","disabled","editDisabled","hasSeparator","deleteMessage","updateMessage","chainBottom","membersMap","animatedMessageId","highLightedMessageId","renderCustomMessage","handleScroll","setShowEdit","setShowRemove","setShowFileViewer","isAnimated","setIsAnimated","isHighlighted","setIsHighlighted","editMessageInputRef","useMessageScrollRef","useLayoutEffect","block","inline","RenderedMessage","marginBottom","MessageHoc","isDateseparator","ogMetaData","parentMessageId","reactions","SCROLL_REF_CLASS_NAME","ConversationScroll","Component","scrollBottom","onScroll","onScrollDown","element","scrollTop","clientHeight","scrollHeight","nodes","first","last","offsetHeight","emojiAllMap","renderChatItem","useMessageGrouping","memoizedEmojiListItems","showScrollBot","onClickScrollBot","PlaceHolderTypes","NO_MESSAGES","previousMessage","idx","nextMessage","previousMessageCreatedAt","currentCreatedAt","isSameDay","onUpdateMessage","onResendMessage","onScrollToMessage","onReplyMessage","menuDisabled","PRIMARY","markAsRead","time","timeArray","CAPTION_2","CONTENT","Notification","FrozenNotification","TypingIndicatorText","sb","handlerId","setHandlerId","typingMembers","setTypingMembers","newHandlerId","handler","TypingIndicator","removeChannelHandler","addChannelHandler","info","componentClassname","QuoteMessageThumbnail","isImageMessage","isAudioMessage","QuoteMessageInput","replyingMessage","onClose","fileMessage","MessageInputWrapper","onSendMessage","onFileUpload","renderMessageInput","getChannelTitle","currentUserId","LabelStringSet","noop","currentUser","title","subTitle","isMuted","theme","showSearchIcon","onSearchClick","onActionClick","ChatHeader","coverUrl","ConversationPanel","sdkStore","userStore","reconnect","queries","startingPoint","highlightedMessage","renderChatHeader","onChatHeaderActionClick","config","sdkError","setHighLightedMessageId","messagesStore","useReducer","readStatus","usingReaction","userDefinedDisableUserProfile","userDefinedRenderProfile","onScrollCallback","useScrollCallback","useScrollToMessage","onScrollDownCallback","useScrollDownCallback","useToggleReactionCallback","useMemoizedEmojiListItems","useGetChannel","useHandleChannelEvents","useInitialMessagesFetch","subScriber","useHandleReconnect","useDeleteMessageCallback","useUpdateMessageCallback","useResendMessageCallback","useSendMessageCallback","onSendFileMessage","useSendFileMessageCallback","NO_CHANNELS","WRONG","LOADING","stores","getErrorFirstCallback","GroupChannel","UserMessageParams","FileMessageParams","getAllEmoji","bool","dispatchers","warning","subscribe","publish","includeMetaArray","includeParentMessageText","includeReaction","includeReplies","includeThreadInfo","limit","reverse","senderUserIdsFilter","withSendbirdContext"],"mappings":"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","sourcesContent":["export const RESET_MESSAGES = 'RESET_MESSAGES';\nexport const RESET_STATE = 'RESET_STATE';\nexport const CLEAR_SENT_MESSAGES = 'CLEAR_SENT_MESSAGES';\nexport const GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nexport const GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nexport const GET_PREV_MESSAGES_FAILURE = 'GET_PREV_MESSAGES_FAILURE';\nexport const GET_NEXT_MESSAGES_SUCESS = 'GET_NEXT_MESSAGES_SUCESS';\nexport const GET_NEXT_MESSAGES_FAILURE = 'GET_NEXT_MESSAGES_FAILURE';\n\nexport const SEND_MESSAGEGE_START = 'SEND_MESSAGEGE_START';\nexport const SEND_MESSAGEGE_SUCESS = 'SEND_MESSAGEGE_SUCESS';\nexport const SEND_MESSAGEGE_FAILURE = 'SEND_MESSAGEGE_FAILURE';\n\nexport const RESEND_MESSAGEGE_START = 'RESEND_MESSAGEGE_START';\n\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const UPDATE_UNREAD_COUNT = 'UPDATE_UNREAD_COUNT';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const MARK_AS_READ = 'MARK_AS_READ';\n\nexport const ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nexport const SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\n\nexport const MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\n","import format from 'date-fns/format';\nimport * as channelActions from './dux/actionTypes';\nimport * as topics from '../../lib/pubSub/topics';\n\nimport {\n  getSendingMessageStatus,\n  getOutgoingMessageStates,\n} from '../../utils';\n\nconst MessageStatusType = getOutgoingMessageStates();\nconst UNDEFINED = 'undefined';\nconst { SUCCEEDED, FAILED, PENDING } = getSendingMessageStatus();\n\nexport const scrollIntoLast = (intialTry = 0) => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-conversation__messages-padding');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (channelUrl, pubSub, dispatcher) => {\n  const subscriber = new Map();\n  if (!pubSub || !pubSub.subscribe) return subscriber;\n  subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast();\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel, message } = msg;\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_START,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast();\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message, fromSelector } = msg;\n    if (fromSelector && channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_UPDATED,\n        payload: { channel, message },\n      });\n    }\n  }));\n  subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n    const { channel, messageId } = msg;\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_DELETED,\n        payload: messageId,\n      });\n    }\n  }));\n\n  return subscriber;\n};\n\nexport const getParsedStatus = (message, currentGroupChannel) => {\n  if (message.requestState === FAILED) {\n    return MessageStatusType.FAILED;\n  }\n\n  if (message.requestState === PENDING) {\n    return MessageStatusType.PENDING;\n  }\n\n  if (message.requestState === SUCCEEDED) {\n    if (!currentGroupChannel) {\n      return MessageStatusType.SENT;\n    }\n\n    const unreadCount = currentGroupChannel.getReadReceipt(message);\n    if (unreadCount === 0) {\n      return MessageStatusType.READ;\n    }\n\n    const isDelivered = currentGroupChannel.getDeliveryReceipt(message) === 0;\n    if (isDelivered) {\n      return MessageStatusType.DELIVERED;\n    }\n\n    return MessageStatusType.SENT;\n  }\n\n  return null;\n};\n\nexport const isOperator = (groupChannel = {}) => {\n  const { myRole } = groupChannel;\n  return myRole === 'operator';\n};\n\nexport const isDisabledBecauseFrozen = (groupChannel = {}) => {\n  const { isFrozen } = groupChannel;\n  return isFrozen && !isOperator(groupChannel);\n};\n\nexport const isDisabledBecauseMuted = (groupChannel = {}) => {\n  const { myMutedState } = groupChannel;\n  return myMutedState === 'muted';\n};\n\nexport const getEmojiCategoriesFromEmojiContainer = (emojiContainer = {}) => (\n  emojiContainer.emojiCategories ? emojiContainer.emojiCategories : []\n);\n\nexport const getAllEmojisFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojis = [];\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      allEmojis.push(emojis[emojiIndex]);\n    }\n  }\n  return allEmojis;\n};\n\nexport const getEmojisFromEmojiContainer = (emojiContainer = {}, emojiCategoryId = '') => (\n  emojiContainer.emojiCategories\n    ? emojiContainer.emojiCategories\n      .filter((emojiCategory) => emojiCategory.id === emojiCategoryId)[0].emojis\n    : []\n);\n\nexport const getAllEmojisMapFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojisMap = new Map();\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      const { key, url } = emojis[emojiIndex];\n      allEmojisMap.set(key, url);\n    }\n  }\n  return allEmojisMap;\n};\n\nexport const getNicknamesMapFromMembers = (members = []) => {\n  const nicknamesMap = new Map();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nexport const getMessageCreatedAt = (message) => format(message.createdAt, 'p');\n\nexport const isSameGroup = (message, comparingMessage) => {\n  if (!(message\n    && comparingMessage\n    && message?.messageType !== 'admin'\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false;\n  }\n\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage,\n  currMessage,\n  nextMessage,\n) => {\n  const sendingStatus = currMessage?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage) && isAcceptable,\n    isSameGroup(currMessage, nextMessage) && isAcceptable,\n  ];\n};\n\nexport const hasOwnProperty = (property) => (payload) => {\n  // eslint-disable-next-line no-prototype-builtins\n  if (payload && payload.hasOwnProperty && payload.hasOwnProperty(property)) {\n    return true;\n  }\n  return false;\n};\n\nexport const passUnsuccessfullMessages = (allMessages, newMessage) => {\n  const { sendingStatus = UNDEFINED } = newMessage;\n  if (sendingStatus === SUCCEEDED || sendingStatus === PENDING) {\n    const lastIndexOfSucceededMessage = allMessages\n      .map((message) => (\n        message.sendingStatus\n        || ((message.isAdminMessage && message.isAdminMessage()) ? SUCCEEDED : UNDEFINED)\n      ))\n      .lastIndexOf(SUCCEEDED);\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      const messages = [...allMessages];\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n  return [\n    ...allMessages,\n    newMessage,\n  ];\n};\n\nexport const pxToNumber = (px) => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n\nexport default getParsedStatus;\n","export default {\n  initialized: false,\n  loading: false,\n  allMessages: [],\n  currentGroupChannel: { members: [] },\n  // for scrollup\n  hasMore: false,\n  lastMessageTimeStamp: 0,\n  // for scroll down\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMoreToBottom, onScrollDownCallback -> scroll down\n  // hasMore, onScrollCallback -> scroll up(default behavior)\n  hasMoreToBottom: false,\n  latestFetchedMessageTimeStamp: 0,\n  emojiContainer: {},\n  unreadCount: 0,\n  unreadSince: null,\n  isInvalid: false,\n  messageListParams: null,\n};\n","import format from 'date-fns/format';\n\nimport * as actionTypes from './actionTypes';\nimport initialState from './initialState';\n\nimport compareIds from '../../../utils/compareIds';\nimport { passUnsuccessfullMessages, hasOwnProperty } from '../utils';\nimport { filterMessageListParams, getSendingMessageStatus } from '../../../utils';\n\nconst {\n  SUCCEEDED,\n  FAILED,\n  PENDING,\n} = getSendingMessageStatus();\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actionTypes.RESET_STATE:\n      return initialState;\n    case actionTypes.RESET_MESSAGES:\n      return {\n        ...state,\n        // when user switches channel, if the previous channel `hasMore`\n        // the onScroll gets called twice, setting hasMore false prevents this\n        hasMore: false,\n        allMessages: [],\n      };\n    case actionTypes.GET_PREV_MESSAGES_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actionTypes.CLEAR_SENT_MESSAGES:\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages.filter((m) => (\n            m.sendingStatus !== SUCCEEDED\n          )),\n        ],\n      };\n    case actionTypes.GET_PREV_MESSAGES_SUCESS: {\n      const receivedMessages = action.payload.messages || [];\n      const { currentGroupChannel = {} } = action.payload;\n\n      const stateChannel = state.currentGroupChannel || {};\n      const stateChannelUrl = stateChannel.url;\n      const actionChannelUrl = currentGroupChannel.url;\n      if (actionChannelUrl !== stateChannelUrl) {\n        return state;\n      }\n\n      // remove duplicate messages\n      const duplicatedMessageIds = [];\n      const updatedAllMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = receivedMessages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? receivedMessages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : receivedMessages;\n\n      const hasHasMoreToBottom = hasOwnProperty('hasMoreToBottom')(action.payload);\n      const hasLatestFetchedMessageTimeStamp = hasOwnProperty('latestFetchedMessageTimeStamp')(action.payload);\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMore: action.payload.hasMore,\n        lastMessageTimeStamp: action.payload.lastMessageTimeStamp,\n        // if present change else, keep\n        ...(hasHasMoreToBottom && {\n          hasMoreToBottom: action.payload.hasMoreToBottom,\n        }),\n        ...(hasLatestFetchedMessageTimeStamp && {\n          latestFetchedMessageTimeStamp: action.payload.latestFetchedMessageTimeStamp,\n        }),\n        allMessages: [\n          ...filteredNewMessages,\n          ...updatedAllMessages,\n        ],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_SUCESS: {\n      const receivedMessages = action.payload.messages || [];\n      const { currentGroupChannel = {} } = action.payload;\n\n      const stateChannel = state.currentGroupChannel || {};\n      const stateChannelUrl = stateChannel.url;\n      const actionChannelUrl = currentGroupChannel.url;\n      if (actionChannelUrl !== stateChannelUrl) {\n        return state;\n      }\n\n      // remove duplicate messages\n      const duplicatedMessageIds = [];\n      const updatedAllMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = receivedMessages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? receivedMessages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : receivedMessages;\n\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMore: action.payload.hasMore,\n        lastMessageTimeStamp: action.payload.lastMessageTimeStamp,\n        hasMoreToBottom: action.payload.hasMoreToBottom,\n        latestFetchedMessageTimeStamp: action.payload.latestFetchedMessageTimeStamp,\n        allMessages: [\n          ...updatedAllMessages,\n          ...filteredNewMessages,\n        ],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_FAILURE: {\n      return { ...state };\n    }\n    case actionTypes.SEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          { ...action.payload },\n        ],\n      };\n    case actionTypes.SEND_MESSAGEGE_SUCESS: {\n      const newMessages = state.allMessages.map((m) => (\n        compareIds(m.reqId, action.payload.reqId) ? action.payload : m\n      ));\n      [...newMessages].sort((a, b) => (\n        (\n          a.sendingStatus\n          && b.sendingStatus\n          && a.sendingStatus === SUCCEEDED\n          && (\n            b.sendingStatus === PENDING\n            || b.sendingStatus === FAILED\n          )\n        ) ? -1 : 1\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_FAILURE: {\n      // eslint-disable-next-line no-param-reassign\n      action.payload.failed = true;\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    }\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      return {\n        ...state,\n        currentGroupChannel: action.payload,\n        isInvalid: false,\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.UPDATE_UNREAD_COUNT: {\n      const { channel } = action.payload;\n      const { currentGroupChannel = {}, unreadCount } = state;\n      const currentGroupChannelUrl = currentGroupChannel.url;\n      if (!compareIds(channel.url, currentGroupChannelUrl)) {\n        return state;\n      }\n      return {\n        ...state,\n        unreadSince: unreadCount + 1,\n      };\n    }\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message, scrollToEnd } = action.payload;\n      let unreadCount = 0;\n      const { currentGroupChannel = {}, unreadSince } = state;\n      const currentGroupChannelUrl = currentGroupChannel.url;\n\n      if (!compareIds(channel.url, currentGroupChannelUrl)) {\n        return state;\n      }\n      // Excluded overlapping messages\n      if (state.allMessages.some((msg) => msg.messageId === message.messageId)) {\n        return state;\n      }\n      // Filter by userFilledQuery\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        return state;\n      }\n\n      unreadCount = state.unreadCount + 1;\n      // reset unreadCount if have to scrollToEnd\n      if (scrollToEnd) {\n        unreadCount = 0;\n      }\n\n      if (message.isAdminMessage && message.isAdminMessage()) {\n        return {\n          ...state,\n          allMessages: passUnsuccessfullMessages(state.allMessages, message),\n        };\n      }\n      return {\n        ...state,\n        unreadCount,\n        unreadSince: (unreadCount === 1)\n          ? format(new Date(), 'p MMM dd')\n          : unreadSince,\n        allMessages: passUnsuccessfullMessages(state.allMessages, message),\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      const currentGroupChannelUrl = (state.currentGroupChannel && state.currentGroupChannel.url) || '';\n      if (!compareIds(channel.url, currentGroupChannelUrl)) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        // Delete the message if it doesn't match to the params anymore\n        return {\n          ...state,\n          allMessages: state.allMessages.filter((m) => (\n            !compareIds(m.messageId, message?.messageId)\n          )),\n        };\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.messageId, action.payload.message.messageId)\n            ? action.payload.message\n            : m\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_THREAD_INFO_UPDATED: {\n      const { channel, event } = action.payload;\n      const { channelUrl, threadInfo, targetMessageId } = event;\n      const currentGroupChannelUrl = (state.currentGroupChannel && state.currentGroupChannel.url) || '';\n      if (\n        !compareIds(channel.url, currentGroupChannelUrl)\n        || !compareIds(channel.url, channelUrl)\n      ) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, targetMessageId)) {\n            // eslint-disable-next-line no-param-reassign\n            m.threadInfo = threadInfo; // Upsert threadInfo to the target message\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.RESEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    case actionTypes.MARK_AS_READ:\n      return {\n        ...state,\n        unreadCount: 0,\n        unreadSince: null,\n      };\n    case actionTypes.ON_MESSAGE_DELETED:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.messageId, action.payload)\n        )),\n      };\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      return {\n        ...state,\n        emojiContainer: action.payload,\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, action.payload.messageId)) {\n            if (m.applyReactionEvent && typeof m.applyReactionEvent === 'function') {\n              m.applyReactionEvent(action.payload);\n            }\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.MESSAGE_LIST_PARAMS_CHANGED: {\n      return {\n        ...state,\n        messageListParams: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { useEffect } from 'react';\n\nimport * as messageActions from '../dux/actionTypes';\nimport { uuidv4 } from '../../../utils/uuid';\nimport compareIds from '../../../utils/compareIds';\nimport { scrollIntoLast } from '../utils';\n\n/**\n * Handles ChannelEvents and send values to dispatcher using messagesDispatcher\n * messagesDispatcher: Dispatcher\n * sdk: sdkInstance\n * logger: loggerInstance\n * channelUrl: string\n * sdkInit: bool\n */\nfunction useHandleChannelEvents({ currentGroupChannel, sdkInit, hasMoreToBottom }, {\n  messagesDispatcher,\n  sdk,\n  logger,\n  scrollRef,\n  setQuoteMessage,\n}) {\n  const channelUrl = currentGroupChannel && currentGroupChannel?.url;\n  useEffect(() => {\n    const messageReceiverId = uuidv4();\n    if (channelUrl && sdk && sdk.ChannelHandler) {\n      const ChannelHandler = new sdk.ChannelHandler();\n      logger.info('Channel | useHandleChannelEvents: Setup event handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = (channel, message) => {\n        // donot update if hasMoreToBottom\n        if (compareIds(channel.url, channelUrl) && !hasMoreToBottom) {\n          let scrollToEnd = false;\n          try {\n            const { current } = scrollRef;\n            scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight;\n          } catch (error) {\n            //\n          }\n\n          logger.info('Channel | useHandleChannelEvents: onMessageReceived', message);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_RECEIVED,\n            payload: { channel, message, scrollToEnd },\n          });\n\n          if (scrollToEnd) {\n            try {\n              setTimeout(() => {\n                try {\n                  currentGroupChannel.markAsRead();\n                } catch {\n                  //\n                }\n                scrollIntoLast();\n              });\n            } catch (error) {\n              logger.warning('Channel | onMessageReceived | scroll to end failed');\n            }\n          }\n        }\n        if (compareIds(channel.url, channelUrl) && hasMoreToBottom) {\n          messagesDispatcher({\n            type: messageActions.UPDATE_UNREAD_COUNT,\n            payload: { channel },\n          });\n        }\n      };\n\n      /**\n       * We need to update current channel with the channel,\n       * when onReadReceiptUpdated or onDeliveryReceiptUpdated are called,\n       * because cachedReadReceiptStatus and cachedDeliveryReceiptStatus properties were changed\n       */\n      ChannelHandler.onReadReceiptUpdated = (channel) => {\n        if (compareIds(channel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onReadReceiptUpdated', channel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: channel,\n          });\n        }\n      };\n      ChannelHandler.onDeliveryReceiptUpdated = (channel) => {\n        if (compareIds(channel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onDeliveryReceiptUpdated', channel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: channel,\n          });\n        }\n      };\n\n      ChannelHandler.onMessageUpdated = (channel, message) => {\n        logger.info('Channel | useHandleChannelEvents: onMessageUpdated', message);\n        messagesDispatcher({\n          type: messageActions.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      };\n\n      ChannelHandler.onThreadInfoUpdated = (channel, event) => {\n        logger.info('Channel | useHandleChannelEvents: onThreadInfoUpdated', event);\n        messagesDispatcher({\n          type: messageActions.ON_MESSAGE_THREAD_INFO_UPDATED,\n          payload: { channel, event },\n        });\n      };\n\n      ChannelHandler.onMessageDeleted = (_, messageId) => {\n        logger.info('Channel | useHandleChannelEvents: onMessageDeleted', messageId);\n        setQuoteMessage(null);\n        messagesDispatcher({\n          type: messageActions.ON_MESSAGE_DELETED,\n          payload: messageId,\n        });\n      };\n\n      ChannelHandler.onReactionUpdated = (_, reactionEvent) => {\n        logger.info('Channel | useHandleChannelEvents: onReactionUpdated', reactionEvent);\n        messagesDispatcher({\n          type: messageActions.ON_REACTION_UPDATED,\n          payload: reactionEvent,\n        });\n      };\n\n      ChannelHandler.onChannelChanged = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelChanged', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onChannelFrozen = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelFrozen', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onChannelUnfrozen = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelUnFrozen', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onUserMuted = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onUserMuted', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onUserUnmuted = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onUserUnmuted', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onUserBanned = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onUserBanned', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onOperatorUpdated = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onOperatorUpdated', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      // Add this channel event handler to the SendBird object.\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n    return () => {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('Channel | useHandleChannelEvents: Removing message reciver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    };\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useSetChannel({ channelUrl, sdkInit }, {\n  messagesDispatcher,\n  sdk,\n  logger,\n}) {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.GroupChannel) {\n      logger.info('Channel | useSetChannel fetching channel', channelUrl);\n      sdk.GroupChannel.getChannel(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Channel | useSetChannel fetched channel', groupChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n\n          logger.info('Channel: Mark as read', groupChannel);\n          // this order is important - this mark as read should update the event handler up above\n          try {\n            groupChannel.markAsRead();\n          } catch {\n            //\n          }\n        })\n        .catch((e) => {\n          logger.warning('Channel | useSetChannel fetch channel failed', { channelUrl, e });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n          });\n        });\n      sdk.getAllEmoji((emojiContainer_, err) => {\n        if (err) {\n          logger.error('Channel: Getting emojis failed', err);\n          return;\n        }\n        logger.info('Channel: Getting emojis success', emojiContainer_);\n        messagesDispatcher({\n          type: messageActionTypes.SET_EMOJI_CONTAINER,\n          payload: emojiContainer_,\n        });\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\nconst PREV_RESULT_SIZE = 30;\nconst NEXT_RESULT_SIZE = 10;\n\nconst getLatestMessageTimeStamp = (messages = []) => {\n  const latestMessage = messages[messages.length - 1];\n  return (latestMessage && latestMessage.createdAt) || null;\n};\n\nfunction useInitialMessagesFetch({\n  currentGroupChannel,\n  userFilledMessageListQuery,\n  intialTimeStamp,\n  replyType,\n}, {\n  sdk,\n  logger,\n  messagesDispatcher,\n}) {\n  const channelUrl = currentGroupChannel && currentGroupChannel.url;\n  useEffect(() => {\n    logger.info('Channel useInitialMessagesFetch: Setup started', currentGroupChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n    });\n\n    if (sdk && sdk.MessageListParams\n      && currentGroupChannel && currentGroupChannel.getMessagesByTimestamp) {\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = PREV_RESULT_SIZE;\n      messageListParams.isInclusive = true;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReaction = true;\n      if (replyType && replyType === 'QUOTE_REPLY') {\n        messageListParams.includeThreadInfo = true;\n        messageListParams.includeParentMessageInfo = true;\n        messageListParams.replyType = 'only_reply_to_channel';\n      }\n      if (userFilledMessageListQuery) {\n        Object.keys(userFilledMessageListQuery).forEach((key) => {\n          messageListParams[key] = userFilledMessageListQuery[key];\n        });\n      }\n      if ((replyType && replyType === 'QUOTE_REPLY') || userFilledMessageListQuery) {\n        logger.info('Channel useInitialMessagesFetch: Setup messageListParams', messageListParams);\n        messagesDispatcher({\n          type: messageActionTypes.MESSAGE_LIST_PARAMS_CHANGED,\n          payload: messageListParams,\n        });\n      }\n\n      logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n      messagesDispatcher({\n        type: messageActionTypes.GET_PREV_MESSAGES_START,\n      });\n\n      if (intialTimeStamp) {\n        messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n        currentGroupChannel.getMessagesByTimestamp(\n          intialTimeStamp,\n          messageListParams,\n        )\n          .then((messages) => {\n            const hasMore = (messages && messages.length > 0);\n            const lastMessageTimeStamp = hasMore\n              ? messages[0].createdAt\n              : null;\n            const latestFetchedMessageTimeStamp = getLatestMessageTimeStamp(messages);\n            // to make sure there are no more messages below\n            const nextMessageListParams = new sdk.MessageListParams();\n            nextMessageListParams.nextResultSize = NEXT_RESULT_SIZE;\n            nextMessageListParams.isInclusive = true;\n            nextMessageListParams.includeReplies = false;\n            nextMessageListParams.includeReaction = true;\n            if (replyType && replyType === 'QUOTE_REPLY') {\n              nextMessageListParams.includeThreadInfo = true;\n              nextMessageListParams.includeParentMessageInfo = true;\n              nextMessageListParams.replyType = 'only_reply_to_channel';\n            }\n            if (userFilledMessageListQuery) {\n              Object.keys(userFilledMessageListQuery).forEach((key) => {\n                nextMessageListParams[key] = userFilledMessageListQuery[key];\n              });\n            }\n            currentGroupChannel.getMessagesByTimestamp(\n              latestFetchedMessageTimeStamp || new Date().getTime(),\n              nextMessageListParams,\n            ).then((nextMessages) => {\n              messagesDispatcher({\n                type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n                payload: {\n                  messages,\n                  hasMore,\n                  lastMessageTimeStamp,\n                  currentGroupChannel,\n                  latestFetchedMessageTimeStamp,\n                  hasMoreToBottom: nextMessages && nextMessages.length > 0,\n                },\n              });\n            });\n          })\n          .catch((error) => {\n            logger.error('Channel: Fetching messages failed', error);\n            messagesDispatcher({\n              type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n              payload: {\n                messages: [],\n                hasMore: false,\n                lastMessageTimeStamp: 0,\n                currentGroupChannel,\n              },\n            });\n          })\n          .finally(() => {\n            if (!intialTimeStamp) {\n              setTimeout(() => utils.scrollIntoLast());\n            }\n            try {\n              currentGroupChannel.markAsRead();\n            } catch {\n              //\n            }\n          });\n      } else {\n        currentGroupChannel.getMessagesByTimestamp(\n          new Date().getTime(),\n          messageListParams,\n        )\n          .then((messages) => {\n            const hasMore = (messages && messages.length > 0);\n            const lastMessageTimeStamp = hasMore\n              ? messages[0].createdAt\n              : null;\n            const latestFetchedMessageTimeStamp = getLatestMessageTimeStamp(messages);\n            messagesDispatcher({\n              type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n              payload: {\n                messages,\n                hasMore,\n                lastMessageTimeStamp,\n                currentGroupChannel,\n                latestFetchedMessageTimeStamp,\n                hasMoreToBottom: false,\n              },\n            });\n          })\n          .catch((error) => {\n            logger.error('Channel: Fetching messages failed', error);\n            messagesDispatcher({\n              type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n              payload: {\n                messages: [],\n                hasMore: false,\n                lastMessageTimeStamp: 0,\n                currentGroupChannel,\n              },\n            });\n          })\n          .finally(() => {\n            if (!intialTimeStamp) {\n              setTimeout(() => utils.scrollIntoLast());\n            }\n            try {\n              currentGroupChannel.markAsRead();\n            } catch {\n              //\n            }\n          });\n      }\n    }\n  }, [channelUrl, userFilledMessageListQuery, intialTimeStamp]);\n  /**\n   * Note - useEffect(() => {}, [currentGroupChannel])\n   * was buggy, that is why we did\n   * const channelUrl = currentGroupChannel && currentGroupChannel.url;\n   * useEffect(() => {}, [channelUrl])\n   * Again, this hook is supposed to execute when currentGroupChannel changes\n   * The 'channelUrl' here is not the same memory reference from Conversation.props\n   */\n}\n\nexport default useInitialMessagesFetch;\n","import { useEffect } from 'react';\n\nimport * as utils from '../utils';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { Logger, Sdk } from '../../..';\nimport { GroupChannel } from 'sendbird';\n\ninterface DynamicParams {\n  isOnline: boolean;\n  replyType?: string;\n}\n\ninterface StaticParams {\n  logger: Logger;\n  sdk: Sdk;\n  currentGroupChannel: GroupChannel;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  userFilledMessageListQuery?: Record<string, any>;\n}\n\nfunction useHandleReconnect(\n  { isOnline, replyType }: DynamicParams,\n  {\n    logger,\n    sdk,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    const wasOffline = !isOnline;\n    return () => {\n      // state changed from offline to online\n      if (wasOffline && currentGroupChannel?.url) {\n        logger.info('Refreshing conversation state');\n        const useReaction = sdk?.appInfo?.isUsingReaction || false;\n\n        const messageListParams = new sdk.MessageListParams();\n        messageListParams.prevResultSize = 30;\n        messageListParams.isInclusive = true;\n        messageListParams.includeReplies = false;\n        messageListParams.includeReaction = useReaction;\n        if (replyType && replyType === 'QUOTE_REPLY') {\n          messageListParams.includeThreadInfo = true;\n          messageListParams.includeParentMessageInfo = true;\n          messageListParams.replyType = 'only_reply_to_channel';\n        }\n        if (userFilledMessageListQuery) {\n          Object.keys(userFilledMessageListQuery).forEach((key) => {\n            messageListParams[key] = userFilledMessageListQuery[key];\n          });\n        }\n        logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_START,\n          payload: null,\n        });\n\n        sdk.GroupChannel.getChannel(currentGroupChannel.url)\n          .then((groupChannel) => {\n            const lastMessageTime = new Date().getTime();\n\n            groupChannel.getMessagesByTimestamp(\n              lastMessageTime,\n              messageListParams,\n            )\n              .then((messages) => {\n                messagesDispatcher({\n                  type: messageActionTypes.CLEAR_SENT_MESSAGES,\n                  payload: null,\n                });\n\n                const hasMore = messages?.length > 0;\n                const lastMessageTimeStamp = hasMore\n                  ? messages[0].createdAt\n                  : null;\n                messagesDispatcher({\n                  type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n                  payload: {\n                    messages,\n                    hasMore,\n                    lastMessageTimeStamp,\n                    currentGroupChannel,\n                  },\n                });\n                setTimeout(() => utils.scrollIntoLast());\n              })\n              .catch((error) => {\n                logger.error('Channel: Fetching messages failed', error);\n              })\n              .finally(() => {\n                try {\n                  currentGroupChannel.markAsRead?.();\n                } catch {\n                  //\n                }\n              });\n          });\n      }\n    };\n  }, [isOnline, replyType]);\n}\n\nexport default useHandleReconnect;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useScrollCallback({\n  currentGroupChannel,\n  lastMessageTimeStamp,\n  userFilledMessageListQuery,\n  replyType,\n}, {\n  hasMore,\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMore) { return; }\n    const { appInfo = {} } = sdk;\n    const useReaction = appInfo.isUsingReaction || false;\n\n    const messageListParams = new sdk.MessageListParams();\n    messageListParams.prevResultSize = 30;\n    messageListParams.isInclusive = true;\n    messageListParams.includeReplies = false;\n    messageListParams.includeReaction = useReaction;\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = 'only_reply_to_channel';\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      lastMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        const hasMoreMessages = (messages && messages.length > 0);\n        const lastMessageTs = hasMoreMessages\n          ? messages[0].createdAt\n          : null;\n\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n          payload: {\n            messages,\n            hasMore: hasMoreMessages,\n            lastMessageTimeStamp: lastMessageTs,\n            currentGroupChannel,\n          },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n          payload: {\n            messages: [],\n            hasMore: false,\n            lastMessageTimeStamp: 0,\n            currentGroupChannel,\n          },\n        });\n        cb([null, error]);\n      })\n      .finally(() => {\n        try {\n          currentGroupChannel.markAsRead();\n        } catch {\n          //\n        }\n      });\n  }, [currentGroupChannel, lastMessageTimeStamp, replyType]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nconst RESULT_SIZE = 30;\n\nfunction useScrollDownCallback({\n  currentGroupChannel,\n  latestFetchedMessageTimeStamp,\n  userFilledMessageListQuery,\n  hasMoreToBottom,\n  replyType,\n}, {\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMoreToBottom) { return; }\n    const { appInfo = {} } = sdk;\n    const useReaction = appInfo.isUsingReaction || false;\n\n    const messageListParams = new sdk.MessageListParams();\n    messageListParams.nextResultSize = RESULT_SIZE;\n    messageListParams.isInclusive = true;\n    messageListParams.includeReplies = false;\n    messageListParams.includeReaction = useReaction;\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = 'only_reply_to_channel';\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching later messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      latestFetchedMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        const messagesLength = (messages && messages.length) || 0;\n        const hasMoreMessages = (messagesLength > 0)\n          && (messageListParams.nextResultSize === messagesLength);\n        const lastMessageTs = hasMoreMessages\n          ? messages[messages.length - 1].createdAt\n          : null;\n        messagesDispatcher({\n          type: messageActionTypes.GET_NEXT_MESSAGES_SUCESS,\n          payload: {\n            messages,\n            hasMoreToBottom: hasMoreMessages,\n            latestFetchedMessageTimeStamp: lastMessageTs,\n            currentGroupChannel,\n          },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching later messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.GET_NEXT_MESSAGES_FAILURE,\n          payload: {\n            messages: [],\n            hasMoreToBottom: false,\n            latestFetchedMessageTimeStamp: 0,\n            currentGroupChannel,\n          },\n        });\n        cb([null, error]);\n      })\n      .finally(() => {\n        try {\n          currentGroupChannel.markAsRead();\n        } catch {\n          //\n        }\n      });\n  }, [currentGroupChannel, latestFetchedMessageTimeStamp, hasMoreToBottom, replyType]);\n}\n\nexport default useScrollDownCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger }) {\n  return useCallback((message, cb) => {\n    logger.info('Channel | useDeleteMessageCallback: Deleting message', message);\n    const { requestState } = message;\n    logger.info('Channel | useDeleteMessageCallback: Deleting message requestState:', requestState);\n\n    // Message is only on local\n    if (requestState === 'failed' || requestState === 'pending') {\n      logger.info('Channel | useDeleteMessageCallback: Deleted message from local:', message);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId,\n      });\n      if (cb) { cb(); }\n      return;\n    }\n\n    // Message is on server\n    currentGroupChannel.deleteMessage(message, (err) => {\n      logger.info('Channel | useDeleteMessageCallback: Deleting message from remote:', requestState);\n      if (cb) { cb(err); }\n      if (!err) {\n        logger.info('Channel | useDeleteMessageCallback: Deleting message success!', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: message.messageId,\n        });\n      } else {\n        logger.warning('Channel | useDeleteMessageCallback: Deleting message failed!', err);\n      }\n    });\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as topics from '../../../lib/pubSub/topics';\n\nfunction useUpdateMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n  onBeforeUpdateUserMessage,\n}, {\n  logger,\n  pubSub,\n  sdk,\n}) {\n  return useCallback((messageId, text, cb) => {\n    const createParamsDefault = (txt) => {\n      const params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    const createCustomPrams = onBeforeUpdateUserMessage\n      && typeof onBeforeUpdateUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeUpdateUserMessage', onBeforeUpdateUserMessage);\n    }\n\n    const params = onBeforeUpdateUserMessage\n      ? onBeforeUpdateUserMessage(text)\n      : createParamsDefault(text);\n\n    currentGroupChannel.updateUserMessage(messageId, params, (r, e) => {\n      logger.info('Channel: Updating message!', params);\n      const swapParams = sdk.getErrorFirstCallback();\n      let message = r;\n      let err = e;\n      if (swapParams) {\n        message = e;\n        err = r;\n      }\n      if (cb) {\n        cb(err, message);\n      }\n      if (!err) {\n        logger.info('Channel: Updating message success!', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentGroupChannel,\n            message,\n          },\n        });\n        pubSub.publish(\n          topics.UPDATE_USER_MESSAGE,\n          {\n            message,\n            channel: currentGroupChannel,\n          },\n        );\n      } else {\n        logger.warning('Channel: Updating message failed!', err);\n      }\n    });\n  }, [currentGroupChannel.url, messagesDispatcher, onBeforeUpdateUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useResendMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n}, {\n  logger,\n}) {\n  return useCallback((failedMessage) => {\n    logger.info('Channel: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function'\n      && failedMessage.isResendable()\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESEND_MESSAGEGE_START,\n        payload: failedMessage,\n      });\n\n      // userMessage\n      if (messageType === 'user') {\n        currentGroupChannel\n          .resendUserMessage(failedMessage)\n          .then((message) => {\n            logger.info('Channel: Resending message success!', { message });\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending message failed!', { e });\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n        return;\n      }\n\n      if (messageType === 'file') {\n        currentGroupChannel\n          .resendFileMessage(failedMessage, file)\n          .then((message) => {\n            logger.info('Channel: Resending file message success!', { message });\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending file message failed!', { e });\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('Message is not resendable');\n      logger.warning('Message is not resendable', failedMessage);\n    }\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useResendMessageCallback;\n","import { useRef, useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport * as topics from '../../../lib/pubSub/topics';\n\nexport default function useSendMessageCallback({ currentGroupChannel, onBeforeSendUserMessage }, {\n  sdk,\n  logger,\n  pubSub,\n  messagesDispatcher,\n}) {\n  const messageInputRef = useRef(null);\n\n  const sendMessage = useCallback(\n    (quoteMessage = null) => {\n      const text = messageInputRef.current.value;\n      const createParamsDefault = (txt) => {\n        const message = (typeof txt === 'string') ? txt.trim() : txt;\n        const params = new sdk.UserMessageParams();\n        params.message = message;\n        if (quoteMessage) {\n          params.isReplyToChannel = true;\n          params.parentMessageId = quoteMessage.messageId;\n        }\n        return params;\n      };\n\n      const createCustomPrams = onBeforeSendUserMessage\n        && typeof onBeforeSendUserMessage === 'function';\n\n      if (createCustomPrams) {\n        logger.info('Channel: creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n\n      const params = onBeforeSendUserMessage\n        ? onBeforeSendUserMessage(text, quoteMessage)\n        : createParamsDefault(text);\n\n      logger.info('Channel: Sending message has started', params);\n      const pendingMsg = currentGroupChannel.sendUserMessage(params, (res, err) => {\n        const swapParams = sdk.getErrorFirstCallback();\n        let message = res;\n        let error = err;\n        if (swapParams) {\n          message = err;\n          error = res;\n        }\n        // sending params instead of pending message\n        // to make sure that we can resend the message once it fails\n        if (error) {\n          logger.warning('Channel: Sending message failed!', {\n            message,\n          });\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: message,\n          });\n          return;\n        }\n        logger.info('Channel: Sending message success!', message);\n        messagesDispatcher({\n          type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n          payload: message,\n        });\n      });\n      pubSub.publish(topics.SEND_MESSAGE_START, {\n        /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n        message: pendingMsg,\n        channel: currentGroupChannel,\n      });\n      setTimeout(() => utils.scrollIntoLast());\n    },\n    [currentGroupChannel, onBeforeSendUserMessage],\n  );\n\n  return [messageInputRef, sendMessage];\n}\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport * as topics from '../../../lib/pubSub/topics';\n\nexport default function useSendFileMessageCallback({\n  currentGroupChannel,\n  onBeforeSendFileMessage,\n  imageCompression = {},\n}, {\n  sdk,\n  logger,\n  pubSub,\n  messagesDispatcher,\n}) {\n  const sendMessage = useCallback((file, quoteMessage = null) => {\n    const {\n      compressionRate,\n      resizingWidth,\n      resizingHeight,\n    } = imageCompression;\n    const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n    const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n    const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n    // pxToNumber returns null if values are invalid\n    const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n      || utils.pxToNumber(resizingHeight);\n\n    const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n    const createParamsDefault = (file_) => {\n      const params = new sdk.FileMessageParams();\n      params.file = file_;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    if (canCompressImage) { // Using image compression\n      try {\n        const image = document.createElement('img');\n        image.src = URL.createObjectURL(file);\n        image.onload = () => {\n          URL.revokeObjectURL(image.src);\n          const canvas = document.createElement('canvas');\n          const imageWdith = image.naturalWidth || image.width;\n          const imageHeight = image.naturalHeight || image.height;\n\n          let targetWidth = utils.pxToNumber(resizingWidth) || imageWdith;\n          let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n          // In canvas.toBlob(callback, mimeType, qualityArgument)\n          // qualityArgument doesnt work\n          // so in case compressibleDiamensions are not present, we use ratio\n          if (file.type === 'image/png' && !compressibleDiamensions) {\n            targetWidth *= compressionRate;\n            targetHeight *= compressionRate;\n          }\n\n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          const context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, targetWidth, targetHeight);\n          context.canvas.toBlob(\n            (newImageBlob) => {\n              const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n              if (createCustomParams) {\n                logger.info('Channel: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n              const params = createCustomParams\n                ? onBeforeSendFileMessage(compressedFile, quoteMessage)\n                : createParamsDefault(compressedFile);\n              logger.info('Channel: Uploading file message start!', params);\n              const pendingMessage = currentGroupChannel.sendFileMessage(\n                params,\n                (response, err) => {\n                  const swapParams = sdk.getErrorFirstCallback();\n                  const [message, error] = swapParams ? [err, response] : [response, err];\n                  if (error) {\n                    // sending params instead of pending message\n                    // to make sure that we can resend the message once it fails\n                    logger.error('Channel: Sending file message failed!', { message, error });\n                    message.localUrl = URL.createObjectURL(compressedFile);\n                    message.file = compressedFile;\n                    messagesDispatcher({\n                      type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n                      payload: message,\n                    });\n                    return;\n                  }\n                  logger.info('Channel: Sending file message success!', message);\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n                    payload: message,\n                  });\n                },\n              );\n              pubSub.publish(topics.SEND_MESSAGE_START, {\n                /* pubSub is used instead of messagesDispatcher\n                  to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n                message: {\n                  ...pendingMessage,\n                  url: URL.createObjectURL(compressedFile),\n                  // pending thumbnail message seems to be failed\n                  requestState: 'pending',\n                },\n                channel: currentGroupChannel,\n              });\n              setTimeout(() => utils.scrollIntoLast(), 1000);\n            },\n            file.type,\n            compressionRate,\n          );\n        };\n      } catch (error) {\n        logger.error('Channel: Sending file message failed!', error);\n      }\n    } else { // Not using image compression\n      if (createCustomParams) {\n        logger.info('Channel: creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n      }\n      const params = onBeforeSendFileMessage\n        ? onBeforeSendFileMessage(file, quoteMessage)\n        : createParamsDefault(file);\n      logger.info('Channel: Uploading file message start!', params);\n\n      const pendingMsg = currentGroupChannel.sendFileMessage(params, (response, err) => {\n        const swapParams = sdk.getErrorFirstCallback();\n        const [message, error] = swapParams ? [err, response] : [response, err];\n        if (error) {\n          // sending params instead of pending message\n          // to make sure that we can resend the message once it fails\n          logger.error('Channel: Sending file message failed!', { message, error });\n          message.localUrl = URL.createObjectURL(file);\n          message.file = file;\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: message,\n          });\n          return;\n        }\n        logger.info('Channel: Sending message success!', message);\n        messagesDispatcher({\n          type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n          payload: message,\n        });\n      });\n      pubSub.publish(topics.SEND_MESSAGE_START, {\n        /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n        message: {\n          ...pendingMsg,\n          url: URL.createObjectURL(file),\n          // pending thumbnail message seems to be failed\n          requestState: 'pending',\n        },\n        channel: currentGroupChannel,\n      });\n      setTimeout(() => utils.scrollIntoLast(), 1000);\n    }\n  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);\n  return [sendMessage];\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst ReactionButton = React.forwardRef((props, ref) => {\n  const {\n    className,\n    width,\n    height,\n    selected,\n    onClick,\n    children,\n  } = props;\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        `sendbird-reaction-button${selected ? '--selected' : ''}`,\n      ].join(' ')}\n      ref={ref}\n      role=\"button\"\n      style={{\n        width: typeof width === 'string' ? `${width.slice(0, -2) - 2}px` : `${width - 2}px`,\n        height: typeof height === 'string' ? `${height.slice(0, -2) - 2}px` : `${height - 2}px`,\n      }}\n      onClick={(e) => onClick(e)}\n      onKeyDown={(e) => onClick(e)}\n      tabIndex={0}\n    >\n      <div className=\"sendbird-reaction-button__inner\">\n        {children}\n      </div>\n    </div>\n  );\n});\n\nReactionButton.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  width: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  height: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  selected: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.element.isRequired,\n};\n\nReactionButton.defaultProps = {\n  className: '',\n  width: '36px',\n  height: '36px',\n  selected: false,\n  onClick: () => { },\n};\n\nexport default ReactionButton;\n","import React, { useMemo } from 'react';\n\nimport { EmojiListItems } from '../../../ui/ContextMenu';\nimport ReactionButton from '../../../ui/ReactionButton';\nimport ImageRenderer from '../../../ui/ImageRenderer';\nimport Icon, { IconTypes } from '../../../ui/Icon';\n\nexport default function useMemoizedEmojiListItems({\n  emojiContainer, toggleReaction,\n}, {\n  useReaction,\n  logger,\n  userId,\n  emojiAllList,\n}) {\n  /* eslint-disable react/prop-types */\n  return useMemo(() => ({\n    parentRef,\n    parentContainRef,\n    message,\n    closeDropdown,\n    spaceFromTrigger = {},\n  }) => {\n    if (!useReaction || !(parentRef || parentContainRef || message || closeDropdown)) {\n      logger.warning('Channel: Invalid Params in memoizedEmojiListItems');\n      return null;\n    }\n\n    return (\n      <EmojiListItems\n        parentRef={parentRef}\n        parentContainRef={parentContainRef}\n        closeDropdown={closeDropdown}\n        spaceFromTrigger={spaceFromTrigger}\n      >\n        {\n          emojiAllList.map((emoji) => {\n            const reactedReaction = message.reactions\n              .filter((reaction) => reaction.key === emoji.key)[0];\n            const isReacted = reactedReaction\n              ? !(reactedReaction.userIds.indexOf(userId) < 0)\n              : false;\n            return (\n              <ReactionButton\n                key={emoji.key}\n                width=\"36px\"\n                height=\"36px\"\n                selected={isReacted}\n                onClick={() => {\n                  closeDropdown();\n                  toggleReaction(message, emoji.key, isReacted);\n                }}\n              >\n                <ImageRenderer\n                  url={emoji.url}\n                  width=\"28px\"\n                  height=\"28px\"\n                  defaultComponent={\n                    <Icon width=\"28px\" height=\"28px\" type={IconTypes.QUESTION} />\n                  }\n                />\n              </ReactionButton>\n            );\n          })\n        }\n      </EmojiListItems>\n    );\n  }, [emojiContainer, toggleReaction]);\n}\n","import { useCallback } from 'react';\n\nexport default function useToggleReactionCallback({ currentGroupChannel }, { logger }) {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentGroupChannel.deleteReaction(message, key)\n        .then((res) => {\n          logger.info('Delete reaction success', res);\n        })\n        .catch((err) => {\n          logger.warning('Delete reaction failed', err);\n        });\n      return;\n    }\n    currentGroupChannel.addReaction(message, key)\n      .then((res) => {\n        logger.info('Add reaction success', res);\n      })\n      .catch((err) => {\n        logger.warning('Add reaction failed', err);\n      });\n  }, [currentGroupChannel]);\n}\n","import { useCallback } from 'react';\nimport { SendbirdTypes } from '../../../types';\nimport { Logger } from '../../../index';\n\ninterface DynamicParams {\n  setIntialTimeStamp(ts: number): null;\n  setAnimatedMessageId(id: number): null;\n  allMessages: SendbirdTypes['BaseMessageInstance'][];\n}\n\ninterface StaticParams {\n  logger: Logger;\n}\n\nfunction useScrollToMessage({\n  setIntialTimeStamp,\n  setAnimatedMessageId,\n  allMessages,\n}: DynamicParams,\n  { logger }: StaticParams,\n): (createdAt: number, messageId: number) => void {\n  return useCallback(\n    (createdAt: number, messageId: number) => {\n      const isPresent = allMessages.find((m) => (\n        m.messageId === messageId\n      ));\n      setAnimatedMessageId(null);\n      setTimeout(() => {\n        if (isPresent) {\n          logger.info('Channel: scroll to message - message is present');\n          setAnimatedMessageId(messageId);\n        } else {\n          logger.info('Channel: scroll to message - fetching older messages');\n          setIntialTimeStamp(null);\n          setIntialTimeStamp(createdAt);\n          setAnimatedMessageId(messageId);\n        }\n      });\n    }, [\n    setIntialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n  ],\n  );\n}\n\nexport default useScrollToMessage;\n","import React, { useContext, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport format from 'date-fns/format';\n\nimport './index.scss';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport Loader from '../Loader';\n\nimport {\n  getOutgoingMessageState,\n  getOutgoingMessageStates,\n  isSentStatus,\n} from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nexport const MessageStatusTypes = getOutgoingMessageStates();\nexport default function MessageStatus({\n  className,\n  message,\n  channel,\n}) {\n  const { dateLocale } = useContext(LocalizationContext);\n  const showMessageStatusIcon = channel?.isGroupChannel()\n    && !channel?.isSuper\n    && !channel?.isPublic\n    && !channel?.isBroadcast;\n  const iconType = {\n    [MessageStatusTypes.SENT]: IconTypes.DONE,\n    [MessageStatusTypes.DELIVERED]: IconTypes.DONE_ALL,\n    [MessageStatusTypes.READ]: IconTypes.DONE_ALL,\n    [MessageStatusTypes.FAILED]: IconTypes.ERROR,\n  };\n  const iconColor = {\n    [MessageStatusTypes.SENT]: IconColors.SENT,\n    [MessageStatusTypes.DELIVERED]: IconColors.SENT,\n    [MessageStatusTypes.READ]: IconColors.READ,\n    [MessageStatusTypes.FAILED]: IconColors.ERROR,\n  };\n\n  const messageStatus = useMemo(() => (\n    getOutgoingMessageState(channel, message)\n  ), [channel?.getUnreadMemberCount?.(message), channel?.getUndeliveredMemberCount?.(message)]);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-message-status',\n      ].join(' ')}\n    >\n      {(showMessageStatusIcon) && (\n        (messageStatus === MessageStatusTypes.PENDING) ? (\n          <Loader\n            className=\"sendbird-message-status__icon\"\n            width=\"16px\"\n            height=\"16px\"\n          >\n            <Icon\n              type={IconTypes.SPINNER}\n              fillColor={IconColors.PRIMARY}\n              width=\"16px\"\n              height=\"16px\"\n            />\n          </Loader>\n        ) : (\n          <Icon\n            className=\"sendbird-message-status__icon\"\n            type={iconType[messageStatus] || IconTypes.ERROR}\n            fillColor={iconColor[messageStatus]}\n            width=\"16px\"\n            height=\"16px\"\n          />\n        )\n      )}\n      {isSentStatus(messageStatus) && (\n        <Label\n          className=\"sendbird-message-status__text\"\n          type={LabelTypography.CAPTION_3}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {format(message?.createdAt, 'p', { locale: dateLocale })}\n        </Label>\n      )}\n    </div>\n  );\n}\n\nMessageStatus.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  message: PropTypes.shape({\n    createdAt: PropTypes.number,\n    sender: PropTypes.shape({\n      friendName: PropTypes.string,\n      nickname: PropTypes.string,\n      userId: PropTypes.string,\n      profileUrl: PropTypes.string,\n    }),\n    sendingStatus: PropTypes.string,\n  }),\n  channel: PropTypes.shape({\n    isGroupChannel: PropTypes.func,\n    isSuper: PropTypes.bool,\n    isBroadcast: PropTypes.bool,\n    isPublic: PropTypes.bool,\n    getUnreadMemberCount: PropTypes.func,\n    getUndeliveredMemberCount: PropTypes.func,\n  }),\n};\n\nMessageStatus.defaultProps = {\n  className: '',\n  message: null,\n  channel: null,\n};\n","import React, { ReactElement, useContext, useRef } from 'react';\nimport { FileMessage, GroupChannel, OpenChannel, UserMessage } from 'sendbird';\nimport './index.scss';\n\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport {\n  getClassName,\n  copyToClipboard,\n  isUserMessage,\n  isSentMessage,\n  isFailedMessage,\n  isPendingMessage,\n} from '../../utils/index';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { ReplyType } from '../../index';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage | FileMessage;\n  channel: GroupChannel | OpenChannel;\n  isByMe?: boolean;\n  disabled?: boolean;\n  replyType?: ReplyType;\n  showEdit?: (bool: boolean) => void;\n  showRemove?: (bool: boolean) => void;\n  resendMessage?: (message: UserMessage | FileMessage) => void;\n  setQuoteMessage?: (message: UserMessage | FileMessage) => void;\n  setSupposedHover?: (bool: boolean) => void;\n}\n\nexport default function MessageItemMenu({\n  className,\n  message,\n  channel,\n  isByMe = false,\n  disabled = false,\n  replyType,\n  showEdit,\n  showRemove,\n  resendMessage,\n  setQuoteMessage,\n  setSupposedHover,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n\n  const showMenuItemCopy: boolean = isUserMessage(message as UserMessage);\n  const showMenuItemReply: boolean = replyType === 'QUOTE_REPLY' && !isFailedMessage(channel, message) && !isPendingMessage(channel, message);\n  const showMenuItemEdit: boolean = (isUserMessage(message as UserMessage) && isSentMessage(channel, message) && isByMe);\n  const showMenuItemResend: boolean = (isFailedMessage(channel, message) && message?.isResendable?.() && isByMe);\n  const showMenuItemDelete: boolean = !isPendingMessage(channel, message) && isByMe;\n\n  if (!(showMenuItemCopy || showMenuItemReply || showMenuItemEdit || showMenuItemResend || showMenuItemDelete)) {\n    return null;\n  }\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-item-menu'])}\n      ref={containerRef}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown: () => void): ReactElement => (\n          <IconButton\n            className=\"sendbird-message-item-menu__trigger\"\n            ref={triggerRef}\n            width=\"32px\"\n            height=\"32px\"\n            onClick={(): void => {\n              toggleDropdown();\n              setSupposedHover(true);\n            }}\n            onBlur={(): void => {\n              setSupposedHover(false);\n            }}\n          >\n            <Icon\n              className=\"sendbird-message-item-menu__trigger__icon\"\n              type={IconTypes.MORE}\n              fillColor={IconColors.CONTENT_INVERSE}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(close: () => void): ReactElement => {\n          const closeDropdown = (): void => {\n            close();\n            setSupposedHover(false);\n          };\n          return (\n            <MenuItems\n              className=\"sendbird-message-item-menu__list\"\n              parentRef={triggerRef}\n              parentContainRef={containerRef}\n              closeDropdown={closeDropdown}\n              openLeft={isByMe}\n            >\n              {showMenuItemCopy && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-copy\"\n                  onClick={() => {\n                    copyToClipboard((message as UserMessage)?.message);\n                    closeDropdown();\n                  }}\n                >\n                  {stringSet.MESSAGE_MENU__COPY}\n                </MenuItem>\n              )}\n              {showMenuItemReply && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-reply\"\n                  onClick={() => {\n                    setQuoteMessage(message);\n                    closeDropdown();\n                  }}\n                  disable={message?.parentMessageId > 0}\n                >\n                  {stringSet.MESSAGE_MENU__REPLY}\n                </MenuItem>\n              )}\n              {showMenuItemEdit && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-edit\"\n                  onClick={() => {\n                    if (!disabled) {\n                      showEdit(true);\n                      closeDropdown();\n                    }\n                  }}\n                >\n                  {stringSet.MESSAGE_MENU__EDIT}\n                </MenuItem>\n              )}\n              {showMenuItemResend && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-resend\"\n                  onClick={() => {\n                    if (!disabled) {\n                      resendMessage(message);\n                      closeDropdown();\n                    }\n                  }}\n                >\n                  {stringSet.MESSAGE_MENU__RESEND}\n                </MenuItem>\n              )}\n              {showMenuItemDelete && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-delete\"\n                  onClick={() => {\n                    if (!disabled) {\n                      showRemove(true);\n                      closeDropdown();\n                    }\n                  }}\n                  disable={message?.threadInfo?.replyCount > 0}\n                >\n                  {stringSet.MESSAGE_MENU__DELETE}\n                </MenuItem>\n              )}\n            </MenuItems>\n          );\n        }}\n      />\n    </div>\n  );\n}\n","import React, { ReactElement, useRef } from 'react';\nimport { FileMessage, UserMessage, Emoji, Reaction, EmojiContainer, GroupChannel, OpenChannel } from 'sendbird';\nimport './index.scss';\n\nimport ContextMenu, { EmojiListItems } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ImageRenderer from '../ImageRenderer';\nimport ReactionButton from '../ReactionButton';\nimport { getClassName, getEmojiListAll, isPendingMessage, isFailedMessage } from '../../utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage | FileMessage;\n  channel: GroupChannel | OpenChannel;\n  userId: string;\n  spaceFromTrigger?: Record<string, unknown>;\n  emojiContainer?: EmojiContainer;\n  toggleReaction?: (message: UserMessage | FileMessage, reactionKey: string, isReacted: boolean) => void;\n  setSupposedHover?: (bool: boolean) => void;\n}\n\nexport default function MessageItemReactionMenu({\n  className,\n  message,\n  channel,\n  userId,\n  spaceFromTrigger = {},\n  emojiContainer,\n  toggleReaction,\n  setSupposedHover,\n}: Props): ReactElement {\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n\n  if(isPendingMessage(channel, message) || isFailedMessage(channel, message)) {\n    return null;\n  }\n\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-item-reaction-menu'])}\n      ref={containerRef}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown: () => void): ReactElement => (\n          <IconButton\n            className=\"sendbird-message-item-reaction-menu__trigger\"\n            ref={triggerRef}\n            width=\"32px\"\n            height=\"32px\"\n            onClick={(): void => {\n              toggleDropdown();\n              setSupposedHover(true);\n            }}\n            onBlur={(): void => {\n              setSupposedHover(false);\n            }}\n          >\n            <Icon\n              className=\"sendbird-message-item-reaction-menu__trigger__icon\"\n              type={IconTypes.EMOJI_MORE}\n              fillColor={IconColors.CONTENT_INVERSE}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(close: () => void): ReactElement => {\n          const closeDropdown = (): void => {\n            close();\n            setSupposedHover(false);\n          };\n          return (\n            <EmojiListItems\n              parentRef={triggerRef}\n              parentContainRef={containerRef}\n              closeDropdown={closeDropdown}\n              spaceFromTrigger={spaceFromTrigger}\n            >\n              {getEmojiListAll(emojiContainer).map((emoji: Emoji): ReactElement => {\n                const isReacted: boolean = message?.reactions?.\n                  filter((reaction: Reaction) => reaction.key === emoji.key)[0]?.userIds?.\n                  some((reactorId: string) => reactorId === userId);\n                return (\n                  <ReactionButton\n                    key={emoji.key}\n                    width=\"36px\"\n                    height=\"36px\"\n                    selected={isReacted}\n                    onClick={() => {\n                      closeDropdown();\n                      toggleReaction(message, emoji.key, isReacted);\n                    }}\n                  >\n                    <ImageRenderer\n                      url={emoji.url}\n                      width=\"28px\"\n                      height=\"28px\"\n                      placeHolder={(style) => (\n                        <div style={style}>\n                          <Icon\n                            type={IconTypes.QUESTION}\n                            fillColor={IconColors.ON_BACKGROUND_3}\n                            width=\"28px\"\n                            height=\"28px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  </ReactionButton>\n                );\n              })}\n            </EmojiListItems>\n          );\n        }}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nimport Label, { LabelColors, LabelTypography } from '../Label';\n\nexport default function Tooltip({\n  className,\n  children,\n}) {\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-tooltip',\n      ].join(' ')}\n    >\n      <Label\n        className=\"sendbird-tooltip__text\"\n        type={LabelTypography.CAPTION_2}\n        color={LabelColors.ONCONTENT_1}\n      >\n        {children}\n      </Label>\n    </div>\n  );\n}\n\nTooltip.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.string,\n  ]),\n};\n\nTooltip.defaultProps = {\n  className: '',\n  children: '',\n};\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst SPACE_FROM_TRIGGER = 8;\n\nexport default function TooltipWrapper({\n  className,\n  children,\n  hoverTooltip,\n  // clickTooltip can be added later\n}) {\n  const [showHoverTooltip, setShowHoverTooltip] = useState(false);\n  const childrenRef = useRef(null);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-tooltip-wrapper',\n      ].join(' ')}\n      onMouseOver={() => { setShowHoverTooltip(true); }}\n      onFocus={() => { setShowHoverTooltip(true); }}\n      onMouseOut={() => { setShowHoverTooltip(false); }}\n      onBlur={() => { setShowHoverTooltip(false); }}\n    >\n      <div\n        className=\"sendbird-tooltip-wrapper__children\"\n        ref={childrenRef}\n      >\n        {children}\n      </div>\n      {\n        showHoverTooltip && (\n          <div\n            className=\"sendbird-tooltip-wrapper__hover-tooltip\"\n            style={{ bottom: `calc(100% + ${SPACE_FROM_TRIGGER}px)` }}\n          >\n            <div className=\"sendbird-tooltip-wrapper__hover-tooltip__inner\">\n              <div\n                className=\"sendbird-tooltip-wrapper__hover-tooltip__inner__tooltip-container\"\n                style={{ left: childrenRef.current && `calc(${childrenRef.current.offsetWidth / 2}px - 50%)` }}\n              >\n                {hoverTooltip}\n              </div>\n            </div>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nTooltipWrapper.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  children: PropTypes.element.isRequired,\n  hoverTooltip: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]).isRequired,\n};\nTooltipWrapper.defaultProps = {\n  className: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label, { LabelTypography, LabelColors } from '../Label';\n\nimport './index.scss';\n\nconst ReactionBadge = React.forwardRef((props, ref) => {\n  const {\n    className,\n    children,\n    count,\n    selected,\n    isAdd,\n    onClick,\n  } = props;\n\n  const getClassNameTail = () => {\n    if (selected && !isAdd) {\n      return '--selected';\n    }\n    if (isAdd) {\n      return '--is-add';\n    }\n    return '';\n  };\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        `sendbird-reaction-badge${getClassNameTail()}`,\n      ].join(' ')}\n      role=\"button\"\n      ref={ref}\n      onClick={onClick}\n      onKeyDown={onClick}\n      tabIndex={0}\n    >\n      <div className=\"sendbird-reaction-badge__inner\">\n        <div className=\"sendbird-reaction-badge__inner__icon\">\n          {children}\n        </div>\n        <Label\n          className={(children && count) && 'sendbird-reaction-badge__inner__count'}\n          type={LabelTypography.CAPTION_3}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {count}\n        </Label>\n      </div>\n    </div>\n  );\n});\n\nReactionBadge.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  children: PropTypes.element.isRequired,\n  count: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  selected: PropTypes.bool,\n  isAdd: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nReactionBadge.defaultProps = {\n  className: '',\n  count: '',\n  selected: false,\n  isAdd: false,\n  onClick: () => { },\n};\n\nexport default ReactionBadge;\n","import React, { ReactElement, useContext, useRef } from 'react';\nimport { Emoji, EmojiContainer, FileMessage, Reaction, UserMessage } from 'sendbird';\nimport './index.scss';\n\nimport Tooltip from '../Tooltip';\nimport TooltipWrapper from '../TooltipWrapper';\nimport ReactionBadge from '../ReactionBadge';\nimport ReactionButton from '../ReactionButton';\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport ContextMenu, { EmojiListItems } from '../ContextMenu';\n\nimport { getClassName, getEmojiListAll, getEmojiMapAll, getEmojiTooltipString, isReactedBy } from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  userId: string;\n  message: UserMessage | FileMessage;\n  emojiContainer: EmojiContainer;\n  memberNicknamesMap: Map<string, string>;\n  spaceFromTrigger?: Record<string, unknown>;\n  isByMe?: boolean;\n  toggleReaction?: (message: UserMessage | FileMessage, key: string, byMe: boolean) => void;\n}\n\nexport default function EmojiReactions2({\n  className,\n  userId,\n  message,\n  emojiContainer,\n  memberNicknamesMap,\n  spaceFromTrigger = {},\n  isByMe = false,\n  toggleReaction,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const emojisMap = getEmojiMapAll(emojiContainer);\n  const addReactionRef = useRef(null);\n\n  return (\n    <div className={getClassName([\n      className, 'sendbird-emoji-reactions',\n      isByMe ? 'outgoing' : 'incoming',\n    ])}>\n      {(message?.reactions?.length > 0) && (\n        message.reactions.map((reaction: Reaction): ReactElement => {\n          const reactedByMe = isReactedBy(userId, reaction);\n          return (\n            <TooltipWrapper\n              className=\"sendbird-emoji-reactions__reaction-badge\"\n              key={reaction?.key}\n              hoverTooltip={(reaction?.userIds?.length > 0) && (\n                <Tooltip>\n                  {getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet)}\n                </Tooltip>\n              )}\n            >\n              <ReactionBadge\n                count={reaction.userIds.length}\n                selected={reactedByMe}\n                onClick={() => toggleReaction(message, reaction.key, reactedByMe)}\n              >\n                <ImageRenderer\n                  circle\n                  url={emojisMap.get(reaction?.key)?.url || ''}\n                  width=\"20px\"\n                  height=\"20px\"\n                  defaultComponent={(\n                    <Icon width=\"20px\" height=\"20px\" type={IconTypes.QUESTION} />\n                  )}\n                />\n              </ReactionBadge>\n            </TooltipWrapper>\n          );\n        })\n      )}\n      {(message?.reactions?.length < emojisMap.size) && (\n        <ContextMenu\n          menuTrigger={(toggleDropdown: () => void): ReactElement => (\n            <ReactionBadge\n              className=\"sendbird-emoji-reactions__add-reaction-badge\"\n              ref={addReactionRef}\n              isAdd\n              onClick={toggleDropdown}\n            >\n              <Icon\n                type={IconTypes.EMOJI_MORE}\n                fillColor={IconColors.ON_BACKGROUND_3}\n                width=\"20px\"\n                height=\"20px\"\n              />\n            </ReactionBadge>\n          )}\n          menuItems={(closeDropdown: () => void): ReactElement => (\n            <EmojiListItems\n              parentRef={addReactionRef}\n              parentContainRef={addReactionRef}\n              closeDropdown={closeDropdown}\n              spacefromTrigger={spaceFromTrigger}\n            >\n              {getEmojiListAll(emojiContainer).map((emoji: Emoji): ReactElement => {\n                const isReacted: boolean = message?.reactions?.\n                  filter((reaction: Reaction): boolean => reaction.key === emoji.key)[0]?.userIds?.\n                  some((reactorId: string): boolean => reactorId === userId);\n                return (\n                  <ReactionButton\n                    key={emoji.key}\n                    width=\"36px\"\n                    height=\"36px\"\n                    selected={isReacted}\n                    onClick={(): void => {\n                      closeDropdown();\n                      toggleReaction(message, emoji.key, isReacted);\n                    }}\n                  >\n                    <ImageRenderer\n                      url={emoji?.url || ''}\n                      width=\"28px\"\n                      height=\"28px\"\n                      placeHolder={(style: Record<string, unknown>): ReactElement => (\n                        <div style={style}>\n                          <Icon\n                            type={IconTypes.QUESTION}\n                            fillColor={IconColors.ON_BACKGROUND_3}\n                            width=\"28px\"\n                            height=\"28px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  </ReactionButton>\n                );\n              })}\n            </EmojiListItems>\n          )}\n        />\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport Label, { LabelColors, LabelTypography } from '../Label';\n\nexport default function AdminMessage({\n  className,\n  message,\n}) {\n  if (!(message.isAdminMessage || message.messageType) || !message.isAdminMessage() || message.messageType !== 'admin') {\n    return null;\n  }\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-admin-message',\n      ].join(' ')}\n    >\n      <Label\n        className=\"sendbird-admin-message__text\"\n        type={LabelTypography.CAPTION_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {message.message}\n      </Label>\n    </div>\n  );\n}\n\nAdminMessage.propTypes = {\n  message: PropTypes.shape({\n    message: PropTypes.string,\n    messageType: PropTypes.string,\n    isAdminMessage: PropTypes.func,\n  }),\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n};\n\nAdminMessage.defaultProps = {\n  message: {},\n  className: '',\n};\n","import React, { ReactElement, useContext } from 'react';\nimport { UserMessage } from 'sendbird';\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport {\n  getClassName,\n  isEditedMessage,\n} from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n}\n\nexport default function TextMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <Label\n      type={LabelTypography.BODY_1}\n      color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n    >\n      <p className={getClassName([\n        className,\n        'sendbird-text-message-item-body',\n        isByMe ? 'outgoing' : 'incoming',\n        mouseHover ? 'mouse-hover' : '',\n        message?.reactions?.length > 0 ? 'reactions' : '',\n      ])}>\n        {message?.message}\n        {\n          isEditedMessage(message) && (\n            <Label\n              className=\"sendbird-text-message-item-body__message edited\"\n              type={LabelTypography.BODY_1}\n              color={isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2}\n            >\n              {` ${stringSet.MESSAGE_EDITED} `}\n            </Label>\n          )\n        }\n      </p>\n    </Label>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { FileMessage } from 'sendbird';\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport TextButton from '../TextButton';\nimport { getClassName, getUIKitFileType, truncateString } from '../../utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: FileMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n}\n\nexport default function FileMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n}: Props): ReactElement {\n\n  return (\n    <div className={getClassName([\n      className,\n      'sendbird-file-message-item-body',\n      isByMe ? 'outgoing' : 'incoming',\n      mouseHover ? 'mouse-hover' : '',\n      message?.reactions?.length > 0 ? 'reactions' : '',\n    ])}>\n      <div className=\"sendbird-file-message-item-body__file-icon\">\n        <Icon\n          className={'sendbird-file-message-item-body__file-icon__icon'}\n          type={{\n            IMAGE: IconTypes.PHOTO,\n            VIDEO: IconTypes.PLAY,\n            AUDIO: IconTypes.FILE_AUDIO,\n            GIF: IconTypes.GIF,\n            OTHERS: IconTypes.FILE_DOCUMENT,\n          }[getUIKitFileType(message?.type)]}\n          fillColor={IconColors.PRIMARY}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </div>\n      <TextButton\n        className=\"sendbird-file-message-item-body__file-name\"\n        onClick={() => { window.open(message?.url) }}\n        color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n      >\n        <Label\n          className=\"sendbird-file-message-item-body__file-name__text\"\n          type={LabelTypography.BODY_1}\n          color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n        >\n          {truncateString(message?.name || message?.url)}\n        </Label>\n      </TextButton>\n    </div>\n  );\n}\n","import React, { ReactElement, useState } from 'react';\nimport { FileMessage } from 'sendbird';\nimport './index.scss';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport ImageRenderer from '../ImageRenderer';\nimport { getClassName, isGifMessage, isVideoMessage } from '../../utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: FileMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n  showFileViewer?: (bool: boolean) => void;\n}\n\nexport default function ThumbnailMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n  showFileViewer,\n}: Props): ReactElement {\n  const { thumbnails = [] } = message;\n  const thumbnailUrl: string = thumbnails.length > 0 ? thumbnails[0]?.url : '';\n  const [imageRendered, setImageRendered] = useState(false);\n\n  return (\n    <div\n      className={getClassName([\n        className,\n        'sendbird-thumbnail-message-item-body',\n        isByMe ? 'outgoing' : 'incoming',\n        mouseHover ? 'mouse-hover' : '',\n        message?.reactions?.length > 0 ? 'reactions' : '',\n      ])}\n      onClick={() => showFileViewer(true)}\n    >\n      <ImageRenderer\n        className=\"sendbird-thumbnail-message-item-body__thumbnail\"\n        url={thumbnailUrl || message?.url}\n        alt={message?.type}\n        width=\"360px\"\n        height=\"270px\"\n        onLoad={() => { setImageRendered(true) }}\n        placeHolder={(style) => (\n          <div\n            className=\"sendbird-thumbnail-message-item-body__placeholder\"\n            style={style}\n          >\n            <div className=\"sendbird-thumbnail-message-item-body__placeholder__icon\">\n              <Icon\n                type={isVideoMessage(message) ? IconTypes.PLAY : IconTypes.PHOTO}\n                fillColor={IconColors.ON_BACKGROUND_2}\n                width=\"34px\"\n                height=\"34px\"\n              />\n            </div>\n          </div>\n        )}\n      />\n      {\n        (isVideoMessage(message) && !thumbnailUrl) && !imageRendered && (\n          <video className=\"sendbird-thumbnail-message-item-body__video\">\n            <source src={message?.url} type={message?.type} />\n          </video>\n        )\n      }\n      <div className=\"sendbird-thumbnail-message-item-body__image-cover\" />\n      {\n        (isVideoMessage(message) || isGifMessage(message)) && (\n          <div className=\"sendbird-thumbnail-message-item-body__icon-wrapper\">\n            <div className=\"sendbird-thumbnail-message-item-body__icon-wrapper__icon\">\n              <Icon\n                type={isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF}\n                fillColor={IconColors.GRAY}\n                width=\"34px\"\n                height=\"34px\"\n              />\n            </div>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n","import React, { ReactElement, useContext } from 'react';\nimport { UserMessage } from 'sendbird';\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport LinkLabel from '../LinkLabel';\nimport Icon, { IconTypes } from '../Icon';\nimport ImageRenderer from '../ImageRenderer';\nimport {\n  getClassName,\n  isEditedMessage,\n  isUrl,\n} from '../../utils';\nimport uuidv4 from '../../utils/uuid';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n}\n\nexport default function OGMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const openOGUrl = (): void => {\n    if (message?.ogMetaData?.url) window.open(message?.ogMetaData?.url);\n  };\n\n  return (\n    <div className={getClassName([\n      className,\n      'sendbird-og-message-item-body',\n      isByMe ? 'outgoing' : 'incoming',\n      mouseHover ? 'mouse-hover' : '',\n      message?.reactions?.length > 0 ? 'reactions' : '',\n    ])}>\n      <Label\n        key={uuidv4()}\n        type={LabelTypography.BODY_1}\n        color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n      >\n        <p className=\"sendbird-og-message-item-body__text-bubble\">\n          {\n            message?.message.split(' ').map((word: string) => (\n              isUrl(word)\n                ? (\n                  <LinkLabel\n                    className=\"sendbird-og-message-item-body__text-bubble__message\"\n                    key={uuidv4()}\n                    src={word}\n                    type={LabelTypography.BODY_1}\n                    color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n                  >\n                    {word}\n                  </LinkLabel>\n                )\n                : (`${word} `)\n            ))\n          }\n          {\n            isEditedMessage(message) && (\n              <Label\n                className=\"sendbird-og-message-item-body__text-bubble__message\"\n                type={LabelTypography.BODY_1}\n                color={isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2}\n              >\n                {` ${stringSet.MESSAGE_EDITED} `}\n              </Label>\n            )\n          }\n        </p>\n      </Label>\n      <div\n        className=\"sendbird-og-message-item-body__og-thumbnail\"\n        onClick={openOGUrl}\n      >\n        <ImageRenderer\n          className=\"sendbird-og-message-item-body__og-thumbnail__image\"\n          url={message?.ogMetaData?.defaultImage?.url || ''}\n          alt={message?.ogMetaData?.defaultImage?.alt}\n          // TODO: Change fixing width and height lengths\n          width=\"320px\"\n          height=\"180px\"\n          defaultComponent={(\n            <div className=\"sendbird-og-message-item-body__og-thumbnail__place-holder\">\n              <Icon\n                className=\"sendbird-og-message-item-body__og-thumbnail__place-holder__icon\"\n                type={IconTypes.THUMBNAIL_NONE}\n                width=\"56px\"\n                height=\"56px\"\n              />\n            </div>\n          )}\n        />\n      </div>\n      <div\n        className=\"sendbird-og-message-item-body__description\"\n        onClick={openOGUrl}\n      >\n        {message?.ogMetaData?.title && (\n          <Label\n            className=\"sendbird-og-message-item-body__description__title\"\n            type={LabelTypography.SUBTITLE_2}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {message.ogMetaData.title}\n          </Label>\n        )}\n        {message?.ogMetaData?.description && (\n          <Label\n            className=\"sendbird-og-message-item-body__description__description\"\n            type={LabelTypography.BODY_2}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {message.ogMetaData.description}\n          </Label>\n        )}\n        {message?.ogMetaData?.url && (\n          <Label\n            className=\"sendbird-og-message-item-body__description__url\"\n            type={LabelTypography.CAPTION_3}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {message.ogMetaData.url}\n          </Label>\n        )}\n      </div>\n      <div className=\"sendbird-og-message-item-body__cover\" />\n    </div>\n  );\n}\n","import React, { ReactElement, useContext } from 'react';\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { CoreMessageType, getClassName } from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  isByMe?: boolean;\n  message: CoreMessageType;\n  mouseHover?: boolean;\n}\n\nexport default function UnknownMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className={getClassName([\n      className,\n      'sendbird-unknown-message-item-body',\n      isByMe ? 'outgoing' : 'incoming',\n      mouseHover ? 'mouse-hover' : '',\n      message?.reactions?.length > 0 ? 'reactions' : '',\n    ])}>\n      <Label\n        className=\"sendbird-unknown-message-item-body__header\"\n        type={LabelTypography.BODY_1}\n        color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n      >\n        {stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE}\n      </Label>\n      <Label\n        className=\"sendbird-unknown-message-item-body__description\"\n        type={LabelTypography.BODY_1}\n        color={isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2}\n      >\n        {stringSet.UNKNOWN__CANNOT_READ_MESSAGE}\n      </Label>\n    </div>\n  );\n}\n","import React, { ReactElement, useContext, useState } from 'react';\nimport { FileMessage, UserMessage } from 'sendbird';\nimport './index.scss';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport ImageRenderer from '../ImageRenderer';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport {\n  getClassName,\n  getUIKitFileType,\n  getUIKitFileTypes,\n  isFileMessage,\n  isGif,\n  isSupportedFileView,\n  isThumbnailMessage,\n  isUserMessage,\n  isVideo,\n  truncateString,\n} from '../../utils';\ninterface Props {\n  message?: UserMessage | FileMessage;\n  userId?: string;\n  isByMe?: boolean;\n  className?: string | Array<string>;\n  onClick?: () => void;\n}\n\nexport default function QuoteMessage({\n  message,\n  userId = '',\n  isByMe = false,\n  className,\n  onClick,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n\n  const { parentMessage } = message;\n  const parentMessageSender = (parentMessage as UserMessage | FileMessage)?.sender;\n  const parentMessageSenderNickname = (userId === parentMessageSender?.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : parentMessageSender?.nickname;\n  const parentMessageUrl = (parentMessage as FileMessage)?.url || '';\n  const parentMessageType = (parentMessage as FileMessage)?.type;\n  const currentMessageSenderNickname = (userId === message?.sender?.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : message?.sender?.nickname;\n\n  const [isThumbnailLoaded, setThumbnailLoaded] = useState(false);\n  const uikitFileTypes = getUIKitFileTypes();\n  const splitFileName = (parentMessage as FileMessage)?.name ? (parentMessage as FileMessage).name.split('/') : parentMessageUrl.split('/');\n\n  return (\n    <div\n      className={getClassName([className, 'sendbird-quote-message', isByMe ? 'outgoing' : 'incoming'])}\n      key={parentMessage?.messageId}\n      onClick={() => { if (onClick) onClick() }}\n    >\n      <div className=\"sendbird-quote-message__replied-to\">\n        <Icon\n          className=\"sendbird-quote-message__replied-to__icon\"\n          type={IconTypes.REPLY}\n          fillColor={IconColors.ON_BACKGROUND_3}\n          width=\"12px\"\n          height=\"12px\"\n        />\n        <Label\n          className=\"sendbird-quote-message__replied-to__text\"\n          type={LabelTypography.CAPTION_2}\n          color={LabelColors.ONBACKGROUND_3}\n        >\n          {`${currentMessageSenderNickname} ${stringSet.QUOTED_MESSAGE__REPLIED_TO} ${parentMessageSenderNickname}`}\n        </Label>\n      </div>\n      <div className=\"sendbird-quote-message__replied-message\">\n        {/* text message */}\n        {(isUserMessage(parentMessage as UserMessage) && (parentMessage as UserMessage)?.message?.length > 0) && (\n          <div className=\"sendbird-quote-message__replied-message__text-message\">\n            <Label\n              className=\"sendbird-quote-message__replied-message__text-message__word\"\n              type={LabelTypography.BODY_2}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {(parentMessage as UserMessage)?.message}\n            </Label>\n          </div>\n        )}\n        {/* thumbnail message */}\n        {(isThumbnailMessage(parentMessage as FileMessage) && parentMessageUrl) && (\n          <div className=\"sendbird-quote-message__replied-message__thumbnail-message\">\n            <ImageRenderer\n              className=\"sendbird-quote-message__replied-message__thumbnail-message__image\"\n              url={parentMessageUrl}\n              alt={parentMessageType}\n              width=\"144px\"\n              height=\"108px\"\n              onLoad={() => setThumbnailLoaded(true)}\n              defaultComponent={(\n                <div className=\"sendbird-quote-message__replied-message__thumbnail-message__placeholder\">\n                  <div className=\"sendbird-quote-message__replied-message__thumbnail-message__placeholder__icon\">\n                    <Icon\n                      type={isVideo(parentMessageType) ? IconTypes.PLAY : IconTypes.PHOTO}\n                      fillColor={IconColors.ON_BACKGROUND_2}\n                      width=\"22px\"\n                      height=\"22px\"\n                    />\n                  </div>\n                </div>\n              )}\n            />\n            {(isVideo(parentMessageType) && !((parentMessage as FileMessage)?.thumbnails?.length > 0)) && (\n              <>\n                <video className=\"sendbird-quote-message__replied-message__thumbnail-message__video\">\n                  <source src={parentMessageUrl} type={parentMessageType} />\n                </video>\n                <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover\">\n                  <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover__icon\">\n                    <Icon\n                      type={IconTypes.PLAY}\n                      fillColor={IconColors.GRAY}\n                      width=\"14px\"\n                      height=\"14px\"\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n            {(isThumbnailLoaded && isGif(parentMessageType)) && (\n              <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover\">\n                <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover__icon\">\n                  <Icon\n                    type={IconTypes.GIF}\n                    fillColor={IconColors.GRAY}\n                    width=\"14px\"\n                    height=\"14px\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n        {/* file message */}\n        {(isFileMessage(parentMessage as FileMessage) && !isSupportedFileView((parentMessage as FileMessage).type) && parentMessageUrl) && (\n          <div className=\"sendbird-quote-message__replied-message__file-message\">\n            <Icon\n              className=\"sendbird-quote-message__replied-message__file-message__type-icon\"\n              type={{\n                [uikitFileTypes.IMAGE]: IconTypes.PHOTO,\n                [uikitFileTypes.VIDEO]: IconTypes.PLAY,\n                [uikitFileTypes.AUDIO]: IconTypes.FILE_AUDIO,\n                [uikitFileTypes.GIF]: IconTypes.GIF,\n                [uikitFileTypes.OTHERS]: IconTypes.FILE_DOCUMENT,\n              }[getUIKitFileType(parentMessageType)]}\n              fillColor={IconColors.ON_BACKGROUND_3}\n              width=\"16px\"\n              height=\"16px\"\n            />\n            <Label\n              className=\"sendbird-quote-message__replied-message__file-message__file-name\"\n              type={LabelTypography.BODY_2}\n              color={LabelColors.ONBACKGROUND_3}\n            >\n              {truncateString(splitFileName[splitFileName.length - 1])}\n            </Label>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useRef,\n  useState,\n} from 'react';\nimport { GroupChannel, AdminMessage, UserMessage, FileMessage, EmojiContainer } from 'sendbird';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport UserProfile from '../UserProfile';\nimport MessageStatus from '../MessageStatus';\nimport MessageItemMenu from '../MessageItemMenu';\nimport MessageItemReactionMenu from '../MessageItemReactionMenu';\nimport ContextMenu, { MenuItems } from '../ContextMenu';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport EmojiReactions from '../EmojiReactions';\n\nimport ClientAdminMessage from '../AdminMessage';\nimport TextMessageItemBody from '../TextMessageItemBody';\nimport FileMessageItemBody from '../FileMessageItemBody';\nimport ThumbnailMessageItemBody from '../ThumbnailMessageItemBody';\nimport OGMessageItemBody from '../OGMessageItemBody';\nimport UnknownMessageItemBody from '../UnknownMessageItemBody';\nimport QuoteMessage from '../QuoteMessage';\n\nimport {\n  getClassName,\n  getUIKitMessageTypes,\n  getUIKitMessageType,\n  isTextMessage,\n  isOGMessage,\n  isThumbnailMessage,\n  getSenderName,\n} from '../../utils';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { ReplyType } from '../../index.js';\n\ninterface Props {\n  className?: string | Array<string>;\n  userId: string;\n  channel: GroupChannel;\n  message: AdminMessage | UserMessage | FileMessage;\n  disabled?: boolean;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  useReaction?: boolean;\n  replyType?: ReplyType;\n  nicknamesMap?: Map<string, string>;\n  emojiContainer?: EmojiContainer;\n  scrollToMessage?: (createdAt: number, messageId: number) => void;\n  showEdit?: (bool: boolean) => void;\n  showRemove?: (bool: boolean) => void;\n  showFileViewer?: (bool: boolean) => void;\n  resendMessage?: (message: UserMessage | FileMessage) => void;\n  toggleReaction?: (message: UserMessage | FileMessage, reactionKey: string, isReacted: boolean) => void;\n  setQuoteMessage?: (message: UserMessage | FileMessage) => void;\n}\nexport default function MessageContent({\n  className,\n  userId,\n  channel,\n  message,\n  disabled = false,\n  chainTop = false,\n  chainBottom = false,\n  useReaction = false,\n  replyType,\n  nicknamesMap,\n  emojiContainer,\n  scrollToMessage,\n  showEdit,\n  showRemove,\n  showFileViewer,\n  resendMessage,\n  toggleReaction,\n  setQuoteMessage,\n}: Props): ReactElement {\n  const messageTypes = getUIKitMessageTypes();\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const { dateLocale } = useContext(LocalizationContext);\n  const avatarRef = useRef(null);\n  const [mouseHover, setMouseHover] = useState(false);\n  const [supposedHover, setSupposedHover] = useState(false);\n\n  const isByMe = (userId === (message as UserMessage | FileMessage)?.sender?.userId)\n    || ((message as UserMessage | FileMessage).sendingStatus === 'pending')\n    || ((message as UserMessage | FileMessage).sendingStatus === 'failed');\n  const isByMeClassName = isByMe ? 'outgoing' : 'incoming';\n  const chainTopClassName = chainTop ? 'chain-top' : '';\n  const useReactionClassName = useReaction ? 'use-reactions' : '';\n  const supposedHoverClassName = supposedHover ? 'supposed-hover' : '';\n  const useReplying = !!((replyType === 'QUOTE_REPLY') && message?.parentMessageId && message?.parentMessage);\n  const useReplyingClassName = useReplying ? 'use-quote' : '';\n  if (message?.isAdminMessage?.() || message?.messageType === 'admin') {\n    return (<ClientAdminMessage message={message} />);\n  }\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-content', isByMeClassName])}\n      onMouseOver={() => setMouseHover(true)}\n      onMouseLeave={() => setMouseHover(false)}\n    >\n      {/* left */}\n      <div className={getClassName(['sendbird-message-content__left', useReactionClassName, isByMeClassName, useReplyingClassName])}>\n        {(!isByMe && !chainBottom) && (\n          /** user profile */\n          <ContextMenu\n            menuTrigger={(toggleDropdown: () => void): ReactElement => (\n              <Avatar\n                className=\"sendbird-message-content__left__avatar\"\n                src={message?.sender?.profileUrl || ''}\n                ref={avatarRef}\n                width=\"28px\"\n                height=\"28px\"\n                onClick={(): void => { if (!disableUserProfile) toggleDropdown() }}\n              />\n            )}\n            menuItems={(closeDropdown: () => void): ReactElement => (\n              <MenuItems\n                /**\n                * parentRef: For catching location(x, y) of MenuItems\n                * parentContainRef: For toggling more options(menus & reactions)\n                */\n                parentRef={avatarRef}\n                parentContainRef={avatarRef}\n                closeDropdown={closeDropdown}\n                style={{ paddingTop: 0, paddingBottom: 0 }}\n              >\n                {renderUserProfile\n                  ? renderUserProfile({ user: message?.sender, close: closeDropdown })\n                  : (<UserProfile user={message.sender} onSuccess={closeDropdown} />)\n                }\n              </MenuItems>\n            )}\n          />\n        )}\n        {/* outgoing menu */}\n        {isByMe && (\n          <div className={getClassName(['sendbird-message-content-menu', useReactionClassName, supposedHoverClassName, isByMeClassName])}>\n            <MessageItemMenu\n              className=\"sendbird-message-content-menu__normal-menu\"\n              channel={channel}\n              message={message as UserMessage | FileMessage}\n              isByMe={isByMe}\n              replyType={replyType}\n              disabled={disabled}\n              showEdit={showEdit}\n              showRemove={showRemove}\n              resendMessage={resendMessage}\n              setQuoteMessage={setQuoteMessage}\n              setSupposedHover={setSupposedHover}\n            />\n            {useReaction && (\n              <MessageItemReactionMenu\n                className=\"sendbird-message-content-menu__reaction-menu\"\n                message={message as UserMessage | FileMessage}\n                channel={channel}\n                userId={userId}\n                spaceFromTrigger={{}}\n                emojiContainer={emojiContainer}\n                toggleReaction={toggleReaction}\n                setSupposedHover={setSupposedHover}\n              />\n            )}\n          </div>\n        )}\n      </div>\n      {/* middle */}\n      <div className=\"sendbird-message-content__middle\">\n        {(!isByMe && !chainTop && !useReplying) && (\n          <Label\n            className=\"sendbird-message-content__middle__sender-name\"\n            type={LabelTypography.CAPTION_2}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {getSenderName(message)}\n          </Label>\n        )}\n        {/* quote message */}\n        {(useReplying) ? (\n          <div className={getClassName(['sendbird-message-content__middle__quote-message', isByMe ? 'outgoing' : 'incoming', useReplyingClassName])}>\n            <QuoteMessage\n              message={message}\n              userId={userId}\n              isByMe={isByMe}\n              onClick={() => {\n                if (message?.parentMessage?.createdAt && message?.parentMessageId) {\n                  scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n                }\n              }}\n            />\n          </div>\n        ) : null}\n        {/* container: message item body + emoji reactions */}\n        <div className={getClassName(['sendbird-message-content__middle__body-container'])} >\n          {/* message status component */}\n          {(isByMe && !chainBottom) && (\n            <div className={getClassName(['sendbird-message-content__middle__body-container__created-at', 'left', supposedHoverClassName])}>\n              <div className=\"sendbird-message-content__middle__body-container__created-at__component-container\">\n                <MessageStatus\n                  message={message}\n                  channel={channel}\n                />\n              </div>\n            </div>\n          )}\n          {/* message item body components */}\n          {isTextMessage(message as UserMessage) && (\n            <TextMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as UserMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n            />\n          )}\n          {(isOGMessage(message as UserMessage)) && (\n            <OGMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as UserMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n            />\n          )}\n          {(getUIKitMessageType((message as FileMessage)) === messageTypes.FILE) && (\n            <FileMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as FileMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n            />\n          )}\n          {(isThumbnailMessage(message as FileMessage)) && (\n            <ThumbnailMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as FileMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              showFileViewer={showFileViewer}\n            />\n          )}\n          {(getUIKitMessageType((message as FileMessage)) === messageTypes.UNKNOWN) && (\n            <UnknownMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n            />\n          )}\n          {/* reactions */}\n          {(useReaction && message?.reactions?.length > 0) && (\n            <div className={getClassName([\n              'sendbird-message-content-reactions',\n              (!isByMe || isThumbnailMessage(message as FileMessage) || isOGMessage(message as UserMessage)) ? '' : 'primary',\n              mouseHover ? 'mouse-hover' : '',\n            ])}>\n              <EmojiReactions\n                userId={userId}\n                message={message}\n                isByMe={isByMe}\n                emojiContainer={emojiContainer}\n                memberNicknamesMap={nicknamesMap}\n                toggleReaction={toggleReaction}\n              />\n            </div>\n          )}\n          {(!isByMe && !chainBottom) && (\n            <Label\n              className={getClassName(['sendbird-message-content__middle__body-container__created-at', 'right', supposedHoverClassName])}\n              type={LabelTypography.CAPTION_3}\n              color={LabelColors.ONBACKGROUND_2}\n            >\n              {format(message.createdAt, 'p', { locale: dateLocale })}\n            </Label>\n          )}\n        </div>\n      </div>\n      {/* right */}\n      <div className={getClassName(['sendbird-message-content__right', chainTopClassName, useReactionClassName, useReplyingClassName])}>\n        {/* incoming menu */}\n        {!isByMe && (\n          <div className={getClassName(['sendbird-message-content-menu', chainTopClassName, supposedHoverClassName, isByMeClassName])}>\n            {useReaction && (\n              <MessageItemReactionMenu\n                className=\"sendbird-message-content-menu__reaction-menu\"\n                message={message as UserMessage | FileMessage}\n                channel={channel}\n                userId={userId}\n                spaceFromTrigger={{}}\n                emojiContainer={emojiContainer}\n                toggleReaction={toggleReaction}\n                setSupposedHover={setSupposedHover}\n              />\n            )}\n            <MessageItemMenu\n              className=\"sendbird-message-content-menu__normal-menu\"\n              channel={channel}\n              message={message as UserMessage | FileMessage}\n              isByMe={isByMe}\n              replyType={replyType}\n              disabled={disabled}\n              showEdit={showEdit}\n              showRemove={showRemove}\n              resendMessage={resendMessage}\n              setQuoteMessage={setQuoteMessage}\n              setSupposedHover={setSupposedHover}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Modal from '../../../ui/Modal';\nimport { ButtonTypes } from '../../../ui/Button';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nconst RemoveMessage = (props) => {\n  const {\n    onCloseModal,\n    onDeleteMessage,\n    message,\n  } = props;\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <Modal\n      type={ButtonTypes.DANGER}\n      disabled={message?.threadInfo?.replyCount > 0}\n      onCancel={onCloseModal}\n      onSubmit={onDeleteMessage}\n      submitText=\"Delete\"\n      titleText={stringSet.MODAL__DELETE_MESSAGE__TITLE}\n    />\n  );\n};\n\nRemoveMessage.propTypes = {\n  onCloseModal: PropTypes.func.isRequired,\n  onDeleteMessage: PropTypes.func.isRequired,\n  message: PropTypes.shape({\n    threadInfo: PropTypes.shape({\n      replyCount: PropTypes.number,\n    }),\n  }).isRequired,\n};\n\nexport default RemoveMessage;\n","import React, {\n  useState,\n  useRef,\n  useMemo,\n  useLayoutEffect,\n  useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport format from 'date-fns/format';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport MessageContent from '../../../ui/MessageContent';\nimport DateSeparator from '../../../ui/DateSeparator';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport MessageInput from '../../../ui/MessageInput';\nimport FileViewer from '../../../ui/FileViewer';\nimport RemoveMessageModal from './RemoveMessage';\nimport { getClassName } from '../../../utils';\n\nexport default function MessageHoc({\n  message,\n  userId,\n  disabled,\n  editDisabled,\n  hasSeparator,\n  deleteMessage,\n  updateMessage,\n  scrollToMessage,\n  resendMessage,\n  useReaction,\n  replyType,\n  chainTop,\n  chainBottom,\n  membersMap,\n  emojiContainer,\n  animatedMessageId,\n  highLightedMessageId,\n  toggleReaction,\n  quoteMessage,\n  setQuoteMessage,\n  renderCustomMessage,\n  currentGroupChannel,\n  handleScroll,\n}) {\n  const { sender = {} } = message;\n  const [showEdit, setShowEdit] = useState(false);\n  const [showRemove, setShowRemove] = useState(false);\n  const [showFileViewer, setShowFileViewer] = useState(false);\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [isHighlighted, setIsHighlighted] = useState(false);\n  const editMessageInputRef = useRef(null);\n  const useMessageScrollRef = useRef(null);\n\n  const { dateLocale } = useContext(LocalizationContext);\n  useLayoutEffect(() => {\n    handleScroll();\n  }, [showEdit, message?.reactions?.length]);\n\n  useLayoutEffect(() => {\n    if (highLightedMessageId === message.messageId) {\n      if (useMessageScrollRef && useMessageScrollRef.current) {\n        useMessageScrollRef.current.scrollIntoView({\n          block: 'center',\n          inline: 'center',\n        });\n        setIsAnimated(false);\n        setTimeout(() => {\n          setIsHighlighted(true);\n        }, 500);\n      }\n    } else {\n      setIsHighlighted(false);\n    }\n  }, [highLightedMessageId, useMessageScrollRef.current, message.messageId]);\n  useLayoutEffect(() => {\n    if (animatedMessageId === message.messageId) {\n      if (useMessageScrollRef && useMessageScrollRef.current) {\n        useMessageScrollRef.current.scrollIntoView({\n          block: 'center',\n          inline: 'center',\n        });\n        setIsHighlighted(false);\n        setTimeout(() => {\n          setIsAnimated(true);\n        }, 500);\n      }\n    } else {\n      setIsAnimated(false);\n    }\n  }, [animatedMessageId, useMessageScrollRef.current, message.messageId]);\n  const RenderedMessage = useMemo(() => {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, currentGroupChannel, chainTop, chainBottom);\n      // TODO: Let's change this to object type on next major version up\n      // and add params 'hasSeparator' and 'menuDisabled', scrollToMessage\n    }\n    return null;\n  }, [message, message.message, renderCustomMessage]);\n\n  const isByMe = (userId === sender?.userId)\n    || (message.requestState === 'pending')\n    || (message.requestState === 'failed');\n\n  if (RenderedMessage) {\n    return (\n      <div\n        ref={useMessageScrollRef}\n        className={getClassName([\n          'sendbird-msg-hoc sendbird-msg--scroll-ref',\n          isAnimated ? 'sendbird-msg-hoc__animated' : '',\n          isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',\n        ])}\n      >\n        {/* date-separator */}\n        {\n          hasSeparator && (\n            <DateSeparator>\n              <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n                {format(message?.createdAt, 'MMMM dd, yyyy', { locale: dateLocale })}\n              </Label>\n            </DateSeparator>\n          )\n        }\n        <RenderedMessage message={message} />\n      </div>\n    );\n  }\n\n  if (showEdit) {\n    return (\n      <MessageInput\n        isEdit\n        disabled={editDisabled}\n        ref={editMessageInputRef}\n        name={message.messageId}\n        onSendMessage={updateMessage}\n        onCancelEdit={() => { setShowEdit(false); }}\n        value={message.message}\n      />\n    );\n  }\n\n  return (\n    <div\n      ref={useMessageScrollRef}\n      className={getClassName([\n        'sendbird-msg-hoc sendbird-msg--scroll-ref',\n        isAnimated ? 'sendbird-msg-hoc__animated' : '',\n        isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',\n      ])}\n      style={{ marginBottom: '2px' }}\n    >\n      {/* date-separator */}\n      {\n        hasSeparator && (\n          <DateSeparator>\n            <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n              {format(message?.createdAt, 'MMMM dd, yyyy', { locale: dateLocale })}\n            </Label>\n          </DateSeparator>\n        )\n      }\n      {/* Message */}\n      <MessageContent\n        className=\"sendbird-message-hoc__message-content\"\n        userId={userId}\n        scrollToMessage={scrollToMessage}\n        channel={currentGroupChannel}\n        message={message}\n        disabled={disabled}\n        chainTop={chainTop}\n        chainBottom={chainBottom}\n        useReaction={useReaction}\n        replyType={replyType}\n        nicknamesMap={membersMap}\n        emojiContainer={emojiContainer}\n        showEdit={setShowEdit}\n        showRemove={setShowRemove}\n        showFileViewer={setShowFileViewer}\n        resendMessage={resendMessage}\n        toggleReaction={toggleReaction}\n        quoteMessage={quoteMessage}\n        setQuoteMessage={setQuoteMessage}\n      />\n      {/* Modal */}\n      {\n        showRemove && (\n          <RemoveMessageModal\n            message={message}\n            onCloseModal={() => setShowRemove(false)}\n            onDeleteMessage={() => {\n              deleteMessage(message);\n              if (message?.messageId === quoteMessage?.messageId) {\n                setQuoteMessage(null);\n              }\n            }}\n          />\n        )\n      }\n      {\n        showFileViewer && (\n          <FileViewer\n            onClose={() => setShowFileViewer(false)}\n            message={message}\n            onDelete={() => {\n              deleteMessage(message, () => {\n                setShowFileViewer(false);\n              });\n            }}\n            isByMe={isByMe}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nMessageHoc.propTypes = {\n  userId: PropTypes.string,\n  message: PropTypes.shape({\n    isFileMessage: PropTypes.func,\n    isAdminMessage: PropTypes.func,\n    isUserMessage: PropTypes.func,\n    isDateseparator: PropTypes.func,\n    // should be a number, but there's a bug in SDK shich returns string\n    messageId: PropTypes.number,\n    type: PropTypes.string,\n    createdAt: PropTypes.number,\n    message: PropTypes.string,\n    requestState: PropTypes.string,\n    messageType: PropTypes.string,\n    sender: PropTypes.shape({ userId: PropTypes.string }),\n    ogMetaData: PropTypes.shape({}),\n    parentMessageId: PropTypes.number,\n    reactions: PropTypes.arrayOf(PropTypes.number),\n  }),\n  animatedMessageId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  highLightedMessageId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  renderCustomMessage: PropTypes.func,\n  currentGroupChannel: PropTypes.shape({}),\n  hasSeparator: PropTypes.bool,\n  disabled: PropTypes.bool,\n  editDisabled: PropTypes.bool,\n  deleteMessage: PropTypes.func.isRequired,\n  scrollToMessage: PropTypes.func,\n  updateMessage: PropTypes.func.isRequired,\n  resendMessage: PropTypes.func.isRequired,\n  useReaction: PropTypes.bool.isRequired,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']).isRequired,\n  chainTop: PropTypes.bool.isRequired,\n  chainBottom: PropTypes.bool.isRequired,\n  membersMap: PropTypes.instanceOf(Map).isRequired,\n  emojiContainer: PropTypes.shape({\n    emojiCategories: PropTypes.arrayOf(PropTypes.shape({\n      emojis: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        url: PropTypes.string,\n      })),\n    })),\n  }),\n  toggleReaction: PropTypes.func,\n  quoteMessage: PropTypes.shape({\n    messageId: PropTypes.string,\n  }),\n  setQuoteMessage: PropTypes.func.isRequired,\n  handleScroll: PropTypes.func.isRequired,\n};\n\nMessageHoc.defaultProps = {\n  userId: '',\n  editDisabled: false,\n  renderCustomMessage: null,\n  currentGroupChannel: {},\n  message: {},\n  hasSeparator: false,\n  disabled: false,\n  animatedMessageId: null,\n  highLightedMessageId: null,\n  toggleReaction: () => { },\n  scrollToMessage: () => { },\n  emojiContainer: {},\n  quoteMessage: null,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isSameDay from 'date-fns/isSameDay';\n\nimport './conversation-scroll.scss';\nimport * as messageActionTypes from '../dux/actionTypes';\n\nimport MessageHOC from './MessageHOC';\nimport { compareMessagesForGrouping } from '../utils';\nimport PlaceHolder, { PlaceHolderTypes } from '../../../ui/PlaceHolder';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\n\nconst SCROLL_REF_CLASS_NAME = '.sendbird-msg--scroll-ref';\n\nexport default class ConversationScroll extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleScroll = () => {\n    const { scrollRef } = this?.props;\n    const current = scrollRef?.current;\n    if (current) {\n      const bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n      const { scrollBottom = 0 } = this.state;\n      if (scrollBottom < bottom) {\n        current.scrollTop += bottom - scrollBottom;\n      }\n    }\n  }\n\n  onScroll = (e) => {\n    const {\n      scrollRef,\n      hasMore,\n      messagesDispatcher,\n      onScroll,\n      onScrollDown,\n      currentGroupChannel,\n    } = this.props;\n\n    const element = e.target;\n    const {\n      scrollTop,\n      clientHeight,\n      scrollHeight,\n    } = element;\n    if (scrollTop === 0) {\n      if (!hasMore) {\n        return;\n      }\n      const nodes = scrollRef.current.querySelectorAll(SCROLL_REF_CLASS_NAME);\n      const first = nodes && nodes[0];\n      onScroll(([messages]) => {\n        if (messages) {\n          // https://github.com/scabbiaza/react-scroll-position-on-updating-dom\n          // Set block to nearest to prevent unexpected scrolling from outer components\n          try {\n            first.scrollIntoView({ block: 'nearest' });\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n\n    if (clientHeight + scrollTop === scrollHeight) {\n      const nodes = scrollRef.current.querySelectorAll(SCROLL_REF_CLASS_NAME);\n      const last = nodes && nodes[nodes.length - 1];\n      onScrollDown(([messages]) => {\n        if (messages) {\n          // https://github.com/scabbiaza/react-scroll-position-on-updating-dom\n          try {\n            last.scrollIntoView({ block: 'nearest' });\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n\n    // do this later\n    setTimeout(() => {\n      // mark as read if scroll is at end\n      if (clientHeight + scrollTop === scrollHeight) {\n        messagesDispatcher({\n          type: messageActionTypes.MARK_AS_READ,\n        });\n        currentGroupChannel.markAsRead();\n      }\n\n      // save the lastest scroll bottom value\n      if (scrollRef?.current) {\n        const current = scrollRef?.current;\n        this.setState((state) => ({\n          ...state,\n          scrollBottom: current.scrollHeight - current.scrollTop - current.offsetHeight,\n        }), () => { });\n      }\n    }, 500);\n  }\n\n  render() {\n    const {\n      userId,\n      disabled,\n      scrollRef,\n      membersMap,\n      allMessages,\n      scrollToMessage,\n      useReaction,\n      replyType,\n      emojiAllMap,\n      editDisabled,\n      deleteMessage,\n      updateMessage,\n      resendMessage,\n      renderCustomMessage,\n      renderChatItem,\n      animatedMessageId,\n      highLightedMessageId,\n      emojiContainer,\n      toggleReaction,\n      useMessageGrouping,\n      currentGroupChannel,\n      memoizedEmojiListItems,\n      showScrollBot,\n      onClickScrollBot,\n      quoteMessage,\n      setQuoteMessage,\n    } = this.props;\n\n    if (allMessages.length < 1) {\n      return (\n        <PlaceHolder\n          className=\"sendbird-conversation__no-messages\"\n          type={PlaceHolderTypes.NO_MESSAGES}\n        />\n      );\n    }\n\n    return (\n      <div className=\"sendbird-conversation__messages\">\n        <div className=\"sendbird-conversation__scroll-container\">\n          <div className=\"sendbird-conversation__padding\" />\n          {/*\n            To do: Implement windowing\n            Implement windowing if you are dealing with large number of messages/channels\n            https://github.com/bvaughn/react-window -> recommendation\n            We hesitate to bring one more dependency to our library,\n            we are planning to implement it inside the library\n          */}\n          <div\n            className=\"sendbird-conversation__messages-padding\"\n            ref={scrollRef}\n            onScroll={this.onScroll}\n          >\n            {\n              allMessages.map(\n                (m, idx) => {\n                  const previousMessage = allMessages[idx - 1];\n                  const nextMessage = allMessages[idx + 1];\n                  const [chainTop, chainBottom] = useMessageGrouping\n                    ? compareMessagesForGrouping(previousMessage, m, nextMessage)\n                    : [false, false];\n                  const previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n                  const currentCreatedAt = m.createdAt;\n                  // https://stackoverflow.com/a/41855608\n                  const hasSeparator = !(previousMessageCreatedAt && (\n                    isSameDay(currentCreatedAt, previousMessageCreatedAt)\n                  ));\n                  if (renderChatItem) {\n                    return (\n                      <div\n                        key={m.messageId || m.reqId}\n                        className=\"sendbird-msg--scroll-ref\"\n                      >\n                        {\n                          renderChatItem({\n                            message: m,\n                            animatedMessageId,\n                            highLightedMessageId,\n                            channel: currentGroupChannel,\n                            onDeleteMessage: deleteMessage,\n                            onUpdateMessage: updateMessage,\n                            onResendMessage: resendMessage,\n                            onScrollToMessage: scrollToMessage,\n                            onReplyMessage: setQuoteMessage,\n                            emojiContainer,\n                            chainTop,\n                            chainBottom,\n                            hasSeparator,\n                            menuDisabled: disabled,\n                          })\n                        }\n                      </div>\n                    );\n                  }\n\n                  return (\n                    <MessageHOC\n                      animatedMessageId={animatedMessageId}\n                      highLightedMessageId={highLightedMessageId}\n                      renderCustomMessage={renderCustomMessage}\n                      key={m.messageId || m.reqId}\n                      userId={userId}\n                      handleScroll={this.handleScroll}\n                      message={m}\n                      quoteMessage={quoteMessage}\n                      scrollToMessage={scrollToMessage}\n                      currentGroupChannel={currentGroupChannel}\n                      disabled={disabled}\n                      membersMap={membersMap}\n                      chainTop={chainTop}\n                      useReaction={useReaction}\n                      replyType={replyType}\n                      emojiAllMap={emojiAllMap}\n                      emojiContainer={emojiContainer}\n                      editDisabled={editDisabled}\n                      hasSeparator={hasSeparator}\n                      chainBottom={chainBottom}\n                      updateMessage={updateMessage}\n                      deleteMessage={deleteMessage}\n                      resendMessage={resendMessage}\n                      toggleReaction={toggleReaction}\n                      setQuoteMessage={setQuoteMessage}\n                      memoizedEmojiListItems={memoizedEmojiListItems}\n                    />\n                  );\n                },\n              )\n            }\n          </div>\n        </div>\n        {\n          showScrollBot && (\n            <div\n              className=\"sendbird-conversation__scroll-bottom-button\"\n              onClick={onClickScrollBot}\n              onKeyDown={onClickScrollBot}\n              tabIndex={0}\n              role=\"button\"\n            >\n              <Icon\n                width=\"24px\"\n                height=\"24px\"\n                type={IconTypes.CHEVRON_DOWN}\n                fillColor={IconColors.PRIMARY}\n              />\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nConversationScroll.propTypes = {\n  // https://stackoverflow.com/a/52646941\n  scrollRef: PropTypes.shape({\n    current: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.shape({}),\n    ]),\n  }).isRequired,\n  hasMore: PropTypes.bool,\n  messagesDispatcher: PropTypes.func.isRequired,\n  onScroll: PropTypes.func,\n  onScrollDown: PropTypes.func,\n  editDisabled: PropTypes.bool,\n  disabled: PropTypes.bool,\n  userId: PropTypes.string,\n  allMessages: PropTypes.arrayOf(PropTypes.shape({\n    createdAt: PropTypes.number,\n  })).isRequired,\n  deleteMessage: PropTypes.func.isRequired,\n  resendMessage: PropTypes.func.isRequired,\n  updateMessage: PropTypes.func.isRequired,\n  currentGroupChannel: PropTypes.shape({\n    markAsRead: PropTypes.func,\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n  }).isRequired,\n  animatedMessageId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  highLightedMessageId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  renderChatItem: PropTypes.func,\n  renderCustomMessage: PropTypes.func,\n  scrollToMessage: PropTypes.func,\n  useReaction: PropTypes.bool,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']),\n  showScrollBot: PropTypes.bool,\n  onClickScrollBot: PropTypes.func,\n  emojiContainer: PropTypes.shape({}),\n  emojiAllMap: PropTypes.instanceOf(Map),\n  membersMap: PropTypes.instanceOf(Map),\n  useMessageGrouping: PropTypes.bool,\n  toggleReaction: PropTypes.func,\n  memoizedEmojiListItems: PropTypes.func,\n  quoteMessage: PropTypes.shape({}),\n  setQuoteMessage: PropTypes.func.isRequired,\n};\n\nConversationScroll.defaultProps = {\n  hasMore: false,\n  editDisabled: false,\n  disabled: false,\n  userId: '',\n  renderCustomMessage: null,\n  renderChatItem: null,\n  animatedMessageId: null,\n  highLightedMessageId: null,\n  onScroll: null,\n  onScrollDown: null,\n  useReaction: true,\n  replyType: 'NONE',\n  emojiContainer: {},\n  showScrollBot: false,\n  onClickScrollBot: () => { },\n  scrollToMessage: () => { },\n  emojiAllMap: new Map(),\n  membersMap: new Map(),\n  useMessageGrouping: true,\n  toggleReaction: () => { },\n  memoizedEmojiListItems: () => '',\n  quoteMessage: null,\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './notification.scss';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\n\nexport default function Notification({\n  count,\n  time,\n  onClick,\n}) {\n  const { stringSet } = useContext(LocalizationContext);\n  const timeArray = time.split(' ');\n  timeArray.splice(-2, 0, stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__ON);\n  return (\n    // eslint-disable-next-line\n    <div className=\"sendbird-notification\" onClick={onClick}>\n      <Label className=\"sendbird-notification__text\" color={LabelColors.ONCONTENT_1} type={LabelTypography.CAPTION_2}>\n        {`${count} `}\n        {stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__NEW_MESSAGE}\n        {` ${timeArray.join(' ')}`}\n      </Label>\n      <Icon\n        width=\"24px\"\n        height=\"24px\"\n        type={IconTypes.CHEVRON_DOWN}\n        fillColor={IconColors.CONTENT}\n      />\n    </div>\n  );\n}\n\nNotification.propTypes = {\n  count: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  time: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n\nNotification.defaultProps = {\n  count: 0,\n  time: '',\n};\n","import React, { useContext } from 'react';\n\nimport './notification.scss';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelTypography } from '../../../ui/Label';\n\nconst FrozenNotification = (): JSX.Element => {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-notification sendbird-notification--frozen\">\n      <Label\n        className=\"sendbird-notification__text\"\n        type={LabelTypography.CAPTION_2}\n      >\n        {stringSet.CHANNEL_FROZEN}\n      </Label>\n    </div>\n  );\n}\n\nexport default FrozenNotification;\n","import React, { useEffect, useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport { uuidv4 } from '../../../utils/uuid';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\n\nconst TypingIndicatorText = ({ members }) => {\n  const { stringSet } = useContext(LocalizationContext);\n  if (!members || members.length === 0) {\n    return '';\n  }\n\n  if (members && members.length === 1) {\n    return `${members[0].nickname} ${stringSet.TYPING_INDICATOR__IS_TYPING}`;\n  }\n\n  if (members && members.length === 2) {\n    return `${members[0].nickname} ${stringSet.TYPING_INDICATOR__AND} ${members[1].nickname} ${stringSet.TYPING_INDICATOR__ARE_TYPING}`;\n  }\n\n  return stringSet.TYPING_INDICATOR__MULTIPLE_TYPING;\n};\n\nfunction TypingIndicator(props) {\n  const {\n    className,\n    channelUrl,\n    sb,\n    logger,\n  } = props;\n  const [handlerId, setHandlerId] = useState(uuidv4());\n  const [typingMembers, setTypingMembers] = useState([]);\n\n  useEffect(() => {\n    if (sb && sb.ChannelHandler) {\n      sb.removeChannelHandler(handlerId);\n      const newHandlerId = uuidv4();\n      const handler = new sb.ChannelHandler();\n      // there is a possible warning in here - setState called after unmount\n      handler.onTypingStatusUpdated = (groupChannel) => {\n        logger.info('Channel > Typing Indicator: onTypingStatusUpdated', groupChannel);\n        const members = groupChannel.getTypingMembers();\n        if (groupChannel.url === channelUrl) {\n          setTypingMembers(members);\n        }\n      };\n      sb.addChannelHandler(newHandlerId, handler);\n      setHandlerId(newHandlerId);\n    }\n\n    return () => {\n      setTypingMembers([]);\n      if (sb && sb.removeChannelHandler) {\n        sb.removeChannelHandler(handlerId);\n      }\n    };\n  }, [channelUrl]);\n\n  return (\n    <Label\n      className={className}\n      type={LabelTypography.CAPTION_2}\n      color={LabelColors.ONBACKGROUND_2}\n    >\n      <TypingIndicatorText members={typingMembers} />\n    </Label>\n  );\n}\n\nTypingIndicator.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  channelUrl: PropTypes.string.isRequired,\n  sb: PropTypes.shape({\n    ChannelHandler: PropTypes.func,\n    removeChannelHandler: PropTypes.func,\n    addChannelHandler: PropTypes.func,\n  }).isRequired,\n  logger: PropTypes.shape({\n    info: PropTypes.func,\n  }).isRequired,\n};\nTypingIndicator.defaultProps = {\n  className: '',\n};\n\nexport default TypingIndicator;\n","import React, { ReactElement } from 'react';\nimport { FileMessage } from 'sendbird';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport ImageRenderer from '../ImageRenderer';\nimport { isAudioMessage, isFileMessage, isImageMessage, isThumbnailMessage } from '../../utils';\n\ninterface Props {\n  message: FileMessage;\n}\n\nconst componentClassname = 'sendbird-quote_message_input__avatar';\n\nexport default function QuoteMessageThumbnail({ message }: Props): ReactElement {\n  if (!isFileMessage(message)) {\n    return null;\n  }\n\n  const thumbnailUrl: string = (message.thumbnails && message.thumbnails.length > 0 && message.thumbnails[0].url)\n    || (isImageMessage(message) && message.url);\n  if (isThumbnailMessage(message) && thumbnailUrl) {\n    return (\n      <ImageRenderer\n        className={componentClassname}\n        url={thumbnailUrl}\n        alt={message.type}\n        width=\"44px\"\n        height=\"44px\"\n        fixedSize\n      />\n    );\n  } else if (isAudioMessage(message)) {\n    return (\n      <div className={componentClassname}>\n        <Icon\n          type={IconTypes.FILE_AUDIO}\n          fillColor={IconColors.ON_BACKGROUND_2}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </div>\n    );\n  } else {\n    return (\n      <div className={componentClassname}>\n        <Icon\n          type={IconTypes.FILE_DOCUMENT}\n          fillColor={IconColors.ON_BACKGROUND_2}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </div>\n    );\n  }\n}\n","import React, { ReactElement, useContext } from 'react';\nimport { FileMessage, UserMessage } from 'sendbird';\nimport {\n  CoreMessageType,\n  getClassName,\n  isFileMessage,\n  isGifMessage,\n  isImageMessage,\n  isThumbnailMessage,\n  isUserMessage,\n  isVideoMessage,\n} from '../../utils';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport QuoteMessageThumbnail from './QuoteMessageThumbnail';\nimport './index.scss';\n\ninterface Props {\n  className?: string | Array<string>;\n  replyingMessage: CoreMessageType;\n  onClose?: (message: CoreMessageType) => void;\n}\n\nexport default function QuoteMessageInput({\n  className,\n  replyingMessage,\n  onClose,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const fileMessage = replyingMessage as FileMessage;\n  const sender = (replyingMessage as UserMessage | FileMessage)?.sender;\n\n  return (\n    <div className={getClassName(['sendbird-quote_message_input', className])}>\n      <QuoteMessageThumbnail message={fileMessage} />\n      <div\n        className=\"sendbird-quote_message_input__body\"\n        style={{\n          width: `calc(100% - ${fileMessage.isFileMessage() ? '164px' : '120px'})`,\n          left: fileMessage.isFileMessage() ? '92px' : '40px',\n        }}\n      >\n        <Label\n          className=\"sendbird-quote_message_input__body__sender-name\"\n          type={LabelTypography.CAPTION_1}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {`${stringSet.QUOTE_MESSAGE_INPUT__REPLY_TO} ${(sender && sender.nickname) ? sender.nickname : stringSet.NO_NAME}`}\n        </Label>\n        <Label\n          className=\"sendbird-quote_message_input__body__message-content\"\n          type={LabelTypography.BODY_2}\n          color={LabelColors.ONBACKGROUND_3}\n        >\n          {isImageMessage(fileMessage) && !isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_IMAGE}\n          {isVideoMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE__VIDEO}\n          {isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_GIF}\n          {isUserMessage(replyingMessage as UserMessage) && (replyingMessage as UserMessage).message}\n          {(isFileMessage(fileMessage) && !isThumbnailMessage(fileMessage)) && fileMessage.name}\n        </Label>\n      </div>\n      <Icon\n        className=\"sendbird-quote_message_input__close-button\"\n        type={IconTypes.CLOSE}\n        fillColor={IconColors.ON_BACKGROUND_2}\n        width=\"24px\"\n        height=\"24px\"\n        onClick={() => onClose(replyingMessage)}\n      />\n    </div>\n  );\n}\n","// Logic required to handle message input rendering\n\nimport React, { useContext } from 'react';\nimport Sendbird, { FileMessage, UserMessage } from 'sendbird';\n\nimport './message-input-wrapper.scss';\nimport { RenderGroupChannelMessageInputProps } from '../../../index';\nimport * as utils from '../utils.js';\n\nimport MessageInput from '../../../ui/MessageInput';\nimport QuoteMessageInput from '../../../ui/QuoteMessageInput';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  channel: Sendbird.GroupChannel;\n  user: Sendbird.User;\n  isOnline: boolean;\n  initialized: boolean;\n  quoteMessage?: UserMessage | FileMessage;\n  onSendMessage: (quoteMessage?: UserMessage | FileMessage) => void;\n  onFileUpload: (file: File, quoteMessage?: UserMessage | FileMessage) => void;\n  setQuoteMessage: (message: UserMessage | FileMessage) => void;\n  renderMessageInput: (renderProps: RenderGroupChannelMessageInputProps) => JSX.Element;\n}\n\nconst MessageInputWrapper = ({\n  channel,\n  user,\n  isOnline,\n  initialized,\n  quoteMessage,\n  onSendMessage,\n  onFileUpload,\n  setQuoteMessage,\n  renderMessageInput,\n}: Props, ref: React.RefObject<HTMLInputElement>): JSX.Element => {\n  const { stringSet } = useContext(LocalizationContext);\n  const disabled = !initialized\n    || utils.isDisabledBecauseFrozen(channel)\n    || utils.isDisabledBecauseMuted(channel)\n    || !isOnline;\n\n  const isOperator = utils.isOperator(channel);\n  const { isBroadcast } = channel;\n\n  // custom message\n  if (renderMessageInput) {\n    return renderMessageInput({ channel, user, disabled, quoteMessage });\n  }\n\n  // broadcast channel + not operator\n  if (isBroadcast && !isOperator) {\n    return null;\n  }\n\n  // other conditions\n  return (\n    <div className=\"sendbird-message-input-wrapper\">\n      {quoteMessage && (\n        <div className=\"sendbird-message-input-wrapper__quote-message-input\">\n          <QuoteMessageInput\n            replyingMessage={quoteMessage}\n            onClose={() => setQuoteMessage(null)}\n          />\n        </div>\n      )}\n      <MessageInput\n        className=\"sendbird-message-input-wrapper__message-input\"\n        channelUrl={channel?.url}\n        placeholder={\n          (quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER)\n          || (utils.isDisabledBecauseFrozen(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED)\n          || (utils.isDisabledBecauseMuted(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED)\n        }\n        ref={ref}\n        disabled={disabled}\n        onStartTyping={() => {\n          channel.startTyping();\n        }}\n        onSendMessage={() => {\n          onSendMessage(quoteMessage);\n          setQuoteMessage(null);\n        }}\n        onFileUpload={(file) => {\n          onFileUpload(file, quoteMessage);\n          setQuoteMessage(null);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default React.forwardRef(MessageInputWrapper);\n","import React, { useContext } from 'react';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport './index.scss';\n\nfunction ConnectionStatus() {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-connection-status\">\n      <Label\n        type={LabelTypography.BODY_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {stringSet.TRYING_TO_CONNECT}\n      </Label>\n      <Icon\n        type={IconTypes.DISCONNECTED}\n        fillColor={IconColors.SENT}\n        width=\"14px\"\n        height=\"14px\"\n      />\n    </div>\n  );\n}\n\nexport default ConnectionStatus;\n","import formatDistanceToNowStrict from 'date-fns/formatDistanceToNowStrict';\nimport { LabelStringSet } from '../Label';\n\nexport const prettyDate = (date) => formatDistanceToNowStrict(date, { addSuffix: true });\n\nexport const getChannelTitle = (channel = {}, currentUserId, stringSet = LabelStringSet) => {\n  if (!channel || (!channel.name && !channel.members)) {\n    return stringSet.NO_TITLE;\n  }\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members\n    .filter(({ userId }) => userId !== currentUserId)\n    .map(({ nickname }) => (nickname || stringSet.NO_NAME))\n    .join(', ');\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport * as utils from './utils';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ChannelAvatar from '../ChannelAvatar/index';\n\nconst noop = () => { };\nexport default function ChatHeader(props) {\n  const {\n    currentGroupChannel,\n    currentUser,\n    title,\n    subTitle,\n    isMuted,\n    theme,\n    showSearchIcon,\n    onSearchClick,\n    onActionClick,\n  } = props;\n  const { userId } = currentUser;\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-chat-header\">\n      <div className=\"sendbird-chat-header__left\">\n        <ChannelAvatar\n          theme={theme}\n          channel={currentGroupChannel}\n          userId={userId}\n          height={32}\n          width={32}\n        />\n        <Label\n          className=\"sendbird-chat-header__left__title\"\n          type={LabelTypography.H_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {title || utils.getChannelTitle(currentGroupChannel, userId, stringSet)}\n        </Label>\n        <Label\n          className=\"sendbird-chat-header__left__subtitle\"\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {subTitle}\n        </Label>\n      </div>\n      <div className=\"sendbird-chat-header__right\">\n        {\n          ((typeof isMuted === 'string' && isMuted === 'true') || (typeof isMuted === 'boolean' && isMuted))\n            && (\n              <Icon\n                className=\"sendbird-chat-header__right__mute\"\n                type={IconTypes.NOTIFICATIONS_OFF_FILLED}\n                width=\"24px\"\n                height=\"24px\"\n              />\n            )\n        }\n        {\n          showSearchIcon && (\n            <IconButton\n              className=\"sendbird-chat-header__right__search\"\n              width=\"32px\"\n              height=\"32px\"\n              onClick={onSearchClick}\n            >\n              <Icon\n                type={IconTypes.SEARCH}\n                fillColor={IconColors.PRIMARY}\n                width=\"24px\"\n                height=\"24px\"\n              />\n            </IconButton>\n          )\n        }\n        <IconButton\n          className=\"sendbird-chat-header__right__info\"\n          width=\"32px\"\n          height=\"32px\"\n          onClick={onActionClick}\n        >\n          <Icon\n            type={IconTypes.INFO}\n            fillColor={IconColors.PRIMARY}\n            width=\"24px\"\n            height=\"24px\"\n          />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nChatHeader.propTypes = {\n  currentGroupChannel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string,\n  }),\n  title: PropTypes.string,\n  subTitle: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.string,\n  ]),\n  isMuted: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n  ]),\n  theme: PropTypes.string,\n  showSearchIcon: PropTypes.bool,\n  onSearchClick: PropTypes.func,\n  onActionClick: PropTypes.func,\n};\n\nChatHeader.defaultProps = {\n  currentGroupChannel: {},\n  currentUser: {},\n  title: '',\n  subTitle: '',\n  isMuted: false,\n  theme: 'light',\n  showSearchIcon: false,\n  onSearchClick: noop,\n  onActionClick: noop,\n};\n","import React, {\n  useEffect,\n  useRef,\n  useReducer,\n  useMemo,\n  useState,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport * as utils from './utils';\n\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport * as messageActionTypes from './dux/actionTypes';\nimport messagesInitialState from './dux/initialState';\nimport messagesReducer from './dux/reducers';\n\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useGetChannel from './hooks/useGetChannel';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useHandleReconnect from './hooks/useHandleReconnect';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useScrollDownCallback from './hooks/useScrollDownCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useSendFileMessageCallback from './hooks/useSendFileMessageCallback';\nimport useMemoizedEmojiListItems from './hooks/useMemoizedEmojiListItems';\nimport useToggleReactionCallback from './hooks/useToggleReactionCallback';\nimport useScrollToMessage from './hooks/useScrollToMessage';\n\nimport ConversationScroll from './components/ConversationScroll';\nimport Notification from './components/Notification';\nimport FrozenNotification from './components/FrozenNotification';\nimport TypingIndicator from './components/TypingIndicator';\nimport MessageInputWrapper from './components/MessageInputWrapper';\nimport ConnectionStatus from '../../ui/ConnectionStatus';\nimport ChatHeader from '../../ui/ChatHeader';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder';\n\nconst noop = () => { };\n\nexport const ConversationPanel = (props) => {\n  const {\n    channelUrl,\n    stores: { sdkStore, userStore },\n    config: {\n      userId,\n      logger,\n      pubSub,\n      isOnline,\n      theme,\n      imageCompression,\n    },\n    dispatchers: {\n      reconnect,\n    },\n    queries = {},\n    startingPoint,\n    highlightedMessage,\n    useReaction,\n    replyType,\n    showSearchIcon,\n    onSearchClick,\n    renderChatItem,\n    renderChatHeader,\n    renderCustomMessage,\n    renderUserProfile,\n    disableUserProfile,\n    renderMessageInput,\n    useMessageGrouping,\n    onChatHeaderActionClick,\n    onBeforeSendUserMessage,\n    onBeforeSendFileMessage,\n    onBeforeUpdateUserMessage,\n  } = props;\n  const { sdk } = sdkStore;\n  const { config } = props;\n  const sdkError = sdkStore.error;\n  const sdkInit = sdkStore.initialized;\n  const { user } = userStore;\n  if (queries.messageListQuery) {\n    // eslint-disable-next-line no-console\n    console.warn('messageListQuery has been deprecated, please use messageListParams instead');\n  }\n\n  useEffect(() => {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n\n  const [intialTimeStamp, setIntialTimeStamp] = useState(startingPoint);\n  useEffect(() => {\n    setIntialTimeStamp(startingPoint);\n  }, [startingPoint, channelUrl]);\n  const [animatedMessageId, setAnimatedMessageId] = useState('');\n  const [highLightedMessageId, setHighLightedMessageId] = useState(highlightedMessage);\n  useEffect(() => {\n    setHighLightedMessageId(highlightedMessage);\n  }, [highlightedMessage]);\n  const userFilledMessageListQuery = queries.messageListParams;\n  const [quoteMessage, setQuoteMessage] = useState(null);\n\n  const [messagesStore, messagesDispatcher] = useReducer(messagesReducer, messagesInitialState);\n  const scrollRef = useRef(null);\n\n  const {\n    allMessages,\n    loading,\n    initialized,\n    unreadCount,\n    unreadSince,\n    isInvalid,\n    currentGroupChannel = {},\n    hasMore,\n    lastMessageTimeStamp,\n    hasMoreToBottom,\n    latestFetchedMessageTimeStamp,\n    emojiContainer,\n    readStatus,\n  } = messagesStore;\n  const { isFrozen, isBroadcast, isSuper } = currentGroupChannel;\n  const { appInfo = {} } = sdk;\n  const usingReaction = (\n    appInfo.isUsingReaction && !isBroadcast && !isSuper && useReaction\n    // TODO: Make useReaction independent from appInfo.isUsingReaction\n  );\n\n  const userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  const userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  const showScrollBot = hasMoreToBottom;\n\n  // TODO: emojiAllMap, emoijAllList, nicknamesMap => should be moved to messagesStore\n  const emojiAllMap = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisMapFromEmojiContainer(emojiContainer)\n      : new Map()\n  ), [emojiContainer]);\n  const emojiAllList = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisFromEmojiContainer(emojiContainer)\n      : []\n  ), [emojiContainer]);\n  const nicknamesMap = useMemo(() => (\n    usingReaction\n      ? utils.getNicknamesMapFromMembers(currentGroupChannel.members)\n      : new Map()\n  ), [currentGroupChannel.members]);\n\n  // Scrollup is default scroll for channel\n  const onScrollCallback = useScrollCallback({\n    currentGroupChannel, lastMessageTimeStamp, userFilledMessageListQuery, replyType,\n  }, {\n    hasMore,\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const scrollToMessage = useScrollToMessage({\n    setIntialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n  }, { logger });\n\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMoreToBottom, onScrollDownCallback -> scroll down\n  // hasMore, onScrollCallback -> scroll up(default behavior)\n  const onScrollDownCallback = useScrollDownCallback({\n    currentGroupChannel,\n    latestFetchedMessageTimeStamp,\n    userFilledMessageListQuery,\n    hasMoreToBottom,\n    replyType,\n  }, {\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const toggleReaction = useToggleReactionCallback({ currentGroupChannel }, { logger });\n\n  const memoizedEmojiListItems = useMemoizedEmojiListItems({\n    emojiContainer, toggleReaction,\n  }, {\n    useReaction: usingReaction,\n    logger,\n    userId,\n    emojiAllList,\n  });\n\n  // to create message-datasource\n  // this hook sets currentGroupChannel asynchronously\n  useGetChannel(\n    { channelUrl, sdkInit },\n    { messagesDispatcher, sdk, logger },\n  );\n\n  useEffect(() => {\n    setQuoteMessage(null);\n  }, [channelUrl]);\n\n  // Hook to handle ChannelEvents and send values to useReducer using messagesDispatcher\n  useHandleChannelEvents(\n    { currentGroupChannel, sdkInit, hasMoreToBottom },\n    {\n      messagesDispatcher,\n      sdk,\n      logger,\n      scrollRef,\n      setQuoteMessage,\n    },\n  );\n\n  // hook that fetches messages when channel changes\n  // to be clear here useGetChannel sets currentGroupChannel\n  // and useInitialMessagesFetch executes when currentGroupChannel changes\n  // p.s This one executes on intialTimeStamp change too\n  useInitialMessagesFetch({\n    currentGroupChannel,\n    userFilledMessageListQuery,\n    intialTimeStamp,\n    replyType,\n  }, {\n    sdk,\n    logger,\n    messagesDispatcher,\n  });\n\n  // handles API calls from withSendbird\n  useEffect(() => {\n    const subScriber = utils.pubSubHandler(channelUrl, pubSub, messagesDispatcher);\n    return () => {\n      utils.pubSubHandleRemover(subScriber);\n    };\n  }, [channelUrl, sdkInit]);\n\n  // handling connection breaks\n  useHandleReconnect({ isOnline, replyType }, {\n    logger,\n    sdk,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n  });\n\n  // callbacks for Message CURD actions\n  const deleteMessage = useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher },\n    { logger });\n  const updateMessage = useUpdateMessageCallback(\n    { currentGroupChannel, messagesDispatcher, onBeforeUpdateUserMessage },\n    { logger, sdk, pubSub },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentGroupChannel, messagesDispatcher },\n    { logger },\n  );\n  const [messageInputRef, onSendMessage] = useSendMessageCallback(\n    { currentGroupChannel, onBeforeSendUserMessage },\n    {\n      sdk,\n      logger,\n      pubSub,\n      messagesDispatcher,\n    },\n  );\n  const [onSendFileMessage] = useSendFileMessageCallback(\n    { currentGroupChannel, onBeforeSendFileMessage, imageCompression },\n    {\n      sdk,\n      logger,\n      pubSub,\n      messagesDispatcher,\n    },\n  );\n\n  if (!channelUrl) {\n    return (<div className=\"sendbird-conversation\"><PlaceHolder type={PlaceHolderTypes.NO_CHANNELS} /></div>);\n  }\n  if (isInvalid) {\n    return (<div className=\"sendbird-conversation\"><PlaceHolder type={PlaceHolderTypes.WRONG} /></div>);\n  }\n  if (sdkError) {\n    return (\n      <div className=\"sendbird-conversation\">\n        <PlaceHolder\n          type={PlaceHolderTypes.WRONG}\n          retryToConnect={() => {\n            logger.info('Channel: reconnecting');\n            reconnect();\n          }}\n        />\n      </div>\n    );\n  }\n  return (\n    <UserProfileProvider\n      className=\"sendbird-conversation\"\n      disableUserProfile={userDefinedDisableUserProfile}\n      renderUserProfile={userDefinedRenderProfile}\n    >\n      {\n        renderChatHeader\n          ? renderChatHeader({ channel: currentGroupChannel, user })\n          : (\n            <ChatHeader\n              theme={theme}\n              currentGroupChannel={currentGroupChannel}\n              currentUser={user}\n              showSearchIcon={showSearchIcon}\n              onSearchClick={onSearchClick}\n              onActionClick={onChatHeaderActionClick}\n              subTitle={currentGroupChannel.members && currentGroupChannel.members.length !== 2}\n              isMuted={false}\n            />\n          )\n      }\n      {\n        isFrozen && (\n          <FrozenNotification />\n        )\n      }\n      {\n        unreadCount > 0 && (\n          <Notification\n            count={unreadCount}\n            onClick={() => {\n              if (intialTimeStamp) {\n                setIntialTimeStamp(null);\n                setAnimatedMessageId(null);\n                setHighLightedMessageId(null);\n              } else {\n                utils.scrollIntoLast();\n                // there is no scroll\n                if (scrollRef.current.scrollTop === 0) {\n                  try {\n                    currentGroupChannel.markAsRead();\n                  } catch {\n                    //\n                  }\n                  messagesDispatcher({\n                    type: messageActionTypes.MARK_AS_READ,\n                  });\n                }\n              }\n            }}\n            time={unreadSince}\n          />\n        )\n      }\n      {\n        loading\n          ? (\n            <div className=\"sendbird-conversation\">\n              <PlaceHolder type={PlaceHolderTypes.LOADING} />\n            </div>\n          ) : (\n            <ConversationScroll\n              swapParams={\n                sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback()\n              }\n              animatedMessageId={animatedMessageId}\n              highLightedMessageId={highLightedMessageId}\n              userId={userId}\n              hasMore={hasMore}\n              disabled={!isOnline}\n              onScroll={onScrollCallback}\n              onScrollDown={onScrollDownCallback}\n              scrollRef={scrollRef}\n              readStatus={readStatus}\n              useReaction={usingReaction}\n              replyType={replyType}\n              allMessages={allMessages}\n              scrollToMessage={scrollToMessage}\n              emojiAllMap={emojiAllMap}\n              membersMap={nicknamesMap}\n              editDisabled={utils.isDisabledBecauseFrozen(currentGroupChannel)}\n              deleteMessage={deleteMessage}\n              updateMessage={updateMessage}\n              resendMessage={resendMessage}\n              toggleReaction={toggleReaction}\n              emojiContainer={emojiContainer}\n              renderChatItem={renderChatItem}\n              quoteMessage={quoteMessage}\n              setQuoteMessage={setQuoteMessage}\n              showScrollBot={showScrollBot}\n              onClickScrollBot={() => {\n                setIntialTimeStamp(null);\n                setAnimatedMessageId(null);\n                setHighLightedMessageId(null);\n              }}\n              renderCustomMessage={renderCustomMessage}\n              useMessageGrouping={useMessageGrouping}\n              messagesDispatcher={messagesDispatcher}\n              currentGroupChannel={currentGroupChannel}\n              memoizedEmojiListItems={memoizedEmojiListItems}\n            />\n          )\n      }\n      <div className=\"sendbird-conversation__footer\">\n        <MessageInputWrapper\n          channel={currentGroupChannel}\n          user={user}\n          ref={messageInputRef}\n          isOnline={isOnline}\n          initialized={initialized}\n          onSendMessage={onSendMessage}\n          onFileUpload={onSendFileMessage}\n          quoteMessage={quoteMessage}\n          setQuoteMessage={setQuoteMessage}\n          renderMessageInput={renderMessageInput}\n        />\n        <div className=\"sendbird-conversation__footer__typing-indicator\">\n          <TypingIndicator className=\"sendbird-conversation__footer__typing-indicator__text\" channelUrl={channelUrl} sb={sdk} logger={logger} />\n          {\n            !isOnline && (\n              <ConnectionStatus sdkInit={sdkInit} sb={sdk} logger={logger} />\n            )\n          }\n        </div>\n      </div>\n    </UserProfileProvider>\n  );\n};\n\nConversationPanel.propTypes = {\n  channelUrl: PropTypes.string,\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool,\n      sdk: PropTypes.shape({\n        getErrorFirstCallback: PropTypes.func,\n        removeChannelHandler: PropTypes.func,\n        GroupChannel: PropTypes.any,\n        ChannelHandler: PropTypes.any,\n        addChannelHandler: PropTypes.func,\n        UserMessageParams: PropTypes.any,\n        FileMessageParams: PropTypes.any,\n        getAllEmoji: PropTypes.func,\n        appInfo: PropTypes.shape({}),\n      }),\n      error: PropTypes.bool,\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({}),\n    }),\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    reconnect: PropTypes.func,\n  }).isRequired,\n  config: PropTypes.shape({\n    disableUserProfile: PropTypes.bool,\n    renderUserProfile: PropTypes.func,\n    userId: PropTypes.string.isRequired,\n    isOnline: PropTypes.bool.isRequired,\n    theme: PropTypes.string,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func,\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func,\n    }),\n    imageCompression: PropTypes.shape({\n      compressionRate: PropTypes.number,\n      resizingWidth: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n      ]),\n      resizingHeight: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n      ]),\n    }),\n  }).isRequired,\n  queries: PropTypes.shape({\n    messageListParams: PropTypes.shape({\n      includeMetaArray: PropTypes.bool,\n      includeParentMessageText: PropTypes.bool,\n      includeReaction: PropTypes.bool,\n      includeReplies: PropTypes.bool,\n      includeThreadInfo: PropTypes.bool,\n      limit: PropTypes.number,\n      reverse: PropTypes.bool,\n      senderUserIdsFilter: PropTypes.arrayOf(PropTypes.string),\n    }),\n  }),\n  startingPoint: PropTypes.number,\n  highlightedMessage: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  onBeforeSendUserMessage: PropTypes.func, // onBeforeSendUserMessage(text)\n  onBeforeSendFileMessage: PropTypes.func, // onBeforeSendFileMessage(File)\n  onBeforeUpdateUserMessage: PropTypes.func,\n  renderChatItem: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  renderCustomMessage: PropTypes.func,\n  renderMessageInput: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  renderChatHeader: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  showSearchIcon: PropTypes.bool,\n  onSearchClick: PropTypes.func,\n  onChatHeaderActionClick: PropTypes.func,\n  useReaction: PropTypes.bool,\n  replyType: PropTypes.oneOf(['NONE', 'QUOTE_REPLY', 'THREAD']),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  useMessageGrouping: PropTypes.bool,\n};\n\nConversationPanel.defaultProps = {\n  channelUrl: null,\n  queries: {},\n  onBeforeSendUserMessage: null,\n  onBeforeSendFileMessage: null,\n  onBeforeUpdateUserMessage: null,\n  startingPoint: null,\n  highlightedMessage: null,\n  renderChatItem: null,\n  renderCustomMessage: null,\n  renderMessageInput: null,\n  renderChatHeader: null,\n  useReaction: true,\n  replyType: 'NONE',\n  showSearchIcon: false,\n  onSearchClick: noop,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  useMessageGrouping: true,\n  onChatHeaderActionClick: noop,\n};\n\nexport const {\n  getEmojiCategoriesFromEmojiContainer,\n  getAllEmojisFromEmojiContainer,\n  getEmojisFromEmojiContainer,\n} = utils;\n\nexport default withSendbirdContext(ConversationPanel);\n"]},"metadata":{},"sourceType":"module"}
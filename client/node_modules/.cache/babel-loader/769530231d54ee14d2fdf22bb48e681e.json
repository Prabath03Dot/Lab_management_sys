{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction getCurves(_ref) {\n  let {\n    size,\n    thickness,\n    sections,\n    renderRoundedLineCaps\n  } = _ref;\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves = [];\n  const curvesInOrder = [];\n\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({\n      sum,\n      offset,\n      data: sections[i],\n      root: false\n    });\n    offset -= sections[i].value / 100 * accumulated;\n  }\n\n  curves.push({\n    sum,\n    offset,\n    data: null,\n    root: true\n  });\n  curvesInOrder.push(__spreadProps(__spreadValues({}, curves[curves.length - 1]), {\n    lineRoundCaps: false\n  }));\n\n  if (curves.length > 2) {\n    curvesInOrder.push(__spreadProps(__spreadValues({}, curves[0]), {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n    curvesInOrder.push(__spreadProps(__spreadValues({}, curves[curves.length - 2]), {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push(__spreadProps(__spreadValues({}, curves[i]), {\n        lineRoundCaps: false\n      }));\n    }\n  } else {\n    curvesInOrder.push(__spreadProps(__spreadValues({}, curves[0]), {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n  }\n\n  return curvesInOrder;\n}\n\nexport { getCurves };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\core\\src\\components\\RingProgress\\get-curves\\get-curves.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MantineColor } from '@mantine/styles';\n\ninterface CurveData {\n  value: number;\n  color: MantineColor;\n}\n\ninterface GetCurves {\n  sections: CurveData[];\n  size: number;\n  thickness: number;\n  renderRoundedLineCaps: boolean;\n}\n\ninterface Curve {\n  sum: number;\n  offset: number;\n  root: boolean;\n  data: CurveData;\n  lineRoundCaps?: boolean;\n}\n\nexport function getCurves({ size, thickness, sections, renderRoundedLineCaps }: GetCurves) {\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves: Curve[] = [];\n  const curvesInOrder: Curve[] = [];\n\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({ sum, offset, data: sections[i], root: false });\n    offset -= (sections[i].value / 100) * accumulated;\n  }\n\n  curves.push({ sum, offset, data: null, root: true });\n\n  // Reorder curves to layer appropriately and selectively set caps to round\n\n  curvesInOrder.push({ ...curves[curves.length - 1], lineRoundCaps: false });\n  if (curves.length > 2) {\n    curvesInOrder.push({ ...curves[0], lineRoundCaps: renderRoundedLineCaps });\n    curvesInOrder.push({ ...curves[curves.length - 2], lineRoundCaps: renderRoundedLineCaps });\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push({ ...curves[i], lineRoundCaps: false });\n    }\n  } else {\n    curvesInOrder.push({ ...curves[0], lineRoundCaps: renderRoundedLineCaps });\n  }\n\n  return curvesInOrder;\n}\n"]},"metadata":{},"sourceType":"module"}
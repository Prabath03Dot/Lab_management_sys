{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\n\nfunction getFullscreenElement() {\n  const _document = window.document;\n  const fullscreenElement = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;\n  return fullscreenElement;\n}\n\nasync function exitFullscreen() {\n  const _document = window.document;\n  if (typeof _document.exitFullscreen === \"function\") return _document.exitFullscreen();\n  if (typeof _document.msExitFullscreen === \"function\") return _document.msExitFullscreen();\n  if (typeof _document.webkitExitFullscreen === \"function\") return _document.webkitExitFullscreen();\n  if (typeof _document.mozCancelFullScreen === \"function\") return _document.mozCancelFullScreen();\n  return null;\n}\n\nasync function enterFullScreen(element) {\n  var _a, _b, _c, _d;\n\n  const _element = element;\n  return ((_a = _element.requestFullscreen) == null ? void 0 : _a.call(_element)) || ((_b = _element.msRequestFullscreen) == null ? void 0 : _b.call(_element)) || ((_c = _element.webkitRequestFullscreen) == null ? void 0 : _c.call(_element)) || ((_d = _element.mozRequestFullscreen) == null ? void 0 : _d.call(_element));\n}\n\nconst prefixes = [\"\", \"webkit\", \"moz\", \"ms\"];\n\nfunction addEvents(element, _ref2) {\n  let {\n    onFullScreen,\n    onError\n  } = _ref2;\n  prefixes.forEach(prefix => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n  return () => {\n    prefixes.forEach(prefix => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nfunction useFullscreen() {\n  const [fullscreen, setFullscreen] = useState(false);\n\n  const _ref = useRef();\n\n  const handleFullscreenChange = useCallback(event => {\n    setFullscreen(event.target === getFullscreenElement());\n  }, [setFullscreen]);\n  const handleFullscreenError = useCallback(event => {\n    setFullscreen(false);\n    console.error(`[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`);\n  }, [setFullscreen]);\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n  const ref = useCallback(element => {\n    if (element === null) {\n      _ref.current = window.document.documentElement;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n\n    return void 0;\n  }, []);\n  return {\n    ref,\n    toggle,\n    fullscreen\n  };\n}\n\nexport { useFullscreen };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-fullscreen\\use-fullscreen.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useRef, useState, useEffect } from 'react';\n\nfunction getFullscreenElement(): HTMLElement | null {\n  const _document = window.document as any;\n\n  const fullscreenElement =\n    _document.fullscreenElement ||\n    _document.webkitFullscreenElement ||\n    _document.mozFullScreenElement ||\n    _document.msFullscreenElement;\n\n  return fullscreenElement;\n}\n\nasync function exitFullscreen() {\n  const _document = window.document as any;\n\n  if (typeof _document.exitFullscreen === 'function') return _document.exitFullscreen();\n  if (typeof _document.msExitFullscreen === 'function') return _document.msExitFullscreen();\n  if (typeof _document.webkitExitFullscreen === 'function') return _document.webkitExitFullscreen();\n  if (typeof _document.mozCancelFullScreen === 'function') return _document.mozCancelFullScreen();\n\n  return null;\n}\n\nasync function enterFullScreen(element: HTMLElement) {\n  const _element = element as any;\n\n  return (\n    _element.requestFullscreen?.() ||\n    _element.msRequestFullscreen?.() ||\n    _element.webkitRequestFullscreen?.() ||\n    _element.mozRequestFullscreen?.()\n  );\n}\n\nconst prefixes = ['', 'webkit', 'moz', 'ms'];\n\nfunction addEvents(\n  element: HTMLElement,\n  {\n    onFullScreen,\n    onError,\n  }: { onFullScreen: (event: Event) => void; onError: (event: Event) => void }\n) {\n  prefixes.forEach((prefix) => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n\n  return () => {\n    prefixes.forEach((prefix) => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nexport function useFullscreen<T extends HTMLElement = any>() {\n  const [fullscreen, setFullscreen] = useState<boolean>(false);\n\n  const _ref = useRef<T>();\n\n  const handleFullscreenChange = useCallback(\n    (event: Event) => {\n      setFullscreen(event.target === getFullscreenElement());\n    },\n    [setFullscreen]\n  );\n\n  const handleFullscreenError = useCallback(\n    (event: Event) => {\n      setFullscreen(false);\n      // eslint-disable-next-line no-console\n      console.error(\n        `[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`\n      );\n    },\n    [setFullscreen]\n  );\n\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n\n  const ref = useCallback((element: T | null) => {\n    if (element === null) {\n      _ref.current = window.document.documentElement as T;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement as T;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    return undefined;\n  }, []);\n\n  return { ref, toggle, fullscreen } as const;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function createAriaHider(containerNode) {\n  let selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"body > :not(script)\";\n  const rootNodes = Array.from(document.querySelectorAll(selector)).map(node => {\n    if (node.contains(containerNode)) {\n      return void 0;\n    }\n\n    const ariaHidden = node.getAttribute(\"aria-hidden\");\n\n    if (ariaHidden === null || ariaHidden === \"false\") {\n      node.setAttribute(\"aria-hidden\", \"true\");\n    }\n\n    return {\n      node,\n      ariaHidden\n    };\n  });\n  return () => {\n    rootNodes.forEach(item => {\n      if (!item) {\n        return;\n      }\n\n      if (item.ariaHidden === null) {\n        item.node.removeAttribute(\"aria-hidden\");\n      } else {\n        item.node.setAttribute(\"aria-hidden\", item.ariaHidden);\n      }\n    });\n  };\n}\n\nexport { createAriaHider };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-focus-trap\\create-aria-hider.ts"],"names":[],"mappings":"AAAO,SAAS,eAAT,CAAyB,aAAzB,EAA0E;AAAA,MAAlC,QAAkC,uEAAvB,qBAAuB;AAC/E,QAAM,SAAS,GAAG,KAAK,CAAC,IAAN,CAAW,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,CAAX,EAAgD,GAAhD,CAAqD,IAAD,IAAU;AAC9E,QAAI,IAAI,CAAC,QAAL,CAAc,aAAd,CAAJ,EAAkC;AAChC,aAAO,KAAK,CAAZ;AACD;;AACD,UAAM,UAAU,GAAG,IAAI,CAAC,YAAL,CAAkB,aAAlB,CAAnB;;AACA,QAAI,UAAU,KAAK,IAAf,IAAuB,UAAU,KAAK,OAA1C,EAAmD;AACjD,MAAA,IAAI,CAAC,YAAL,CAAkB,aAAlB,EAAiC,MAAjC;AACD;;AACD,WAAO;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,KAAP;AACD,GATiB,CAAlB;AAUA,SAAO,MAAM;AACX,IAAA,SAAS,CAAC,OAAV,CAAmB,IAAD,IAAU;AAC1B,UAAI,CAAC,IAAL,EAAW;AACT;AACD;;AACD,UAAI,IAAI,CAAC,UAAL,KAAoB,IAAxB,EAA8B;AAC5B,QAAA,IAAI,CAAC,IAAL,CAAU,eAAV,CAA0B,aAA1B;AACD,OAFD,MAEO;AACL,QAAA,IAAI,CAAC,IAAL,CAAU,YAAV,CAAuB,aAAvB,EAAsC,IAAI,CAAC,UAA3C;AACD;AACF,KATD;AAUD,GAXD;AAYF","sourcesContent":["type Value = {\n  node: HTMLElement;\n  ariaHidden: string;\n};\n\nexport function createAriaHider(\n  containerNode: HTMLElement,\n  selector: string = 'body > :not(script)'\n) {\n  const rootNodes: Value[] = Array.from<HTMLElement>(document.querySelectorAll(selector)).map(\n    (node) => {\n      if (node.contains(containerNode)) {\n        return undefined;\n      }\n\n      const ariaHidden = node.getAttribute('aria-hidden');\n\n      if (ariaHidden === null || ariaHidden === 'false') {\n        node.setAttribute('aria-hidden', 'true');\n      }\n\n      return { node, ariaHidden };\n    }\n  );\n\n  return () => {\n    rootNodes.forEach((item) => {\n      if (!item) {\n        return;\n      }\n\n      if (item.ariaHidden === null) {\n        item.node.removeAttribute('aria-hidden');\n      } else {\n        item.node.setAttribute('aria-hidden', item.ariaHidden);\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
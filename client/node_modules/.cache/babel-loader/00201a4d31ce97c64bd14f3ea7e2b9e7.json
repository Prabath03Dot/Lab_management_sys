{"ast":null,"code":"import { useState } from 'react';\n\nfunction getInputOnChange(setValue) {\n  return val => {\n    if (!val) {\n      setValue(val);\n    } else if (typeof val === \"function\") {\n      setValue(val);\n    } else if (typeof val === \"object\" && \"nativeEvent\" in val) {\n      const {\n        currentTarget\n      } = val;\n\n      if (currentTarget.type === \"checkbox\") {\n        setValue(currentTarget.checked);\n      } else {\n        setValue(currentTarget.value);\n      }\n    } else {\n      setValue(val);\n    }\n  };\n}\n\nfunction useInputState(initialState) {\n  const [value, setValue] = useState(initialState);\n  return [value, getInputOnChange(setValue)];\n}\n\nexport { getInputOnChange, useInputState };","map":{"version":3,"sources":["D:\\D-Downlods\\MINI_ Prpject 2022\\lab-manage-sys\\node_modules\\@mantine\\hooks\\src\\use-input-state\\use-input-state.ts"],"names":[],"mappings":";;AACO,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AACzC,SAAQ,GAAD,IAAS;AACd,QAAI,CAAC,GAAL,EAAU;AACR,MAAA,QAAQ,CAAC,GAAD,CAAR;AACD,KAFD,MAEO,IAAI,OAAO,GAAP,KAAe,UAAnB,EAA+B;AACpC,MAAA,QAAQ,CAAC,GAAD,CAAR;AACD,KAFM,MAEA,IAAI,OAAO,GAAP,KAAe,QAAf,IAA2B,iBAAiB,GAAhD,EAAqD;AAC1D,YAAM;AAAE,QAAA;AAAF,UAAoB,GAA1B;;AACA,UAAI,aAAa,CAAC,IAAd,KAAuB,UAA3B,EAAuC;AACrC,QAAA,QAAQ,CAAC,aAAa,CAAC,OAAf,CAAR;AACD,OAFD,MAEO;AACL,QAAA,QAAQ,CAAC,aAAa,CAAC,KAAf,CAAR;AACD;AACF,KAPM,MAOA;AACL,MAAA,QAAQ,CAAC,GAAD,CAAR;AACD;AACF,GAfD;AAgBD;;AACM,SAAS,aAAT,CAAuB,YAAvB,EAAqC;AAC1C,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAC,YAAD,CAAlC;AACA,SAAO,CAAC,KAAD,EAAQ,gBAAgB,CAAC,QAAD,CAAxB,CAAP;AACF","sourcesContent":["import React, { useState } from 'react';\n\nexport function getInputOnChange<T>(\n  setValue: (value: null | undefined | T | ((current: T) => T)) => void\n) {\n  return (val: null | undefined | T | React.ChangeEvent<any> | ((current: T) => T)) => {\n    if (!val) {\n      setValue(val as T);\n    } else if (typeof val === 'function') {\n      setValue(val);\n    } else if (typeof val === 'object' && 'nativeEvent' in val) {\n      const { currentTarget } = val;\n\n      if (currentTarget.type === 'checkbox') {\n        setValue((currentTarget as any).checked as any);\n      } else {\n        setValue(currentTarget.value as any);\n      }\n    } else {\n      setValue(val);\n    }\n  };\n}\n\nexport function useInputState<T>(initialState: T) {\n  const [value, setValue] = useState(initialState);\n  return [value, getInputOnChange<T>(setValue)] as [\n    T,\n    (value: null | undefined | T | React.ChangeEvent<any>) => void\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}